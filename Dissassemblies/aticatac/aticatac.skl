@isub+begin
@org $6000
@start
@isub+end

; FRAMES LSB
;
; The system variable FRAMES least significant bytes (LSB). Loaded by the 6th
; tape section.
@label=FRAMES_LSB
b$5C78 DEFB $48

; FRAMES MSB
;
; The system variable FRAMES middle significant bytes (MSB). Loaded by the 6th
; tape section.
@label=FRAMES_MSB
b$5C79 DEFB $25

i$5C7A

; Jump Routine
;
; Jump routine (in the system variable NMIADD). Loaded by the 5th tape section.
; .
; This entry point is used by #R$7E7E.
; .
; #TABLE(default)
; { I | #REGhl | Holds the address of the routine to jump to. }
; TABLE#
@label=JumpRoutine
c$5CB0 JP (HL)       ; Jump to address held by #REGhl.

i$5CB1

; Game Selection Flags
;
; Holds the selections made in the game selection menu.
; .
; #TABLE(default)
; { =h Bit  | =h Description }
; { 0       | }
; { 1-2     | The game controller. }
; {         | $00=keyboard. }
; {         | $01=Kempston joystick. }
; {         | $02=cursor joystick. }
; { 3-4     | The character. }
; {         | $00=knight. }
; {         | $01=wizard. }
; {         | $02=serf. }
; { 5-7     | }
; TABLE#
@label=GameSelectionFlags
g$5E00 DEFB $00

; UDG Address
;
; Holds the UDG address.
; .
; Note that the font address is defined as 256 bytes lower than the first byte
; of the SPACE character.
@label=CurrentUDGAddress
g$5E01 DEFW $0600

; Last System Frame Counter
;
; Holds the least significant byte (LSB) of the last read system frame counter.
@label=LastSystemFrameCounter
g$5E03 DEFS $01

; Only Processing Player Sprites
;
; Indicates if only the player specific sprites are being processed ($00=not
; only processing player sprites, $01=only processing player sprites).
@label=OnlyProcessingPlayerSprites
g$5E04 DEFS $01

; Random Value
;
; Holds a random value. Calculated in #R$7E23.
@label=RandomValue
g$5E05 DEFW $302C

i$5E07

; Current Sprite Width
;
; Holds the width (in bytes) of the current sprite.
@label=CurrentSpriteWidth
g$5E10 DEFB $22

; Current Sprite Height
;
; Holds the height (in pixels) of the current sprite.
@label=CurrentSpriteHeight
g$5E11 DEFB $AF

; Game Loop Counter
;
; Holds a count of the number of game loops. Incremented by #R$7E23.
@label=GameLoopCounter
g$5E12 DEFW $F53A

; Current Screen Flags
;
; Holds the current screen's flags.
; .
; #TABLE(default)
; { =h Bit  | =h Description }
; { 0       | Set if the screen sprites have been displayed. }
; { 1-7     | }
; TABLE#
@label=CurrentScreenFlags
g$5E14 DEFB $AC

; Current Sprite Previous Graphic Index
;
; Holds the previous graphic index in #R$A4BE of the current sprite.
@label=CurrentSpritePreviousGraphicIndex
g$5E15 DEFB $36

; Current Sprite Previous X Coordinate
;
; Holds the previous X coordinate of the current sprite.
@label=CurrentSpritePreviousXCoordinate
g$5E16 DEFB $0E

; Current Sprite Previous Y Coordinate
;
; Holds the previous Y coordinate of the current sprite.
@label=CurrentSpritePreviousYCoordinate
g$5E17 DEFB $00

; Current Sprite Mask Lines To Draw
;
; Holds the number of lines of the current sprite mask to draw.
@label=CurrentSpriteMaskLinesToDraw
g$5E18 DEFB $00

; Current Sprite Lines To Draw
;
; Holds the number of lines of the current sprite to draw.
@label=CurrentSpriteLinesToDraw
g$5E19 DEFB $06

; Current Colour Attribute
;
; Holds the current colour attribute.
@label=CurrentColourAttribute
g$5E1A DEFB $00

; Current Screen Background Item Address
;
; Holds the address of the current screen's background item in #R$76A9.
@label=CurrentScreenBackgroundItemAddress
g$5E1B DEFW $2C00

; Current Screen Interior Width
;
; Holds the interior width (in pixels) of the current screen.
@label=CurrentScreenInteriorWidth
g$5E1D DEFB $30

; Current Screen Interior Height
;
; Holds the interior height (in pixels) of the current screen.
@label=CurrentScreenInteriorHeight
g$5E1E DEFB $0E

i$5E1F

; Pick Up Key Pressed
;
; Indicates if a pick up (or drop) key has been pressed ($00=pick up (or drop)
; key not pressed, $02=Z key pressed).
@label=PickUpKeyPressed
g$5E20 DEFS $01

; Player Lives
;
; Holds the player's lives.
@label=PlayerLives
g$5E21 DEFB $00

; Game Selection Menu Item Colour Attribute
;
; Holds the colour attribute of the current game selection menu item.
@label=GameSelectionMenuItemColourAttribute
g$5E22 DEFB $00

; Line Drawing Max Delta
;
; Holds the line drawing maximum delta; used when drawing a line from a start
; point to an end point.
@label=LineDrawingMaxDelta
g$5E23 DEFB $00

; Line Drawing Flags
;
; Holds the line drawing flags; used when drawing a line from a start point to
; an end point.
; .
; #TABLE(default)
; { =h Bit  | =h Description }
; { 0       | Set if the Y coordinate of the end point is greater than the Y
; coordinate of the start point. }
; { 1       | Set if the X coordinate of the end point is greater than the X
; coordinate of the start point. }
; TABLE#
@label=LineDrawingFlags
g$5E24 DEFB $3A

; Game status buffer entry at 5E25
@label=UnknownAt$5E25
g$5E25 DEFB $EF

i$5E26

; Player Current Health
;
; Holds the player's current health.
;
; The health of the player is reflected in how much - its height (in pixels) -
; .   of the chicken in the status panel is displayed. A full chicken is $1E
; .   pixels in height, and the maximum health of the player is $F0 ($1E x 8).
@label=PlayerCurrentHealth
g$5E28 DEFB $AF

; Player Previous Health
;
; Holds the player's previous health.
@label=PlayerPreviousHealth
g$5E29 DEFB $3A

; Player Score
;
; Holds the player's score.
; .
; Stored in BCD format (from high byte to low byte), 000000-999999.
@label=PlayerScore
g$5E2A DEFB $F5,$AC,$36

i$5E2D

; Door Counter
@label=DoorCounter
g$5E2E DEFB $00

; Player Steps Counter
;
; Holds a count of the number of steps the player has made. Used in #R$A3C7 to
; determine if the player walking sound should be played.
@label=PlayerStepsCounter
g$5E2F DEFB $00

; Collected Item Sprite Data 1
;
; Holds the 1st collected item sprite data.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Sprite Data Address   | Address of the sprite data structure.
; }
; { $02         | Graphic Index         | Graphic index in #R$5E30. }
; { $03         | Colour Attribute      | Colour attribute. }
; TABLE#
@label=CollectedItemSpriteData1
g$5E30 DEFB $06
 $5E31 DEFB $00,$00,$2C

; Collected Item Sprite Data 2
;
; Holds the 2nd collected item sprite data.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Sprite Data Address   | Address of the sprite data structure.
; }
; { $02         | Graphic Index         | Graphic index in #R$5E30. }
; { $03         | Colour Attribute      | Colour attribute. }
; TABLE#
@label=CollectedItemSpriteData2
g$5E34 DEFB $30,$0E,$00,$00

; Collected Item Sprite Data 3
;
; Holds the 3rd collected item sprite data.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Sprite Data Address   | Address of the sprite data structure.
; }
; { $02         | Graphic Index         | Graphic index in #R$5E30. }
; { $03         | Colour Attribute      | Colour attribute. }
; TABLE#
@label=CollectedItemSpriteData3
g$5E38 DEFB $00,$00,$00,$3A

; Initialise Player Y Coordinate
;
; Holds the initialise character Y coordinate.
@label=InitialisePlayerYCoordinate
g$5E3C DEFB $EF

; Game Hours
;
; Holds the game's hours.
; .
; Stored in BCD format, 0-9.
@label=GameHours
g$5E3D DEFB $22

; Game Minutes
;
; Holds the game's minutes.
; .
; Stored in BCD format, 00-59.
@label=GameMinutes
g$5E3E DEFB $22

; Game Seconds
;
; Holds the game's seconds.
; .
; Stored in BCD format, 00-59.
@label=GameSeconds
g$5E3F DEFB $AF

; Screens Visited Flags
;
; Holds the flags of the screens that the player has visited.
; .
; 149 screens can be visited. Each screen is represented by a single bit. The
; bit is 0 if the screen has not been visited, and 1 if the screen has been
; visited. 19 (149 / 8) bytes are required to store the screen visited flags.
@label=ScreensVisitedFlags
g$5E40 DEFB $3A,$F5,$C0,$32,$33,$34,$32,$34
 $5E48 DEFB $0E,$00,$00,$80,$5B,$00,$0D,$80
 $5E50 DEFB $EF,$22,$22

i$5E53

; Game Percentage Completed
;
; Holds the percentage of the game that has been completed. Note that the game
; can never be 100% completed!
; .
; Stored in BCD format, 00-99.
@label=GamePercentageCompleted
g$5E54 DEFB $80

; SetToEB58AtStartOfGame
;
; Holds the ???
@label=SetToEB58AtStartOfGame
g$5E55 DEFW $0000

i$5E57

; Game Entry Point
;
; The game entry point.
; .
; Called by the stub loader on startup.
; .
; The stub loader is called from BASIC once the games has loaded. It will
; decrypt the game code/data from $5FFF to $D5FF. The total size of the game
; code/data decrypted is $7C00, but the actual size of the game code/data is
; $7601. Loaded by the 4th tape section.
; .
; #TABLE
; { $5B80 LD HL,$5FFF       | ; #REGh=$5FFF; start of game code/data. }
; { $5B83 LD BC,$007C       | ; #REGb=$00; inner loop counter. #REGc=$7C; outer
; loop counter. }
; { $5B86 XOR A             | ; Clear #REGa. }
; { $5B87 RRD               | ; Perform a 4-bit right rotation of the 12-bit
; number whose }
; {                         | ; 4 most signigifcant bits are the 4 least
; significant bits of }
; {                         | ; #REGa, and its 8 least significant bits are in
; #REGhl. }
; { $5B89 INC HL            | ; Increment #REGhl. }
; { $5B8A DJNZ,$5B87        | ; Inner loop. }
; { $5B8C DEC C             | ; Decrement #REGc. }
; { $5B8D JR NZ, $5B87      | ; Outer loop. }
; { $5B8F JP $6000 #SPACE15 | ; Jump to the game entry point. }
; TABLE#
@label=GameEntryPoint
c$6000 DI            ; Disable maskable interrupts (stop keyboard scan).
 $6001 LD SP,$5E00   ; #REGsp=top of stack (below the start address of the game
                     ; data buffer (address of #R$5E00)).
 $6004 LD A,($5C79)  ; {Compare #R$5C79 to the value set when the game was
 $6007 CP $25        ; loaded.}
 $6009 RET NZ        ; If hacked then exit the game.
 $600A JP $7C19      ; Initialise the game.

; Static Sprite Location Table
;
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A4BE. }
; { $01         | Screen                | Screen number. }
; { $02         | Flags                 | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Colour Attribute      | Colour attribute. }
; { $06         | Flags2                | ??? }
; { $07         | Flags3                | ??? }
; TABLE#
@label=StaticPlayerSpriteData
b$600D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Player.
@label=StaticUnknownSpriteData1
 $6015 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticUnknownSpriteData2
 $601D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticACGKeyLeftSpriteData
 $6025 DEFB $8C,$00,$00,$58,$58,$46,$00,$00 ; ACG Key Left, Screen $00
                                            ; ($58,$58), Bright Yellow\Black.
@label=StaticACGKeyMiddleSpriteData
 $602D DEFB $8D,$00,$00,$58,$58,$46,$00,$00 ; ACG Key Middle, Screen $00
                                            ; ($58,$58), Bright Yellow\Black.
@label=StaticACGKeyRightSpriteData
 $6035 DEFB $8E,$00,$00,$58,$58,$46,$00,$00 ; ACG Key Right, Screen $00
                                            ; ($58,$58), Bright Yellow\Black.
@label=StaticGreenKeySpriteData
 $603D DEFB $81,$05,$00,$70,$60,$44,$00,$00 ; Key, Screen $05 ($60,$70), Bright
                                            ; Green\Black.
@label=StaticRedKeySpriteData
 $6045 DEFB $81,$17,$00,$80,$40,$42,$00,$00 ; Key, Screen $17 ($40,$80), Bright
                                            ; Red\Black.
@label=StaticCyanKeySpriteData
 $604D DEFB $81,$53,$00,$58,$58,$45,$00,$00 ; Key, Screen $53 ($58,$58), Bright
                                            ; Cyan\Black.
@label=StaticYellowKeySpriteData
 $6055 DEFB $81,$66,$00,$30,$87,$46,$00,$00 ; Key, Screen $66 ($87,$30), Bright
                                            ; Yellow\Black.
 $605D DEFB $80,$09,$00,$40,$40,$42,$00,$00 ; Leaf, Screen $09 ($40,$40),
                                            ; Bright Red\Black.
 $6065 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $606D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $6075 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $607D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $6085 DEFB $8A,$05,$00,$40,$70,$46,$00,$00 ; Cross, Screen $05 ($70,$40),
                                            ; Bright Yellow\Black.
 $608D DEFB $8B,$30,$00,$40,$70,$45,$00,$00 ; Spanner, Screen $30 ($70,$40),
                                            ; Bright Cyan\Black.
 $6095 DEFB $82,$3B,$00,$60,$60,$44,$00,$00 ; Medicine Bottle, Screen $3B
                                            ; ($60,$60), Bright Green\Black.
 $609D DEFB $83,$48,$00,$70,$70,$45,$00,$00 ; Gobstopper, Screen $48 ($70,$70),
                                            ; Bright Cyan\Black.
 $60A5 DEFB $84,$64,$00,$80,$80,$46,$00,$00 ; Broken, Screen $64 ($80,$80),
                                            ; Bright Yellow\Black.
 $60AD DEFB $85,$6B,$00,$40,$40,$45,$00,$00 ; Rope, Screen $6B ($40,$40),
                                            ; Bright Cyan\Black.
 $60B5 DEFB $86,$13,$00,$50,$50,$44,$00,$00 ; Arm, Screen $13 ($50,$50), Bright
                                            ; Green\Black.
 $60BD DEFB $87,$84,$00,$60,$40,$43,$00,$00 ; Amulet, Screen $84 ($40,$60),
                                            ; Bright Magenta\Black.
 $60C5 DEFB $88,$1F,$00,$70,$70,$42,$00,$00 ; Money Bag, Screen $1F ($70,$70),
                                            ; Bright Red\Black.
 $60CD DEFB $89,$49,$00,$50,$40,$47,$00,$00 ; Skeleton Head, Screen $49
                                            ; ($40,$50), Bright White\Black.
 $60D5 DEFB $50,$27,$00,$57,$67,$43,$00,$00 ; Can, Screen $27 ($67,$57), Bright
                                            ; Magenta\Black.
 $60DD DEFB $50,$7F,$00,$40,$40,$46,$00,$00 ; Can, Screen $7F ($40,$40), Bright
                                            ; Yellow\Black.
 $60E5 DEFB $50,$1E,$00,$50,$57,$46,$00,$00 ; Can, Screen $1E ($57,$50), Bright
                                            ; Yellow\Black.
 $60ED DEFB $50,$0C,$00,$60,$60,$43,$00,$00 ; Can, Screen $0C ($60,$60), Bright
                                            ; Magenta\Black.
 $60F5 DEFB $50,$67,$00,$57,$40,$42,$00,$00 ; Can, Screen $67 ($40,$57), Bright
                                            ; Red\Black.
 $60FD DEFB $50,$41,$00,$57,$67,$42,$00,$00 ; Can, Screen $41 ($67,$57), Bright
                                            ; Red\Black.
 $6105 DEFB $51,$75,$00,$30,$40,$44,$00,$00 ; Candy Bar, Screen $75 ($40,$30),
                                            ; Bright Green\Black.
 $610D DEFB $51,$83,$00,$30,$40,$46,$00,$00 ; Candy Bar, Screen $83 ($40,$30),
                                            ; Bright Yellow\Black.
 $6115 DEFB $51,$0C,$00,$60,$70,$42,$00,$00 ; Candy Bar, Screen $0C ($70,$60),
                                            ; Bright Red\Black.
 $611D DEFB $51,$68,$00,$57,$40,$43,$00,$00 ; Candy Bar, Screen $68 ($40,$57),
                                            ; Bright Magenta\Black.
 $6125 DEFB $51,$45,$00,$57,$46,$45,$00,$00 ; Candy Bar, Screen $45 ($46,$57),
                                            ; Bright Cyan\Black.
 $612D DEFB $51,$46,$00,$43,$7B,$45,$00,$00 ; Candy Bar, Screen $46 ($7B,$43),
                                            ; Bright Cyan\Black.
 $6135 DEFB $52,$86,$00,$47,$60,$43,$00,$00 ; Ham, Screen $86 ($60,$47), Bright
                                            ; Magenta\Black.
 $613D DEFB $52,$6E,$00,$60,$77,$42,$00,$00 ; Ham, Screen $6E ($77,$60), Bright
                                            ; Red\Black.
 $6145 DEFB $52,$7D,$00,$57,$67,$43,$00,$00 ; Ham, Screen $7D ($67,$57), Bright
                                            ; Magenta\Black.
 $614D DEFB $52,$6A,$00,$30,$67,$42,$00,$00 ; Ham, Screen $6A ($67,$30), Bright
                                            ; Red\Black.
 $6155 DEFB $52,$3E,$00,$43,$7B,$42,$00,$00 ; Ham, Screen $3E ($7B,$43), Bright
                                            ; Red\Black.
 $615D DEFB $52,$35,$00,$57,$67,$43,$00,$00 ; Ham, Screen $35 ($67,$57), Bright
                                            ; Magenta\Black.
 $6165 DEFB $53,$2B,$00,$40,$80,$46,$00,$00 ; Lollipop, Screen $2B ($80,$40),
                                            ; Bright Yellow\Black.
 $616D DEFB $53,$8A,$00,$57,$67,$45,$00,$00 ; Lollipop, Screen $8A ($67,$57),
                                            ; Bright Cyan\Black.
 $6175 DEFB $53,$09,$00,$80,$90,$44,$00,$00 ; Lollipop, Screen $09 ($90,$80),
                                            ; Bright Green\Black.
 $617D DEFB $53,$70,$00,$80,$90,$43,$00,$00 ; Lollipop, Screen $70 ($90,$80),
                                            ; Bright Magenta\Black.
 $6185 DEFB $53,$74,$00,$57,$87,$42,$00,$00 ; Lollipop, Screen $74 ($87,$57),
                                            ; Bright Red\Black.
 $618D DEFB $53,$33,$00,$57,$67,$45,$00,$00 ; Lollipop, Screen $33 ($67,$57),
                                            ; Bright Cyan\Black.
 $6195 DEFB $54,$78,$00,$37,$37,$47,$00,$00 ; Ice Cream Cone, Screen $78
                                            ; ($37,$37), Bright White\Black.
 $619D DEFB $54,$8A,$00,$7F,$7F,$47,$00,$00 ; Ice Cream Cone, Screen $8A
                                            ; ($7F,$7F), Bright White\Black.
 $61A5 DEFB $54,$0B,$00,$57,$67,$46,$00,$00 ; Ice Cream Cone, Screen $0B
                                            ; ($67,$57), Bright Yellow\Black.
 $61AD DEFB $54,$65,$00,$57,$87,$46,$00,$00 ; Ice Cream Cone, Screen $65
                                            ; ($87,$57), Bright Yellow\Black.
 $61B5 DEFB $54,$53,$00,$43,$7B,$47,$00,$00 ; Ice Cream Cone, Screen $53
                                            ; ($7B,$43), Bright White\Black.
 $61BD DEFB $54,$4C,$00,$6B,$7B,$46,$00,$00 ; Ice Cream Cone, Screen $4C
                                            ; ($7B,$6B), Bright Yellow\Black.
 $61C5 DEFB $55,$7B,$00,$50,$60,$45,$00,$00 ; Bowl, Screen $7B ($60,$50),
                                            ; Bright Cyan\Black.
 $61CD DEFB $55,$87,$00,$57,$67,$45,$00,$00 ; Bowl, Screen $87 ($67,$57),
                                            ; Bright Cyan\Black.
 $61D5 DEFB $55,$0D,$00,$30,$67,$43,$00,$00 ; Bowl, Screen $0D ($67,$30),
                                            ; Bright Magenta\Black.
 $61DD DEFB $55,$66,$00,$43,$87,$43,$00,$00 ; Bowl, Screen $66 ($87,$43),
                                            ; Bright Magenta\Black.
 $61E5 DEFB $55,$53,$00,$6B,$7B,$42,$00,$00 ; Bowl, Screen $53 ($7B,$6B),
                                            ; Bright Red\Black.
 $61ED DEFB $55,$4F,$00,$57,$67,$47,$00,$00 ; Bowl, Screen $4F ($67,$57),
                                            ; Bright White\Black.
 $61F5 DEFB $56,$7E,$00,$37,$80,$44,$00,$00 ; Apple, Screen $7E ($80,$37),
                                            ; Bright Green\Black.
 $61FD DEFB $56,$8C,$00,$57,$67,$44,$00,$00 ; Apple, Screen $8C ($67,$57),
                                            ; Bright Green\Black.
 $6205 DEFB $56,$70,$00,$30,$90,$44,$00,$00 ; Apple, Screen $70 ($90,$30),
                                            ; Bright Green\Black.
 $620D DEFB $56,$66,$00,$6B,$87,$44,$00,$00 ; Apple, Screen $66 ($87,$6B),
                                            ; Bright Green\Black.
 $6215 DEFB $56,$3C,$00,$43,$7B,$42,$00,$00 ; Apple, Screen $3C ($7B,$43),
                                            ; Bright Red\Black.
 $621D DEFB $56,$39,$00,$43,$7B,$42,$00,$00 ; Apple, Screen $39 ($7B,$43),
                                            ; Bright Red\Black.
 $6225 DEFB $57,$7E,$00,$87,$80,$47,$00,$00 ; Bottle, Screen $7E ($80,$87),
                                            ; Bright White\Black.
 $622D DEFB $57,$24,$00,$60,$70,$47,$00,$00 ; Bottle, Screen $24 ($70,$60),
                                            ; Bright White\Black.
 $6235 DEFB $57,$70,$00,$57,$90,$47,$00,$00 ; Bottle, Screen $70 ($90,$57),
                                            ; Bright White\Black.
 $623D DEFB $57,$12,$00,$57,$40,$47,$00,$00 ; Bottle, Screen $12 ($40,$57),
                                            ; Bright White\Black.
 $6245 DEFB $57,$5E,$00,$57,$67,$47,$00,$00 ; Bottle, Screen $5E ($67,$57),
                                            ; Bright White\Black.
 $624D DEFB $57,$1D,$00,$30,$67,$47,$00,$00 ; Bottle, Screen $1D ($67,$30),
                                            ; Bright White\Black.
 $6255 DEFB $50,$17,$00,$40,$40,$42,$00,$00 ; Can, Screen $17 ($40,$40), Bright
                                            ; Red\Black.
 $625D DEFB $50,$73,$00,$30,$67,$42,$00,$00 ; Can, Screen $73 ($67,$30), Bright
                                            ; Red\Black.
 $6265 DEFB $50,$07,$00,$57,$67,$43,$00,$00 ; Can, Screen $07 ($67,$57), Bright
                                            ; Magenta\Black.
 $626D DEFB $50,$02,$00,$57,$67,$43,$00,$00 ; Can, Screen $02 ($67,$57), Bright
                                            ; Magenta\Black.
 $6275 DEFB $51,$0F,$00,$57,$67,$43,$00,$00 ; Candy Bar, Screen $0F ($67,$57),
                                            ; Bright Magenta\Black.
 $627D DEFB $51,$3A,$00,$30,$48,$43,$00,$00 ; Candy Bar, Screen $3A ($48,$30),
                                            ; Bright Magenta\Black.
 $6285 DEFB $51,$41,$00,$80,$67,$42,$00,$00 ; Candy Bar, Screen $41 ($67,$80),
                                            ; Bright Red\Black.
 $628D DEFB $51,$85,$00,$43,$7B,$42,$00,$00 ; Candy Bar, Screen $85 ($7B,$43),
                                            ; Bright Red\Black.
 $6295 DEFB $52,$6C,$00,$57,$47,$43,$00,$00 ; Ham, Screen $6C ($47,$57), Bright
                                            ; Magenta\Black.
 $629D DEFB $52,$3A,$00,$57,$48,$43,$00,$00 ; Ham, Screen $3A ($48,$57), Bright
                                            ; Magenta\Black.
 $62A5 DEFB $52,$69,$00,$30,$40,$03,$00,$00 ; Ham, Screen $69 ($40,$30),
                                            ; Magenta\Black.
 $62AD DEFB $52,$80,$00,$30,$40,$03,$00,$00 ; Ham, Screen $80 ($40,$30),
                                            ; Magenta\Black.
 $62B5 DEFB $53,$04,$00,$57,$67,$42,$00,$00 ; Lollipop, Screen $04 ($67,$57),
                                            ; Bright Red\Black.
 $62BD DEFB $53,$4B,$00,$30,$88,$42,$00,$00 ; Lollipop, Screen $4B ($88,$30),
                                            ; Bright Red\Black.
 $62C5 DEFB $53,$11,$00,$57,$67,$46,$00,$00 ; Lollipop, Screen $11 ($67,$57),
                                            ; Bright Yellow\Black.
 $62CD DEFB $53,$80,$00,$57,$40,$44,$00,$00 ; Lollipop, Screen $80 ($40,$57),
                                            ; Bright Green\Black.
 $62D5 DEFB $54,$69,$00,$30,$67,$46,$00,$00 ; Ice Cream Cone, Screen $69
                                            ; ($67,$30), Bright Yellow\Black.
 $62DD DEFB $54,$35,$00,$57,$90,$46,$00,$00 ; Ice Cream Cone, Screen $35
                                            ; ($90,$57), Bright Yellow\Black.
 $62E5 DEFB $54,$69,$00,$30,$90,$46,$00,$00 ; Ice Cream Cone, Screen $69
                                            ; ($90,$30), Bright Yellow\Black.
 $62ED DEFB $54,$80,$00,$80,$80,$44,$00,$00 ; Ice Cream Cone, Screen $80
                                            ; ($80,$80), Bright Green\Black.
 $62F5 DEFB $55,$57,$00,$57,$40,$46,$00,$00 ; Bowl, Screen $57 ($40,$57),
                                            ; Bright Yellow\Black.
 $62FD DEFB $55,$35,$00,$57,$40,$46,$00,$00 ; Bowl, Screen $35 ($40,$57),
                                            ; Bright Yellow\Black.
 $6305 DEFB $55,$25,$00,$6B,$7B,$43,$00,$00 ; Bowl, Screen $25 ($7B,$6B),
                                            ; Bright Magenta\Black.
 $630D DEFB $55,$1B,$00,$57,$67,$44,$00,$00 ; Bowl, Screen $1B ($67,$57),
                                            ; Bright Green\Black.
 $6315 DEFB $56,$58,$00,$57,$40,$44,$00,$00 ; Apple, Screen $58 ($40,$57),
                                            ; Bright Green\Black.
 $631D DEFB $56,$4E,$00,$67,$40,$42,$00,$00 ; Apple, Screen $4E ($40,$67),
                                            ; Bright Red\Black.
 $6325 DEFB $56,$37,$00,$57,$67,$46,$00,$00 ; Apple, Screen $37 ($67,$57),
                                            ; Bright Yellow\Black.
 $632D DEFB $56,$85,$00,$6B,$7B,$44,$00,$00 ; Apple, Screen $85 ($7B,$6B),
                                            ; Bright Green\Black.
 $6335 DEFB $57,$5B,$00,$57,$67,$47,$00,$00 ; Bottle, Screen $5B ($67,$57),
                                            ; Bright White\Black.
 $633D DEFB $57,$4E,$00,$40,$67,$47,$00,$00 ; Bottle, Screen $4E ($67,$40),
                                            ; Bright White\Black.
 $6345 DEFB $57,$49,$00,$57,$67,$47,$00,$00 ; Bottle, Screen $49 ($67,$57),
                                            ; Bright White\Black.
 $634D DEFB $57,$28,$00,$57,$67,$47,$00,$00 ; Bottle, Screen $28 ($67,$57),
                                            ; Bright White\Black.
 $6355 DEFB $A1,$50,$00,$57,$40,$42,$00,$00 ; Mushroom, Screen $50 ($40,$57),
                                            ; Bright Red\Black.
 $635D DEFB $A1,$43,$00,$6B,$54,$42,$01,$00 ; Mushroom, Screen $43 ($54,$6B),
                                            ; Bright Red\Black.
 $6365 DEFB $A1,$40,$00,$43,$7B,$42,$02,$00 ; Mushroom, Screen $40 ($7B,$43),
                                            ; Bright Red\Black.
 $636D DEFB $A1,$8F,$00,$57,$8F,$42,$03,$00 ; Mushroom, Screen $8F ($8F,$57),
                                            ; Bright Red\Black.
 $6375 DEFB $A1,$8F,$00,$43,$7B,$42,$04,$00 ; Mushroom, Screen $8F ($7B,$43),
                                            ; Bright Red\Black.
 $637D DEFB $A1,$8F,$00,$6B,$7B,$42,$05,$00 ; Mushroom, Screen $8F ($7B,$6B),
                                            ; Bright Red\Black.
 $6385 DEFB $A1,$45,$00,$80,$67,$42,$06,$00 ; Mushroom, Screen $45 ($67,$80),
                                            ; Bright Red\Black.
 $638D DEFB $A1,$38,$00,$6B,$54,$42,$07,$00 ; Mushroom, Screen $38 ($54,$6B),
                                            ; Bright Red\Black.
 $6395 DEFB $A1,$74,$00,$30,$40,$42,$06,$00 ; Mushroom, Screen $74 ($40,$30),
                                            ; Bright Red\Black.
 $639D DEFB $A1,$74,$00,$30,$88,$42,$05,$00 ; Mushroom, Screen $74 ($88,$30),
                                            ; Bright Red\Black.
 $63A5 DEFB $A1,$74,$00,$78,$88,$42,$04,$00 ; Mushroom, Screen $74 ($88,$78),
                                            ; Bright Red\Black.
 $63AD DEFB $A1,$74,$00,$80,$40,$42,$03,$00 ; Mushroom, Screen $74 ($40,$80),
                                            ; Bright Red\Black.
 $63B5 DEFB $A1,$54,$00,$57,$40,$42,$02,$00 ; Mushroom, Screen $54 ($40,$57),
                                            ; Bright Red\Black.
 $63BD DEFB $A1,$3B,$00,$43,$7B,$42,$01,$00 ; Mushroom, Screen $3B ($7B,$43),
                                            ; Bright Red\Black.
 $63C5 DEFB $A1,$3B,$00,$6B,$7B,$42,$00,$00 ; Mushroom, Screen $3B ($7B,$6B),
                                            ; Bright Red\Black.
 $63CD DEFB $A1,$53,$00,$80,$40,$42,$01,$00 ; Mushroom, Screen $53 ($40,$80),
                                            ; Bright Red\Black.
 $63D5 DEFB $31,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticNasty1SpriteData
 $63DD DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticNasty2SpriteData
 $63E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticNasty3SpriteData
 $63ED DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticNasty4SpriteData
 $63F5 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticNasty5SpriteData
 $63FD DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticNasty6SpriteData
 $6405 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=StaticMummySpriteData
 $640D DEFB $70,$17,$00,$50,$50,$47,$00,$00 ; Mummy, Screen $17 ($50,$50),
                                            ; Bright White\Black.
 $6415 DEFB $00,$00,$00,$68,$68,$00,$00,$00 ; Unknown, Screen $00 ($68,$68).
@label=StaticDraculaSpriteData
 $641D DEFB $7C,$6D,$00,$50,$50,$44,$00,$00 ; Dracula, Screen $6D ($50,$50),
                                            ; Bright Green\Black.
 $6425 DEFB $00,$00,$00,$72,$72,$00,$00,$00 ; Unknown, Screen $00 ($72,$72).
@label=StaticDevilSpriteData
 $642D DEFB $78,$43,$00,$50,$50,$43,$00,$00 ; Devil, Screen $43 ($50,$50),
                                            ; Bright Magenta\Black.
 $6435 DEFB $00,$00,$00,$72,$72,$00,$00,$00 ; Unknown, Screen $00 ($72,$72).
@label=StaticFrankensteinSpriteData
 $643D DEFB $74,$55,$00,$50,$50,$42,$00,$00 ; Frankenstein, Screen $55
                                            ; ($50,$50), Bright Red\Black.
 $6445 DEFB $00,$00,$00,$50,$60,$00,$00,$00 ; Unknown, Screen $00 ($60,$50).
@label=StaticHunchbackSpriteData
 $644D DEFB $9C,$56,$00,$58,$38,$42,$00,$00 ; Hunchback, Screen $56 ($38,$58),
                                            ; Bright Red\Black.
 $6455 DEFB $00,$00,$00,$50,$60,$00,$00,$00 ; Unknown, Screen $00 ($60,$50).

; Static Background Item Location Table
;
; Note that connected doors (i.e the door between two screens) or secret
; openings, are consecutive in the location table.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A600. }
; { $01         | Screen                | Screen number. }
; { $02         | Door Flags            | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Flags                 | bit0-1: Used in #R$9D19 to determine
; the opcode when drawing the background item. }
; {             |                       | bit2:  }
; {             |                       | bit3: Set if door shut. }
; {             |                       | bit4:  }
; {             |                       | bit5-7: Jump table index in #R$9970
; and #R$9985. }
; { $06         | Door Timing           | ??? }
; { $07         | Door Flags            | ??? }
; TABLE#
@label=StaticBackgroundItemLocationTable
b$645D DEFB $02,$07,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $07
                                            ; ($1F,$50).
 $6465 DEFB $02,$00,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $00
                                            ; ($B7,$50).
 $646D DEFB $02,$19,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $19
                                            ; ($6F,$A0).
 $6475 DEFB $02,$00,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $00
                                            ; ($6F,$08).
 $647D DEFB $0A,$01,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $01 ($B7,$50).
 $6485 DEFB $0A,$00,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $00 ($1F,$50).
 $648D DEFB $02,$02,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $02
                                            ; ($6F,$A0).
 $6495 DEFB $02,$01,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $01
                                            ; ($6F,$08).
 $649D DEFB $02,$03,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $03
                                            ; ($6F,$A0).
 $64A5 DEFB $02,$02,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $02
                                            ; ($6F,$08).
 $64AD DEFB $02,$04,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $04
                                            ; ($1F,$50).
 $64B5 DEFB $02,$03,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $03
                                            ; ($B7,$50).
 $64BD DEFB $02,$19,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $19
                                            ; ($6F,$08).
 $64C5 DEFB $02,$04,$34,$80,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $04
                                            ; ($6F,$80).
 $64CD DEFB $02,$05,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $05
                                            ; ($1F,$50).
 $64D5 DEFB $02,$04,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $04
                                            ; ($B7,$50).
 $64DD DEFB $02,$06,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $06
                                            ; ($6F,$08).
 $64E5 DEFB $02,$05,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $05
                                            ; ($6F,$A0).
 $64ED DEFB $03,$1A,$38,$48,$B6,$80,$16,$08 ; BigDooor Frame, Screen $1A
                                            ; ($B6,$48).
 $64F5 DEFB $02,$06,$34,$50,$3F,$00,$04,$56 ; Normal Door Frame, Screen $06
                                            ; ($3F,$50).
 $64FD DEFB $09,$08,$34,$50,$1F,$00,$04,$56 ; Green Locked Normal Door, Screen
                                            ; $08 ($1F,$50).
 $6505 DEFB $09,$06,$34,$50,$97,$80,$04,$06 ; Green Locked Normal Door, Screen
                                            ; $06 ($97,$50).
 $650D DEFB $02,$07,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $07
                                            ; ($6F,$08).
 $6515 DEFB $02,$06,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $06
                                            ; ($6F,$A0).
 $651D DEFB $02,$09,$34,$50,$1F,$00,$04,$57 ; Normal Door Frame, Screen $09
                                            ; ($1F,$50).
 $6525 DEFB $02,$08,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $08
                                            ; ($B7,$50).
 $652D DEFB $02,$0A,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $0A
                                            ; ($6F,$A0).
 $6535 DEFB $02,$09,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $09
                                            ; ($6F,$08).
 $653D DEFB $02,$0B,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $0B
                                            ; ($6F,$A0).
 $6545 DEFB $02,$0A,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $0A
                                            ; ($6F,$08).
 $654D DEFB $02,$0C,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $0C
                                            ; ($6F,$A0).
 $6555 DEFB $02,$0B,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $0B
                                            ; ($6F,$08).
 $655D DEFB $02,$0D,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $0D
                                            ; ($6F,$A0).
 $6565 DEFB $02,$0C,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $0C
                                            ; ($6F,$08).
 $656D DEFB $02,$0E,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $0E
                                            ; ($B7,$50).
 $6575 DEFB $02,$0D,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $0D
                                            ; ($1F,$50).
 $657D DEFB $02,$0F,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $0F
                                            ; ($B7,$50).
 $6585 DEFB $02,$0E,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $0E
                                            ; ($1F,$50).
 $658D DEFB $02,$10,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $10
                                            ; ($B7,$50).
 $6595 DEFB $02,$0F,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $0F
                                            ; ($1F,$50).
 $659D DEFB $08,$11,$34,$50,$B7,$80,$04,$06 ; Red Locked Normal Door, Screen
                                            ; $11 ($B7,$50).
 $65A5 DEFB $08,$10,$34,$50,$1F,$00,$04,$56 ; Red Locked Normal Door, Screen
                                            ; $10 ($1F,$50).
 $65AD DEFB $02,$12,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $12
                                            ; ($B7,$50).
 $65B5 DEFB $02,$11,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $11
                                            ; ($1F,$50).
 $65BD DEFB $02,$13,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $13
                                            ; ($B7,$50).
 $65C5 DEFB $02,$12,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $12
                                            ; ($1F,$50).
 $65CD DEFB $02,$14,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $14
                                            ; ($6F,$08).
 $65D5 DEFB $02,$13,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $13
                                            ; ($6F,$A0).
 $65DD DEFB $02,$15,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $15
                                            ; ($6F,$08).
 $65E5 DEFB $02,$14,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $14
                                            ; ($6F,$A0).
 $65ED DEFB $02,$16,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $16
                                            ; ($6F,$08).
 $65F5 DEFB $02,$15,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $15
                                            ; ($6F,$A0).
 $65FD DEFB $08,$17,$34,$08,$6F,$E0,$06,$03 ; Red Locked Normal Door, Screen
                                            ; $17 ($6F,$08).
 $6605 DEFB $08,$16,$34,$A0,$6F,$60,$B7,$03 ; Red Locked Normal Door, Screen
                                            ; $16 ($6F,$A0).
 $660D DEFB $09,$18,$34,$50,$1F,$00,$04,$56 ; Green Locked Normal Door, Screen
                                            ; $18 ($1F,$50).
 $6615 DEFB $09,$17,$34,$50,$B7,$80,$04,$06 ; Green Locked Normal Door, Screen
                                            ; $17 ($B7,$50).
 $661D DEFB $02,$18,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $18
                                            ; ($B7,$50).
 $6625 DEFB $02,$02,$34,$50,$3F,$00,$04,$56 ; Normal Door Frame, Screen $02
                                            ; ($3F,$50).
 $662D DEFB $02,$1A,$34,$50,$28,$00,$04,$56 ; Normal Door Frame, Screen $1A
                                            ; ($28,$50).
 $6635 DEFB $02,$1B,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $1B
                                            ; ($B7,$50).
 $663D DEFB $02,$1B,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $1B
                                            ; ($6F,$A0).
 $6645 DEFB $03,$1C,$74,$08,$77,$E0,$08,$F5 ; BigDooor Frame, Screen $1C
                                            ; ($77,$08).
 $664D DEFB $02,$1C,$34,$98,$6F,$60,$AF,$03 ; Normal Door Frame, Screen $1C
                                            ; ($6F,$98).
 $6655 DEFB $01,$1D,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $1D
                                            ; ($6F,$18).
 $665D DEFB $02,$1E,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $1E
                                            ; ($1F,$50).
 $6665 DEFB $02,$1F,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $1F
                                            ; ($B7,$50).
 $666D DEFB $02,$1F,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $1F
                                            ; ($6F,$08).
 $6675 DEFB $02,$20,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $20
                                            ; ($6F,$A0).
 $667D DEFB $02,$20,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $20
                                            ; ($6F,$08).
 $6685 DEFB $02,$21,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $21
                                            ; ($6F,$A0).
 $668D DEFB $02,$21,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $21
                                            ; ($B7,$50).
 $6695 DEFB $02,$22,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $22
                                            ; ($1F,$50).
 $669D DEFB $02,$22,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $22
                                            ; ($B7,$50).
 $66A5 DEFB $02,$23,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $23
                                            ; ($1F,$50).
 $66AD DEFB $02,$23,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $23
                                            ; ($6F,$A0).
 $66B5 DEFB $02,$24,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $24
                                            ; ($6F,$08).
 $66BD DEFB $02,$24,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $24
                                            ; ($6F,$A0).
 $66C5 DEFB $02,$25,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $25
                                            ; ($6F,$08).
 $66CD DEFB $0A,$25,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $25 ($1F,$50).
 $66D5 DEFB $0A,$1E,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $1E ($B7,$50).
 $66DD DEFB $02,$24,$34,$50,$3F,$00,$04,$56 ; Normal Door Frame, Screen $24
                                            ; ($3F,$50).
 $66E5 DEFB $03,$26,$38,$48,$B6,$80,$16,$08 ; BigDooor Frame, Screen $26
                                            ; ($B6,$48).
 $66ED DEFB $02,$02,$34,$50,$97,$80,$04,$06 ; Normal Door Frame, Screen $02
                                            ; ($97,$50).
 $66F5 DEFB $02,$26,$34,$50,$28,$00,$04,$56 ; Normal Door Frame, Screen $26
                                            ; ($28,$50).
 $66FD DEFB $02,$27,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $27
                                            ; ($B7,$50).
 $6705 DEFB $02,$28,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $28
                                            ; ($1F,$50).
 $670D DEFB $0A,$28,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $28 ($B7,$50).
 $6715 DEFB $0A,$29,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $29 ($1F,$50).
 $671D DEFB $02,$29,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $29
                                            ; ($6F,$08).
 $6725 DEFB $02,$2A,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $2A
                                            ; ($6F,$A0).
 $672D DEFB $02,$2A,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $2A
                                            ; ($6F,$08).
 $6735 DEFB $02,$2B,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $2B
                                            ; ($6F,$A0).
 $673D DEFB $02,$2B,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $2B
                                            ; ($1F,$50).
 $6745 DEFB $02,$2C,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $2C
                                            ; ($B7,$50).
 $674D DEFB $02,$2C,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $2C
                                            ; ($1F,$50).
 $6755 DEFB $02,$2D,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $2D
                                            ; ($B7,$50).
 $675D DEFB $09,$2D,$34,$A0,$6F,$60,$B7,$03 ; Green Locked Normal Door, Screen
                                            ; $2D ($6F,$A0).
 $6765 DEFB $09,$2E,$34,$08,$6F,$E0,$06,$03 ; Green Locked Normal Door, Screen
                                            ; $2E ($6F,$08).
 $676D DEFB $02,$2E,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $2E
                                            ; ($6F,$A0).
 $6775 DEFB $02,$27,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $27
                                            ; ($6F,$08).
 $677D DEFB $02,$27,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $27
                                            ; ($1F,$50).
 $6785 DEFB $03,$2F,$38,$48,$B6,$80,$16,$08 ; BigDooor Frame, Screen $2F
                                            ; ($B6,$48).
 $678D DEFB $0B,$20,$34,$50,$97,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $20 ($97,$50).
 $6795 DEFB $0B,$2F,$34,$50,$28,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $2F ($28,$50).
 $679D DEFB $01,$30,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $30
                                            ; ($A7,$50).
 $67A5 DEFB $01,$31,$34,$50,$27,$00,$04,$56 ; Cave Dooor Frame, Screen $31
                                            ; ($27,$50).
 $67AD DEFB $01,$31,$34,$50,$AF,$80,$04,$06 ; Cave Dooor Frame, Screen $31
                                            ; ($AF,$50).
 $67B5 DEFB $01,$32,$34,$50,$27,$00,$04,$56 ; Cave Dooor Frame, Screen $32
                                            ; ($27,$50).
 $67BD DEFB $01,$32,$34,$50,$AF,$80,$04,$06 ; Cave Dooor Frame, Screen $32
                                            ; ($AF,$50).
 $67C5 DEFB $01,$33,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $33
                                            ; ($2F,$50).
 $67CD DEFB $01,$33,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $33
                                            ; ($A7,$50).
 $67D5 DEFB $01,$34,$34,$50,$27,$00,$04,$56 ; Cave Dooor Frame, Screen $34
                                            ; ($27,$50).
 $67DD DEFB $01,$34,$34,$50,$AF,$80,$04,$06 ; Cave Dooor Frame, Screen $34
                                            ; ($AF,$50).
 $67E5 DEFB $01,$35,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $35
                                            ; ($2F,$50).
 $67ED DEFB $01,$33,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $33
                                            ; ($6F,$90).
 $67F5 DEFB $01,$36,$34,$10,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $36
                                            ; ($6F,$10).
 $67FD DEFB $01,$36,$34,$98,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $36
                                            ; ($6F,$98).
 $6805 DEFB $01,$37,$34,$10,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $37
                                            ; ($6F,$10).
 $680D DEFB $01,$37,$34,$98,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $37
                                            ; ($6F,$98).
 $6815 DEFB $01,$38,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $38
                                            ; ($6F,$18).
 $681D DEFB $01,$38,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $38
                                            ; ($A7,$50).
 $6825 DEFB $01,$39,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $39
                                            ; ($2F,$50).
 $682D DEFB $0D,$38,$34,$90,$6F,$60,$B7,$03 ; Green Locked Cave Door, Screen
                                            ; $38 ($6F,$90).
 $6835 DEFB $0D,$3A,$34,$18,$6F,$E0,$06,$03 ; Green Locked Cave Door, Screen
                                            ; $3A ($6F,$18).
 $683D DEFB $01,$39,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $39
                                            ; ($6F,$90).
 $6845 DEFB $01,$3B,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $3B
                                            ; ($6F,$18).
 $684D DEFB $01,$3A,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $3A
                                            ; ($A7,$50).
 $6855 DEFB $01,$3B,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $3B
                                            ; ($2F,$50).
 $685D DEFB $0D,$3B,$34,$50,$A7,$80,$04,$06 ; Green Locked Cave Door, Screen
                                            ; $3B ($A7,$50).
 $6865 DEFB $0D,$3C,$34,$50,$2F,$00,$04,$56 ; Green Locked Cave Door, Screen
                                            ; $3C ($2F,$50).
 $686D DEFB $01,$3B,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $3B
                                            ; ($6F,$90).
 $6875 DEFB $01,$3D,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $3D
                                            ; ($6F,$18).
 $687D DEFB $01,$3C,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $3C
                                            ; ($6F,$90).
 $6885 DEFB $01,$3E,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $3E
                                            ; ($6F,$18).
 $688D DEFB $01,$3D,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $3D
                                            ; ($A7,$50).
 $6895 DEFB $01,$3E,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $3E
                                            ; ($2F,$50).
 $689D DEFB $0E,$3D,$34,$90,$6F,$60,$B7,$03 ; Cyan Locked Cave Door, Screen $3D
                                            ; ($6F,$90).
 $68A5 DEFB $0E,$3F,$34,$10,$6F,$E0,$06,$03 ; Cyan Locked Cave Door, Screen $3F
                                            ; ($6F,$10).
 $68AD DEFB $01,$3F,$34,$98,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $3F
                                            ; ($6F,$98).
 $68B5 DEFB $01,$40,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $40
                                            ; ($6F,$18).
 $68BD DEFB $01,$40,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $40
                                            ; ($6F,$90).
 $68C5 DEFB $01,$41,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $41
                                            ; ($6F,$18).
 $68CD DEFB $01,$40,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $40
                                            ; ($2F,$50).
 $68D5 DEFB $01,$42,$34,$50,$AF,$80,$04,$06 ; Cave Dooor Frame, Screen $42
                                            ; ($AF,$50).
 $68DD DEFB $01,$42,$34,$50,$27,$00,$04,$56 ; Cave Dooor Frame, Screen $42
                                            ; ($27,$50).
 $68E5 DEFB $01,$43,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $43
                                            ; ($A7,$50).
 $68ED DEFB $01,$43,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $43
                                            ; ($6F,$90).
 $68F5 DEFB $01,$44,$34,$10,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $44
                                            ; ($6F,$10).
 $68FD DEFB $0C,$44,$34,$98,$6F,$60,$B7,$03 ; Red Locked Cave Door, Screen $44
                                            ; ($6F,$98).
 $6905 DEFB $0C,$45,$34,$18,$6F,$E0,$06,$03 ; Red Locked Cave Door, Screen $45
                                            ; ($6F,$18).
 $690D DEFB $01,$43,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $43
                                            ; ($2F,$50).
 $6915 DEFB $01,$46,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $46
                                            ; ($A7,$50).
 $691D DEFB $01,$46,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $46
                                            ; ($6F,$18).
 $6925 DEFB $01,$47,$34,$98,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $47
                                            ; ($6F,$98).
 $692D DEFB $0C,$47,$34,$10,$6F,$E0,$06,$03 ; Red Locked Cave Door, Screen $47
                                            ; ($6F,$10).
 $6935 DEFB $0C,$48,$34,$90,$6F,$60,$B7,$03 ; Red Locked Cave Door, Screen $48
                                            ; ($6F,$90).
 $693D DEFB $01,$48,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $48
                                            ; ($A7,$50).
 $6945 DEFB $01,$49,$34,$50,$27,$00,$04,$56 ; Cave Dooor Frame, Screen $49
                                            ; ($27,$50).
 $694D DEFB $0E,$48,$34,$18,$6F,$E0,$06,$03 ; Cyan Locked Cave Door, Screen $48
                                            ; ($6F,$18).
 $6955 DEFB $0E,$4A,$34,$98,$6F,$60,$B7,$03 ; Cyan Locked Cave Door, Screen $4A
                                            ; ($6F,$98).
 $695D DEFB $01,$4A,$34,$10,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $4A
                                            ; ($6F,$10).
 $6965 DEFB $01,$4B,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $4B
                                            ; ($6F,$90).
 $696D DEFB $01,$4B,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $4B
                                            ; ($2F,$50).
 $6975 DEFB $01,$4C,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $4C
                                            ; ($A7,$50).
 $697D DEFB $01,$48,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $48
                                            ; ($2F,$50).
 $6985 DEFB $01,$4D,$34,$50,$AF,$80,$04,$06 ; Cave Dooor Frame, Screen $4D
                                            ; ($AF,$50).
 $698D DEFB $0C,$4D,$34,$50,$27,$00,$04,$56 ; Red Locked Cave Door, Screen $4D
                                            ; ($27,$50).
 $6995 DEFB $0C,$4E,$34,$50,$A7,$80,$04,$06 ; Red Locked Cave Door, Screen $4E
                                            ; ($A7,$50).
 $699D DEFB $01,$4E,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $4E
                                            ; ($6F,$90).
 $69A5 DEFB $01,$4F,$34,$10,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $4F
                                            ; ($6F,$10).
 $69AD DEFB $01,$4F,$34,$98,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $4F
                                            ; ($6F,$98).
 $69B5 DEFB $01,$50,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $50
                                            ; ($6F,$18).
 $69BD DEFB $01,$50,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $50
                                            ; ($A7,$50).
 $69C5 DEFB $01,$51,$34,$50,$27,$00,$04,$56 ; Cave Dooor Frame, Screen $51
                                            ; ($27,$50).
 $69CD DEFB $0D,$50,$34,$90,$6F,$60,$B7,$03 ; Green Locked Cave Door, Screen
                                            ; $50 ($6F,$90).
 $69D5 DEFB $0D,$52,$34,$10,$6F,$E0,$06,$03 ; Green Locked Cave Door, Screen
                                            ; $52 ($6F,$10).
 $69DD DEFB $01,$52,$34,$98,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $52
                                            ; ($6F,$98).
 $69E5 DEFB $01,$53,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $53
                                            ; ($6F,$18).
 $69ED DEFB $01,$1D,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $1D
                                            ; ($6F,$90).
 $69F5 DEFB $01,$43,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $43
                                            ; ($6F,$18).
 $69FD DEFB $01,$46,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $46
                                            ; ($2F,$50).
 $6A05 DEFB $01,$51,$34,$50,$AF,$80,$04,$06 ; Cave Dooor Frame, Screen $51
                                            ; ($AF,$50).
 $6A0D DEFB $01,$4C,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $4C
                                            ; ($6F,$18).
 $6A15 DEFB $01,$55,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $55
                                            ; ($6F,$90).
 $6A1D DEFB $01,$54,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $54
                                            ; ($6F,$90).
 $6A25 DEFB $01,$55,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $55
                                            ; ($6F,$18).
 $6A2D DEFB $01,$54,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $54
                                            ; ($6F,$18).
 $6A35 DEFB $01,$30,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $30
                                            ; ($6F,$90).
 $6A3D DEFB $02,$2D,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $2D
                                            ; ($6F,$08).
 $6A45 DEFB $02,$75,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $75
                                            ; ($6F,$A0).
 $6A4D DEFB $02,$75,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $75
                                            ; ($B7,$50).
 $6A55 DEFB $02,$76,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $76
                                            ; ($1F,$50).
 $6A5D DEFB $02,$76,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $76
                                            ; ($6F,$A0).
 $6A65 DEFB $02,$77,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $77
                                            ; ($6F,$08).
 $6A6D DEFB $02,$77,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $77
                                            ; ($6F,$A0).
 $6A75 DEFB $02,$78,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $78
                                            ; ($6F,$08).
 $6A7D DEFB $02,$78,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $78
                                            ; ($B7,$50).
 $6A85 DEFB $02,$79,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $79
                                            ; ($1F,$50).
 $6A8D DEFB $02,$79,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $79
                                            ; ($B7,$50).
 $6A95 DEFB $02,$7A,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $7A
                                            ; ($1F,$50).
 $6A9D DEFB $02,$7A,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $7A
                                            ; ($6F,$08).
 $6AA5 DEFB $02,$7B,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $7B
                                            ; ($6F,$A0).
 $6AAD DEFB $0B,$7B,$34,$08,$6F,$E0,$06,$03 ; Yellow Locked Normal Door, Screen
                                            ; $7B ($6F,$08).
 $6AB5 DEFB $0B,$7C,$34,$A0,$6F,$60,$B7,$03 ; Yellow Locked Normal Door, Screen
                                            ; $7C ($6F,$A0).
 $6ABD DEFB $0B,$7C,$34,$50,$1F,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $7C ($1F,$50).
 $6AC5 DEFB $0B,$7D,$34,$50,$B7,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $7D ($B7,$50).
 $6ACD DEFB $02,$7D,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $7D
                                            ; ($1F,$50).
 $6AD5 DEFB $02,$76,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $76
                                            ; ($B7,$50).
 $6ADD DEFB $08,$7A,$34,$A0,$6F,$60,$B7,$03 ; Red Locked Normal Door, Screen
                                            ; $7A ($6F,$A0).
 $6AE5 DEFB $08,$7E,$34,$08,$6F,$E0,$06,$03 ; Red Locked Normal Door, Screen
                                            ; $7E ($6F,$08).
 $6AED DEFB $02,$7E,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $7E
                                            ; ($1F,$50).
 $6AF5 DEFB $02,$29,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $29
                                            ; ($B7,$50).
 $6AFD DEFB $02,$21,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $21
                                            ; ($1F,$50).
 $6B05 DEFB $02,$88,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $88
                                            ; ($B7,$50).
 $6B0D DEFB $09,$7F,$34,$A0,$6F,$60,$B7,$03 ; Green Locked Normal Door, Screen
                                            ; $7F ($6F,$A0).
 $6B15 DEFB $09,$80,$34,$08,$6F,$E0,$06,$03 ; Green Locked Normal Door, Screen
                                            ; $80 ($6F,$08).
 $6B1D DEFB $02,$80,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $80
                                            ; ($B7,$50).
 $6B25 DEFB $02,$82,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $82
                                            ; ($1F,$50).
 $6B2D DEFB $02,$82,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $82
                                            ; ($6F,$08).
 $6B35 DEFB $02,$81,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $81
                                            ; ($6F,$A0).
 $6B3D DEFB $02,$81,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $81
                                            ; ($1F,$50).
 $6B45 DEFB $02,$7F,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $7F
                                            ; ($B7,$50).
 $6B4D DEFB $0A,$82,$34,$A0,$6F,$60,$B7,$03 ; Cyan Locked Normal Door, Screen
                                            ; $82 ($6F,$A0).
 $6B55 DEFB $0A,$87,$34,$08,$6F,$E0,$06,$03 ; Cyan Locked Normal Door, Screen
                                            ; $87 ($6F,$08).
 $6B5D DEFB $02,$87,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $87
                                            ; ($6F,$A0).
 $6B65 DEFB $02,$88,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $88
                                            ; ($6F,$08).
 $6B6D DEFB $02,$87,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $87
                                            ; ($B7,$50).
 $6B75 DEFB $02,$8B,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $8B
                                            ; ($1F,$50).
 $6B7D DEFB $02,$8B,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $8B
                                            ; ($B7,$50).
 $6B85 DEFB $02,$8C,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $8C
                                            ; ($1F,$50).
 $6B8D DEFB $09,$8C,$34,$50,$B7,$80,$04,$06 ; Green Locked Normal Door, Screen
                                            ; $8C ($B7,$50).
 $6B95 DEFB $09,$8D,$34,$50,$1F,$00,$04,$56 ; Green Locked Normal Door, Screen
                                            ; $8D ($1F,$50).
 $6B9D DEFB $08,$83,$34,$A0,$6F,$60,$B7,$03 ; Red Locked Normal Door, Screen
                                            ; $83 ($6F,$A0).
 $6BA5 DEFB $08,$84,$34,$08,$6F,$E0,$06,$03 ; Red Locked Normal Door, Screen
                                            ; $84 ($6F,$08).
 $6BAD DEFB $02,$84,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $84
                                            ; ($B7,$50).
 $6BB5 DEFB $02,$86,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $86
                                            ; ($1F,$50).
 $6BBD DEFB $02,$86,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $86
                                            ; ($6F,$08).
 $6BC5 DEFB $02,$85,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $85
                                            ; ($6F,$A0).
 $6BCD DEFB $02,$85,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $85
                                            ; ($1F,$50).
 $6BD5 DEFB $02,$83,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $83
                                            ; ($B7,$50).
 $6BDD DEFB $0B,$84,$34,$A0,$6F,$60,$B7,$03 ; Yellow Locked Normal Door, Screen
                                            ; $84 ($6F,$A0).
 $6BE5 DEFB $0B,$89,$34,$08,$6F,$E0,$06,$03 ; Yellow Locked Normal Door, Screen
                                            ; $89 ($6F,$08).
 $6BED DEFB $02,$89,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $89
                                            ; ($1F,$50).
 $6BF5 DEFB $02,$8D,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $8D
                                            ; ($B7,$50).
 $6BFD DEFB $02,$89,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $89
                                            ; ($6F,$A0).
 $6C05 DEFB $02,$8A,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $8A
                                            ; ($6F,$08).
 $6C0D DEFB $09,$8A,$34,$50,$1F,$00,$04,$56 ; Green Locked Normal Door, Screen
                                            ; $8A ($1F,$50).
 $6C15 DEFB $09,$23,$34,$50,$B7,$80,$04,$06 ; Green Locked Normal Door, Screen
                                            ; $23 ($B7,$50).
 $6C1D DEFB $02,$13,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $13
                                            ; ($6F,$08).
 $6C25 DEFB $02,$73,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $73
                                            ; ($6F,$A0).
 $6C2D DEFB $02,$11,$34,$80,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $11
                                            ; ($6F,$80).
 $6C35 DEFB $02,$6B,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $6B
                                            ; ($6F,$08).
 $6C3D DEFB $02,$6B,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $6B
                                            ; ($6F,$A0).
 $6C45 DEFB $02,$6C,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $6C
                                            ; ($6F,$08).
 $6C4D DEFB $0A,$6C,$34,$A0,$6F,$60,$B7,$03 ; Cyan Locked Normal Door, Screen
                                            ; $6C ($6F,$A0).
 $6C55 DEFB $0A,$03,$34,$08,$6F,$E0,$06,$03 ; Cyan Locked Normal Door, Screen
                                            ; $03 ($6F,$08).
 $6C5D DEFB $09,$0F,$34,$80,$6F,$60,$B7,$03 ; Green Locked Normal Door, Screen
                                            ; $0F ($6F,$80).
 $6C65 DEFB $09,$6D,$34,$08,$6F,$E0,$06,$03 ; Green Locked Normal Door, Screen
                                            ; $6D ($6F,$08).
 $6C6D DEFB $02,$6D,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $6D
                                            ; ($6F,$A0).
 $6C75 DEFB $02,$6E,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $6E
                                            ; ($6F,$08).
 $6C7D DEFB $02,$6E,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $6E
                                            ; ($6F,$A0).
 $6C85 DEFB $02,$05,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $05
                                            ; ($6F,$08).
 $6C8D DEFB $0A,$0D,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $0D ($B7,$50).
 $6C95 DEFB $0A,$6F,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $6F ($1F,$50).
 $6C9D DEFB $02,$6F,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $6F
                                            ; ($B7,$50).
 $6CA5 DEFB $02,$70,$34,$70,$1F,$00,$04,$56 ; Normal Door Frame, Screen $70
                                            ; ($1F,$70).
 $6CAD DEFB $02,$70,$34,$30,$1F,$00,$04,$56 ; Normal Door Frame, Screen $70
                                            ; ($1F,$30).
 $6CB5 DEFB $03,$71,$38,$48,$B6,$80,$16,$08 ; BigDooor Frame, Screen $71
                                            ; ($B6,$48).
 $6CBD DEFB $02,$71,$34,$50,$28,$00,$04,$56 ; Normal Door Frame, Screen $71
                                            ; ($28,$50).
 $6CC5 DEFB $03,$72,$38,$48,$B6,$80,$16,$08 ; BigDooor Frame, Screen $72
                                            ; ($B6,$48).
 $6CCD DEFB $02,$72,$34,$50,$28,$00,$04,$56 ; Normal Door Frame, Screen $72
                                            ; ($28,$50).
 $6CD5 DEFB $01,$35,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $35
                                            ; ($A7,$50).
 $6CDD DEFB $01,$30,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $30
                                            ; ($6F,$18).
 $6CE5 DEFB $01,$74,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $74
                                            ; ($6F,$90).
 $6CED DEFB $02,$56,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $56
                                            ; ($6F,$A0).
 $6CF5 DEFB $02,$57,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $57
                                            ; ($6F,$08).
 $6CFD DEFB $09,$57,$34,$A0,$6F,$60,$B7,$03 ; Green Locked Normal Door, Screen
                                            ; $57 ($6F,$A0).
 $6D05 DEFB $09,$58,$34,$08,$6F,$E0,$06,$03 ; Green Locked Normal Door, Screen
                                            ; $58 ($6F,$08).
 $6D0D DEFB $02,$58,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $58
                                            ; ($6F,$A0).
 $6D15 DEFB $02,$59,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $59
                                            ; ($6F,$08).
 $6D1D DEFB $02,$5A,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $5A
                                            ; ($6F,$A0).
 $6D25 DEFB $02,$5B,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $5B
                                            ; ($6F,$08).
 $6D2D DEFB $08,$5B,$34,$A0,$6F,$60,$B7,$03 ; Red Locked Normal Door, Screen
                                            ; $5B ($6F,$A0).
 $6D35 DEFB $08,$5C,$34,$08,$6F,$E0,$06,$03 ; Red Locked Normal Door, Screen
                                            ; $5C ($6F,$08).
 $6D3D DEFB $09,$5C,$34,$A0,$6F,$60,$B7,$03 ; Green Locked Normal Door, Screen
                                            ; $5C ($6F,$A0).
 $6D45 DEFB $09,$5D,$34,$08,$6F,$E0,$06,$03 ; Green Locked Normal Door, Screen
                                            ; $5D ($6F,$08).
 $6D4D DEFB $08,$5E,$34,$A0,$6F,$60,$B7,$03 ; Red Locked Normal Door, Screen
                                            ; $5E ($6F,$A0).
 $6D55 DEFB $08,$5F,$34,$08,$6F,$E0,$06,$03 ; Red Locked Normal Door, Screen
                                            ; $5F ($6F,$08).
 $6D5D DEFB $08,$5F,$34,$A0,$6F,$60,$B7,$03 ; Red Locked Normal Door, Screen
                                            ; $5F ($6F,$A0).
 $6D65 DEFB $08,$60,$34,$08,$6F,$E0,$06,$03 ; Red Locked Normal Door, Screen
                                            ; $60 ($6F,$08).
 $6D6D DEFB $02,$60,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $60
                                            ; ($6F,$A0).
 $6D75 DEFB $02,$61,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $61
                                            ; ($6F,$08).
 $6D7D DEFB $02,$62,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $62
                                            ; ($6F,$A0).
 $6D85 DEFB $02,$63,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $63
                                            ; ($6F,$08).
 $6D8D DEFB $02,$63,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $63
                                            ; ($6F,$A0).
 $6D95 DEFB $02,$64,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $64
                                            ; ($6F,$08).
 $6D9D DEFB $0B,$64,$34,$A0,$6F,$60,$B7,$03 ; Yellow Locked Normal Door, Screen
                                            ; $64 ($6F,$A0).
 $6DA5 DEFB $0B,$65,$34,$08,$6F,$E0,$06,$03 ; Yellow Locked Normal Door, Screen
                                            ; $65 ($6F,$08).
 $6DAD DEFB $02,$56,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $56
                                            ; ($B7,$50).
 $6DB5 DEFB $02,$5A,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $5A
                                            ; ($1F,$50).
 $6DBD DEFB $0A,$5A,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $5A ($B7,$50).
 $6DC5 DEFB $0A,$5E,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $5E ($1F,$50).
 $6DCD DEFB $02,$5E,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $5E
                                            ; ($B7,$50).
 $6DD5 DEFB $02,$62,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $62
                                            ; ($1F,$50).
 $6DDD DEFB $02,$57,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $57
                                            ; ($B7,$50).
 $6DE5 DEFB $02,$5B,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $5B
                                            ; ($1F,$50).
 $6DED DEFB $09,$5B,$34,$30,$B7,$80,$04,$06 ; Green Locked Normal Door, Screen
                                            ; $5B ($B7,$30).
 $6DF5 DEFB $09,$5F,$34,$30,$1F,$00,$04,$56 ; Green Locked Normal Door, Screen
                                            ; $5F ($1F,$30).
 $6DFD DEFB $0A,$5F,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $5F ($B7,$50).
 $6E05 DEFB $0A,$63,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $63 ($1F,$50).
 $6E0D DEFB $02,$58,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $58
                                            ; ($B7,$50).
 $6E15 DEFB $02,$5C,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $5C
                                            ; ($1F,$50).
 $6E1D DEFB $08,$5C,$34,$70,$B7,$80,$04,$06 ; Red Locked Normal Door, Screen
                                            ; $5C ($B7,$70).
 $6E25 DEFB $08,$60,$34,$70,$1F,$00,$04,$56 ; Red Locked Normal Door, Screen
                                            ; $60 ($1F,$70).
 $6E2D DEFB $0A,$60,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $60 ($B7,$50).
 $6E35 DEFB $0A,$64,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $64 ($1F,$50).
 $6E3D DEFB $0B,$59,$34,$50,$B7,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $59 ($B7,$50).
 $6E45 DEFB $0B,$5D,$34,$50,$1F,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $5D ($1F,$50).
 $6E4D DEFB $02,$5D,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $5D
                                            ; ($B7,$50).
 $6E55 DEFB $02,$61,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $61
                                            ; ($1F,$50).
 $6E5D DEFB $02,$61,$34,$50,$B7,$80,$04,$06 ; Normal Door Frame, Screen $61
                                            ; ($B7,$50).
 $6E65 DEFB $02,$65,$34,$50,$1F,$00,$04,$56 ; Normal Door Frame, Screen $65
                                            ; ($1F,$50).
 $6E6D DEFB $0A,$67,$34,$50,$B7,$80,$04,$06 ; Cyan Locked Normal Door, Screen
                                            ; $67 ($B7,$50).
 $6E75 DEFB $0A,$56,$34,$50,$1F,$00,$04,$56 ; Cyan Locked Normal Door, Screen
                                            ; $56 ($1F,$50).
 $6E7D DEFB $08,$68,$34,$50,$B7,$80,$04,$06 ; Red Locked Normal Door, Screen
                                            ; $68 ($B7,$50).
 $6E85 DEFB $08,$59,$34,$50,$1F,$00,$04,$56 ; Red Locked Normal Door, Screen
                                            ; $59 ($1F,$50).
 $6E8D DEFB $0B,$69,$34,$A0,$6F,$60,$B7,$03 ; Yellow Locked Normal Door, Screen
                                            ; $69 ($6F,$A0).
 $6E95 DEFB $0B,$56,$34,$08,$6F,$E0,$06,$03 ; Yellow Locked Normal Door, Screen
                                            ; $56 ($6F,$08).
 $6E9D DEFB $09,$6A,$34,$A0,$6F,$60,$B7,$03 ; Green Locked Normal Door, Screen
                                            ; $6A ($6F,$A0).
 $6EA5 DEFB $09,$62,$34,$08,$6F,$E0,$06,$03 ; Green Locked Normal Door, Screen
                                            ; $62 ($6F,$08).
 $6EAD DEFB $0B,$66,$34,$30,$1F,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($1F,$30).
 $6EB5 DEFB $0B,$5B,$34,$70,$B7,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $5B ($B7,$70).
 $6EBD DEFB $0B,$66,$34,$70,$1F,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($1F,$70).
 $6EC5 DEFB $0B,$5C,$34,$30,$B7,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $5C ($B7,$30).
 $6ECD DEFB $0B,$66,$34,$30,$B7,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($B7,$30).
 $6ED5 DEFB $0B,$5F,$34,$70,$1F,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $5F ($1F,$70).
 $6EDD DEFB $0B,$66,$34,$70,$B7,$80,$04,$06 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($B7,$70).
 $6EE5 DEFB $0B,$60,$34,$30,$1F,$00,$04,$56 ; Yellow Locked Normal Door, Screen
                                            ; $60 ($1F,$30).
 $6EED DEFB $02,$65,$34,$A0,$6F,$60,$B7,$03 ; Normal Door Frame, Screen $65
                                            ; ($6F,$A0).
 $6EF5 DEFB $02,$1B,$34,$08,$6F,$E0,$06,$03 ; Normal Door Frame, Screen $1B
                                            ; ($6F,$08).
 $6EFD DEFB $01,$40,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $40
                                            ; ($A7,$50).
 $6F05 DEFB $01,$8F,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $8F
                                            ; ($2F,$50).
 $6F0D DEFB $01,$54,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $54
                                            ; ($A7,$50).
 $6F15 DEFB $01,$90,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $90
                                            ; ($2F,$50).
 $6F1D DEFB $01,$90,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $90
                                            ; ($A7,$50).
 $6F25 DEFB $01,$91,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $91
                                            ; ($2F,$50).
 $6F2D DEFB $01,$91,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $91
                                            ; ($6F,$90).
 $6F35 DEFB $01,$92,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $92
                                            ; ($6F,$18).
 $6F3D DEFB $01,$92,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $92
                                            ; ($6F,$90).
 $6F45 DEFB $01,$93,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $93
                                            ; ($6F,$18).
 $6F4D DEFB $01,$93,$34,$90,$6F,$60,$B7,$03 ; Cave Dooor Frame, Screen $93
                                            ; ($6F,$90).
 $6F55 DEFB $01,$94,$34,$18,$6F,$E0,$06,$03 ; Cave Dooor Frame, Screen $94
                                            ; ($6F,$18).
 $6F5D DEFB $01,$3A,$34,$50,$2F,$00,$04,$56 ; Cave Dooor Frame, Screen $3A
                                            ; ($2F,$50).
 $6F65 DEFB $01,$94,$34,$50,$A7,$80,$04,$06 ; Cave Dooor Frame, Screen $94
                                            ; ($A7,$50).
 $6F6D DEFB $19,$73,$34,$50,$70,$03,$24,$E4 ; Open Trap Door, Screen $73
                                            ; ($70,$50).
 $6F75 DEFB $1B,$74,$34,$48,$74,$03,$00,$00 ; Rug, Screen $74 ($74,$48).
 $6F7D DEFB $19,$03,$34,$30,$70,$03,$24,$E4 ; Open Trap Door, Screen $03
                                            ; ($70,$30).
 $6F85 DEFB $1B,$65,$34,$38,$74,$03,$00,$00 ; Rug, Screen $65 ($74,$38).
 $6F8D DEFB $19,$61,$34,$50,$70,$03,$24,$E4 ; Open Trap Door, Screen $61
                                            ; ($70,$50).
 $6F95 DEFB $1B,$4B,$34,$48,$74,$03,$00,$00 ; Rug, Screen $4B ($74,$48).
 $6F9D DEFB $19,$2D,$34,$50,$90,$03,$24,$E4 ; Open Trap Door, Screen $2D
                                            ; ($90,$50).
 $6FA5 DEFB $1B,$8D,$34,$48,$94,$03,$00,$00 ; Rug, Screen $8D ($94,$48).
 $6FAD DEFB $19,$76,$34,$50,$70,$03,$24,$E4 ; Open Trap Door, Screen $76
                                            ; ($70,$50).
 $6FB5 DEFB $1B,$84,$34,$48,$74,$03,$00,$00 ; Rug, Screen $84 ($74,$48).
 $6FBD DEFB $19,$8B,$34,$50,$70,$03,$24,$E4 ; Open Trap Door, Screen $8B
                                            ; ($70,$50).
 $6FC5 DEFB $1B,$6C,$34,$48,$74,$03,$00,$00 ; Rug, Screen $6C ($74,$48).
 $6FCD DEFB $19,$8D,$34,$50,$50,$03,$24,$E4 ; Open Trap Door, Screen $8D
                                            ; ($50,$50).
 $6FD5 DEFB $1B,$6E,$34,$48,$54,$03,$00,$00 ; Rug, Screen $6E ($54,$48).
 $6FDD DEFB $19,$21,$34,$70,$70,$03,$24,$E4 ; Open Trap Door, Screen $21
                                            ; ($70,$70).
 $6FE5 DEFB $1B,$03,$34,$68,$74,$03,$00,$00 ; Rug, Screen $03 ($74,$68).
 $6FED DEFB $19,$15,$34,$50,$80,$03,$24,$E4 ; Open Trap Door, Screen $15
                                            ; ($80,$50).
 $6FF5 DEFB $1B,$66,$34,$48,$74,$03,$00,$00 ; Rug, Screen $66 ($74,$48).
 $6FFD DEFB $19,$78,$34,$70,$70,$03,$24,$E4 ; Open Trap Door, Screen $78
                                            ; ($70,$70).
 $7005 DEFB $1B,$8A,$34,$68,$74,$03,$00,$00 ; Rug, Screen $8A ($74,$68).
 $700D DEFB $19,$29,$34,$50,$80,$03,$24,$E4 ; Open Trap Door, Screen $29
                                            ; ($80,$50).
 $7015 DEFB $1B,$09,$34,$48,$74,$03,$00,$00 ; Rug, Screen $09 ($74,$48).
 $701D DEFB $11,$0B,$00,$50,$97,$81,$00,$00 ; Picture, Screen $0B ($97,$50).
 $7025 DEFB $11,$0C,$00,$50,$97,$81,$00,$00 ; Picture, Screen $0C ($97,$50).
 $702D DEFB $27,$91,$00,$50,$8F,$00,$00,$00 ; Barrels, Screen $91 ($8F,$50).
 $7035 DEFB $27,$3D,$00,$5F,$5F,$00,$00,$00 ; Barrels, Screen $3D ($5F,$5F).
 $703D DEFB $1E,$1F,$00,$98,$67,$60,$00,$00 ; Knight, Screen $1F ($67,$98).
 $7045 DEFB $1E,$21,$00,$08,$67,$E0,$00,$00 ; Knight, Screen $21 ($67,$08).
 $704D DEFB $1E,$25,$00,$98,$67,$60,$00,$00 ; Knight, Screen $25 ($67,$98).
 $7055 DEFB $1E,$23,$00,$08,$67,$E0,$00,$00 ; Knight, Screen $23 ($67,$08).
 $705D DEFB $1E,$00,$00,$98,$3F,$60,$00,$00 ; Knight, Screen $00 ($3F,$98).
 $7065 DEFB $1E,$06,$00,$38,$47,$00,$00,$00 ; Knight, Screen $06 ($47,$38).
 $706D DEFB $1E,$00,$00,$98,$8F,$60,$00,$00 ; Knight, Screen $00 ($8F,$98).
 $7075 DEFB $1E,$06,$00,$78,$47,$00,$00,$00 ; Knight, Screen $06 ($47,$78).
 $707D DEFB $1E,$01,$00,$58,$27,$00,$00,$00 ; Knight, Screen $01 ($27,$58).
 $7085 DEFB $1E,$03,$00,$58,$27,$00,$00,$00 ; Knight, Screen $03 ($27,$58).
 $708D DEFB $1E,$05,$00,$58,$B7,$80,$00,$00 ; Knight, Screen $05 ($B7,$58).
 $7095 DEFB $1E,$07,$00,$58,$B7,$80,$00,$00 ; Knight, Screen $07 ($B7,$58).
 $709D DEFB $1E,$17,$00,$58,$27,$00,$00,$00 ; Knight, Screen $17 ($27,$58).
 $70A5 DEFB $1E,$15,$00,$78,$97,$80,$00,$00 ; Knight, Screen $15 ($97,$78).
 $70AD DEFB $1E,$15,$00,$38,$97,$80,$00,$00 ; Knight, Screen $15 ($97,$38).
 $70B5 DEFB $1E,$13,$00,$58,$27,$00,$00,$00 ; Knight, Screen $13 ($27,$58).
 $70BD DEFB $1E,$88,$00,$08,$3F,$E0,$00,$00 ; Knight, Screen $88 ($3F,$08).
 $70C5 DEFB $1E,$8A,$00,$08,$47,$E0,$00,$00 ; Knight, Screen $8A ($47,$08).
 $70CD DEFB $1E,$88,$00,$08,$8F,$E0,$00,$00 ; Knight, Screen $88 ($8F,$08).
 $70D5 DEFB $1E,$8A,$00,$08,$87,$E0,$00,$00 ; Knight, Screen $8A ($87,$08).
 $70DD DEFB $1E,$27,$00,$38,$27,$00,$00,$00 ; Knight, Screen $27 ($27,$38).
 $70E5 DEFB $1E,$2B,$00,$38,$27,$00,$00,$00 ; Knight, Screen $2B ($27,$38).
 $70ED DEFB $1E,$27,$00,$78,$27,$00,$00,$00 ; Knight, Screen $27 ($27,$78).
 $70F5 DEFB $1E,$2B,$00,$78,$27,$00,$00,$00 ; Knight, Screen $2B ($27,$78).
 $70FD DEFB $1E,$56,$00,$38,$27,$00,$00,$00 ; Knight, Screen $56 ($27,$38).
 $7105 DEFB $1E,$24,$00,$38,$47,$00,$00,$00 ; Knight, Screen $24 ($47,$38).
 $710D DEFB $1E,$56,$00,$78,$27,$00,$00,$00 ; Knight, Screen $56 ($27,$78).
 $7115 DEFB $1E,$24,$00,$78,$47,$00,$00,$00 ; Knight, Screen $24 ($47,$78).
 $711D DEFB $1E,$7C,$00,$38,$27,$00,$00,$00 ; Knight, Screen $7C ($27,$38).
 $7125 DEFB $1E,$7A,$00,$38,$27,$00,$00,$00 ; Knight, Screen $7A ($27,$38).
 $712D DEFB $1E,$7C,$00,$78,$27,$00,$00,$00 ; Knight, Screen $7C ($27,$78).
 $7135 DEFB $1E,$7A,$00,$78,$27,$00,$00,$00 ; Knight, Screen $7A ($27,$78).
 $713D DEFB $1E,$09,$00,$08,$3F,$E0,$00,$00 ; Knight, Screen $09 ($3F,$08).
 $7145 DEFB $1E,$7F,$00,$38,$B7,$80,$00,$00 ; Knight, Screen $7F ($B7,$38).
 $714D DEFB $1E,$09,$00,$08,$8F,$E0,$00,$00 ; Knight, Screen $09 ($8F,$08).
 $7155 DEFB $1E,$7F,$00,$78,$B7,$80,$00,$00 ; Knight, Screen $7F ($B7,$78).
 $715D DEFB $12,$0D,$00,$38,$50,$04,$CC,$49 ; Table, Screen $0D ($50,$38).
 $7165 DEFB $12,$13,$00,$70,$90,$04,$CC,$49 ; Table, Screen $13 ($90,$70).
 $716D DEFB $12,$63,$00,$38,$50,$04,$CC,$49 ; Table, Screen $63 ($50,$38).
 $7175 DEFB $12,$5D,$00,$70,$50,$04,$CC,$49 ; Table, Screen $5D ($50,$70).
 $717D DEFB $12,$18,$00,$48,$50,$04,$CC,$49 ; Table, Screen $18 ($50,$48).
 $7185 DEFB $12,$88,$00,$70,$50,$04,$CC,$49 ; Table, Screen $88 ($50,$70).
 $718D DEFB $12,$7A,$00,$38,$50,$04,$CC,$49 ; Table, Screen $7A ($50,$38).
 $7195 DEFB $12,$81,$00,$70,$50,$04,$CC,$49 ; Table, Screen $81 ($50,$70).
 $719D DEFB $12,$18,$00,$58,$80,$04,$CC,$49 ; Table, Screen $18 ($80,$58).
 $71A5 DEFB $12,$6D,$00,$30,$90,$04,$CC,$49 ; Table, Screen $6D ($90,$30).
 $71AD DEFB $12,$5B,$00,$38,$50,$04,$CC,$49 ; Table, Screen $5B ($50,$38).
 $71B5 DEFB $12,$5C,$00,$70,$50,$04,$CC,$49 ; Table, Screen $5C ($50,$70).
 $71BD DEFB $12,$6A,$00,$78,$98,$04,$CC,$49 ; Table, Screen $6A ($98,$78).
 $71C5 DEFB $12,$1B,$00,$70,$50,$04,$CC,$49 ; Table, Screen $1B ($50,$70).
 $71CD DEFB $12,$2E,$00,$38,$57,$04,$CC,$49 ; Table, Screen $2E ($57,$38).
 $71D5 DEFB $12,$7D,$00,$48,$50,$04,$CC,$49 ; Table, Screen $7D ($50,$48).
 $71DD DEFB $12,$2E,$00,$60,$7F,$04,$CC,$49 ; Table, Screen $2E ($7F,$60).
 $71E5 DEFB $12,$7D,$00,$58,$80,$04,$CC,$49 ; Table, Screen $7D ($80,$58).
 $71ED DEFB $12,$2A,$00,$38,$57,$04,$CC,$49 ; Table, Screen $2A ($57,$38).
 $71F5 DEFB $12,$2D,$00,$30,$80,$04,$CC,$49 ; Table, Screen $2D ($80,$30).
 $71FD DEFB $12,$2A,$00,$60,$7F,$04,$CC,$49 ; Table, Screen $2A ($7F,$60).
 $7205 DEFB $12,$2D,$00,$70,$80,$04,$CC,$49 ; Table, Screen $2D ($80,$70).
 $720D DEFB $1C,$8D,$00,$28,$67,$E0,$00,$00 ; Acg Shield, Screen $8D ($67,$28).
 $7215 DEFB $1D,$8C,$00,$28,$67,$E0,$00,$00 ; Shield, Screen $8C ($67,$28).
 $721D DEFB $15,$8B,$00,$88,$6F,$40,$00,$00 ; Antler Trophy, Screen $8B
                                            ; ($6F,$88).
 $7225 DEFB $16,$8C,$00,$88,$67,$40,$00,$00 ; Trophy, Screen $8C ($67,$88).
 $722D DEFB $1C,$16,$00,$58,$37,$00,$00,$00 ; Acg Shield, Screen $16 ($37,$58).
 $7235 DEFB $1D,$14,$00,$58,$97,$80,$00,$00 ; Shield, Screen $14 ($97,$58).
 $723D DEFB $15,$0E,$00,$28,$57,$E0,$00,$00 ; Antler Trophy, Screen $0E
                                            ; ($57,$28).
 $7245 DEFB $16,$12,$00,$88,$6F,$40,$00,$00 ; Trophy, Screen $12 ($6F,$88).
 $724D DEFB $1C,$0F,$00,$28,$67,$E0,$00,$00 ; Acg Shield, Screen $0F ($67,$28).
 $7255 DEFB $1D,$11,$00,$28,$67,$E0,$00,$00 ; Shield, Screen $11 ($67,$28).
 $725D DEFB $15,$10,$00,$88,$6F,$40,$00,$00 ; Antler Trophy, Screen $10
                                            ; ($6F,$88).
 $7265 DEFB $16,$73,$00,$58,$97,$80,$00,$00 ; Trophy, Screen $73 ($97,$58).
 $726D DEFB $1C,$08,$00,$88,$67,$40,$00,$00 ; Acg Shield, Screen $08 ($67,$88).
 $7275 DEFB $1D,$18,$00,$88,$67,$40,$00,$00 ; Shield, Screen $18 ($67,$88).
 $727D DEFB $15,$6F,$00,$28,$67,$E0,$00,$00 ; Antler Trophy, Screen $6F
                                            ; ($67,$28).
 $7285 DEFB $16,$0E,$00,$28,$77,$E0,$00,$00 ; Trophy, Screen $0E ($77,$28).
 $728D DEFB $25,$00,$00,$28,$17,$00,$00,$00 ; Picture, Screen $00 ($17,$28).
 $7295 DEFB $1D,$19,$00,$58,$37,$00,$00,$00 ; Shield, Screen $19 ($37,$58).
 $729D DEFB $11,$00,$00,$78,$1C,$00,$00,$00 ; Picture, Screen $00 ($1C,$78).
 $72A5 DEFB $16,$0B,$00,$58,$37,$00,$00,$00 ; Trophy, Screen $0B ($37,$58).
 $72AD DEFB $1C,$00,$00,$38,$B7,$80,$00,$00 ; Acg Shield, Screen $00 ($B7,$38).
 $72B5 DEFB $1D,$19,$00,$58,$97,$80,$00,$00 ; Shield, Screen $19 ($97,$58).
 $72BD DEFB $15,$00,$00,$78,$B7,$80,$00,$00 ; Antler Trophy, Screen $00
                                            ; ($B7,$78).
 $72C5 DEFB $16,$0B,$00,$58,$97,$81,$00,$00 ; Trophy, Screen $0B ($97,$58).
 $72CD DEFB $11,$04,$00,$28,$47,$E1,$00,$00 ; Picture, Screen $04 ($47,$28).
 $72D5 DEFB $15,$15,$00,$58,$37,$00,$00,$00 ; Antler Trophy, Screen $15
                                            ; ($37,$58).
 $72DD DEFB $16,$04,$00,$28,$87,$E0,$00,$00 ; Trophy, Screen $04 ($87,$28).
 $72E5 DEFB $25,$14,$00,$58,$37,$00,$00,$00 ; Picture, Screen $14 ($37,$58).
 $72ED DEFB $11,$73,$00,$58,$3C,$00,$00,$00 ; Picture, Screen $73 ($3C,$58).
 $72F5 DEFB $16,$6E,$00,$58,$B7,$80,$00,$00 ; Trophy, Screen $6E ($B7,$58).
 $72FD DEFB $1C,$6D,$00,$58,$B7,$80,$00,$00 ; Acg Shield, Screen $6D ($B7,$58).
 $7305 DEFB $25,$0E,$00,$88,$6F,$40,$00,$00 ; Picture, Screen $0E ($6F,$88).
 $730D DEFB $25,$07,$00,$A8,$6F,$40,$00,$00 ; Picture, Screen $07 ($6F,$A8).
 $7315 DEFB $1C,$06,$00,$38,$97,$80,$00,$00 ; Acg Shield, Screen $06 ($97,$38).
 $731D DEFB $1C,$06,$00,$78,$97,$80,$00,$00 ; Acg Shield, Screen $06 ($97,$78).
 $7325 DEFB $1D,$01,$00,$A8,$67,$40,$00,$00 ; Shield, Screen $01 ($67,$A8).
 $732D DEFB $11,$18,$00,$28,$6F,$E1,$00,$00 ; Picture, Screen $18 ($6F,$28).
 $7335 DEFB $1D,$17,$00,$A8,$67,$40,$00,$00 ; Shield, Screen $17 ($67,$A8).
 $733D DEFB $15,$87,$00,$38,$17,$00,$00,$00 ; Antler Trophy, Screen $87
                                            ; ($17,$38).
 $7345 DEFB $16,$89,$00,$38,$B7,$80,$00,$00 ; Trophy, Screen $89 ($B7,$38).
 $734D DEFB $16,$87,$00,$78,$17,$00,$00,$00 ; Trophy, Screen $87 ($17,$78).
 $7355 DEFB $15,$89,$00,$78,$B7,$80,$00,$00 ; Antler Trophy, Screen $89
                                            ; ($B7,$78).
 $735D DEFB $1D,$00,$00,$08,$47,$E0,$00,$00 ; Shield, Screen $00 ($47,$08).
 $7365 DEFB $16,$82,$00,$38,$B7,$80,$00,$00 ; Trophy, Screen $82 ($B7,$38).
 $736D DEFB $16,$00,$00,$08,$87,$E0,$00,$00 ; Trophy, Screen $00 ($87,$08).
 $7375 DEFB $15,$82,$00,$78,$B7,$80,$00,$00 ; Antler Trophy, Screen $82
                                            ; ($B7,$78).
 $737D DEFB $11,$66,$00,$A0,$47,$61,$00,$00 ; Picture, Screen $66 ($47,$A0).
 $7385 DEFB $1D,$61,$00,$A8,$6F,$60,$00,$00 ; Shield, Screen $61 ($6F,$A8).
 $738D DEFB $15,$66,$00,$A8,$87,$60,$00,$00 ; Antler Trophy, Screen $66
                                            ; ($87,$A8).
 $7395 DEFB $25,$5D,$00,$A8,$6F,$60,$00,$00 ; Picture, Screen $5D ($6F,$A8).
 $739D DEFB $16,$66,$00,$08,$47,$E0,$00,$00 ; Trophy, Screen $66 ($47,$08).
 $73A5 DEFB $1D,$65,$00,$58,$B7,$80,$00,$00 ; Shield, Screen $65 ($B7,$58).
 $73AD DEFB $1C,$66,$00,$08,$87,$E0,$00,$00 ; Acg Shield, Screen $66 ($87,$08).
 $73B5 DEFB $16,$64,$00,$58,$B7,$80,$00,$00 ; Trophy, Screen $64 ($B7,$58).
 $73BD DEFB $11,$63,$00,$58,$B7,$81,$00,$00 ; Picture, Screen $63 ($B7,$58).
 $73C5 DEFB $15,$62,$00,$50,$B7,$80,$00,$00 ; Antler Trophy, Screen $62
                                            ; ($B7,$50).
 $73CD DEFB $16,$70,$00,$38,$B7,$80,$00,$00 ; Trophy, Screen $70 ($B7,$38).
 $73D5 DEFB $15,$0D,$00,$08,$6F,$E0,$00,$00 ; Antler Trophy, Screen $0D
                                            ; ($6F,$08).
 $73DD DEFB $1D,$70,$00,$78,$B7,$80,$00,$00 ; Shield, Screen $70 ($B7,$78).
 $73E5 DEFB $16,$0C,$00,$58,$37,$00,$00,$00 ; Trophy, Screen $0C ($37,$58).
 $73ED DEFB $16,$09,$00,$A8,$47,$40,$00,$00 ; Trophy, Screen $09 ($47,$A8).
 $73F5 DEFB $15,$7F,$00,$08,$60,$E0,$00,$00 ; Antler Trophy, Screen $7F
                                            ; ($60,$08).
 $73FD DEFB $11,$09,$00,$A0,$87,$41,$00,$00 ; Picture, Screen $09 ($87,$A0).
 $7405 DEFB $1D,$7F,$00,$58,$17,$00,$00,$00 ; Shield, Screen $7F ($17,$58).
 $740D DEFB $15,$5A,$00,$08,$47,$E0,$00,$00 ; Antler Trophy, Screen $5A
                                            ; ($47,$08).
 $7415 DEFB $25,$27,$00,$A8,$47,$60,$00,$00 ; Picture, Screen $27 ($47,$A8).
 $741D DEFB $16,$5A,$00,$08,$87,$E0,$00,$00 ; Trophy, Screen $5A ($87,$08).
 $7425 DEFB $1D,$27,$00,$A8,$87,$60,$00,$00 ; Shield, Screen $27 ($87,$A8).
 $742D DEFB $1C,$29,$00,$A8,$47,$60,$00,$00 ; Acg Shield, Screen $29 ($47,$A8).
 $7435 DEFB $16,$7E,$00,$A8,$60,$60,$00,$00 ; Trophy, Screen $7E ($60,$A8).
 $743D DEFB $11,$29,$00,$A0,$87,$61,$00,$00 ; Picture, Screen $29 ($87,$A0).
 $7445 DEFB $15,$7E,$00,$58,$B7,$80,$00,$00 ; Antler Trophy, Screen $7E
                                            ; ($B7,$58).
 $744D DEFB $10,$0D,$34,$30,$27,$01,$04,$56 ; Clock, Screen $0D ($27,$30).
 $7455 DEFB $10,$13,$34,$30,$B7,$81,$04,$06 ; Clock, Screen $13 ($B7,$30).
 $745D DEFB $10,$09,$34,$30,$27,$01,$04,$56 ; Clock, Screen $09 ($27,$30).
 $7465 DEFB $10,$17,$34,$30,$B7,$81,$04,$06 ; Clock, Screen $17 ($B7,$30).
 $746D DEFB $10,$35,$34,$88,$6F,$61,$B7,$03 ; Clock, Screen $35 ($6F,$88).
 $7475 DEFB $10,$8F,$34,$18,$6F,$E1,$06,$03 ; Clock, Screen $8F ($6F,$18).
 $747D DEFB $10,$67,$34,$98,$6F,$61,$B7,$03 ; Clock, Screen $67 ($6F,$98).
 $7485 DEFB $10,$68,$34,$08,$6F,$E1,$06,$03 ; Clock, Screen $68 ($6F,$08).
 $748D DEFB $10,$8D,$34,$78,$4F,$61,$B7,$03 ; Clock, Screen $8D ($4F,$78).
 $7495 DEFB $10,$22,$34,$28,$6F,$E1,$06,$03 ; Clock, Screen $22 ($6F,$28).
 $749D DEFB $10,$76,$34,$30,$27,$01,$04,$56 ; Clock, Screen $76 ($27,$30).
 $74A5 DEFB $10,$75,$34,$30,$B7,$81,$04,$06 ; Clock, Screen $75 ($B7,$30).
 $74AD DEFB $17,$0A,$34,$40,$47,$00,$04,$56 ; Bookcase, Screen $0A ($47,$40).
 $74B5 DEFB $17,$16,$34,$40,$97,$80,$04,$06 ; Bookcase, Screen $16 ($97,$40).
 $74BD DEFB $17,$3D,$34,$48,$37,$00,$04,$56 ; Bookcase, Screen $3D ($37,$48).
 $74C5 DEFB $17,$49,$34,$50,$AF,$80,$04,$06 ; Bookcase, Screen $49 ($AF,$50).
 $74CD DEFB $17,$69,$34,$40,$B7,$80,$04,$06 ; Bookcase, Screen $69 ($B7,$40).
 $74D5 DEFB $17,$6A,$34,$40,$27,$00,$04,$56 ; Bookcase, Screen $6A ($27,$40).
 $74DD DEFB $17,$6C,$34,$40,$B7,$80,$04,$06 ; Bookcase, Screen $6C ($B7,$40).
 $74E5 DEFB $17,$6E,$34,$40,$27,$00,$04,$56 ; Bookcase, Screen $6E ($27,$40).
 $74ED DEFB $17,$3E,$34,$88,$77,$60,$B7,$03 ; Bookcase, Screen $3E ($77,$88).
 $74F5 DEFB $17,$41,$34,$48,$A7,$80,$04,$06 ; Bookcase, Screen $41 ($A7,$48).
 $74FD DEFB $1A,$45,$34,$50,$37,$00,$04,$56 ; Barrel, Screen $45 ($37,$50).
 $7505 DEFB $1A,$53,$34,$50,$A4,$A0,$04,$06 ; Barrel, Screen $53 ($A4,$50).
 $750D DEFB $1A,$4C,$34,$88,$6F,$40,$B7,$03 ; Barrel, Screen $4C ($6F,$88).
 $7515 DEFB $1A,$4E,$34,$18,$6F,$E0,$06,$03 ; Barrel, Screen $4E ($6F,$18).
 $751D DEFB $1A,$38,$34,$50,$37,$00,$04,$56 ; Barrel, Screen $38 ($37,$50).
 $7525 DEFB $1A,$4B,$34,$50,$A7,$A0,$04,$06 ; Barrel, Screen $4B ($A7,$50).
 $752D DEFB $1A,$6B,$34,$50,$B7,$A0,$04,$06 ; Barrel, Screen $6B ($B7,$50).
 $7535 DEFB $1A,$6D,$34,$50,$27,$00,$04,$56 ; Barrel, Screen $6D ($27,$50).
 $753D DEFB $1A,$8A,$34,$98,$6F,$60,$B7,$03 ; Barrel, Screen $8A ($6F,$98).
 $7545 DEFB $1A,$08,$34,$28,$6F,$E1,$06,$03 ; Barrel, Screen $08 ($6F,$28).
 $754D DEFB $24,$00,$C4,$98,$7F,$40,$BA,$D6 ; Acg Exit Door, Screen $00
                                            ; ($7F,$98).
 $7555 DEFB $24,$8E,$C4,$00,$7F,$E0,$08,$D6 ; Acg Exit Door, Screen $8E
                                            ; ($7F,$00).
 $755D DEFB $26,$53,$00,$80,$77,$61,$00,$00 ; Skeleton, Screen $53 ($77,$80).
 $7565 DEFB $26,$8F,$00,$80,$77,$61,$00,$00 ; Skeleton, Screen $8F ($77,$80).
 $756D DEFB $26,$33,$00,$18,$6F,$E1,$00,$00 ; Skeleton, Screen $33 ($6F,$18).
 $7575 DEFB $26,$55,$00,$50,$A7,$81,$00,$00 ; Skeleton, Screen $55 ($A7,$50).

; Static Screen Background Item Lookup Table
@label=StaticScreenBackgroundItemLookupTable
w$757D DEFW $76A9    ; Screen $00.
 $757F DEFW $76C3    ; Screen $01.
 $7581 DEFW $76CD    ; Screen $02.
 $7583 DEFW $76D7    ; Screen $03.
 $7585 DEFW $76E5    ; Screen $04.
 $7587 DEFW $76F1    ; Screen $05.
 $7589 DEFW $76FB    ; Screen $06.
 $758B DEFW $770D    ; Screen $07.
 $758D DEFW $7717    ; Screen $08.
 $758F DEFW $7721    ; Screen $09.
 $7591 DEFW $7733    ; Screen $0A.
 $7593 DEFW $773D    ; Screen $0B.
 $7595 DEFW $7747    ; Screen $0C.
 $7597 DEFW $7751    ; Screen $0D.
 $7599 DEFW $775F    ; Screen $0E.
 $759B DEFW $776B    ; Screen $0F.
 $759D DEFW $7775    ; Screen $10.
 $759F DEFW $777D    ; Screen $11.
 $75A1 DEFW $7787    ; Screen $12.
 $75A3 DEFW $778F    ; Screen $13.
 $75A5 DEFW $779D    ; Screen $14.
 $75A7 DEFW $77A7    ; Screen $15.
 $75A9 DEFW $77B5    ; Screen $16.
 $75AB DEFW $77BF    ; Screen $17.
 $75AD DEFW $77CB    ; Screen $18.
 $75AF DEFW $77D9    ; Screen $19.
 $75B1 DEFW $77E3    ; Screen $1A.
 $75B3 DEFW $77E9    ; Screen $1B.
 $75B5 DEFW $77F3    ; Screen $1C.
 $75B7 DEFW $77F9    ; Screen $1D.
 $75B9 DEFW $77FF    ; Screen $1E.
 $75BB DEFW $7805    ; Screen $1F.
 $75BD DEFW $780D    ; Screen $20.
 $75BF DEFW $7815    ; Screen $21.
 $75C1 DEFW $7821    ; Screen $22.
 $75C3 DEFW $7829    ; Screen $23.
 $75C5 DEFW $7833    ; Screen $24.
 $75C7 DEFW $783F    ; Screen $25.
 $75C9 DEFW $7847    ; Screen $26.
 $75CB DEFW $784D    ; Screen $27.
 $75CD DEFW $785D    ; Screen $28.
 $75CF DEFW $7863    ; Screen $29.
 $75D1 DEFW $7871    ; Screen $2A.
 $75D3 DEFW $787B    ; Screen $2B.
 $75D5 DEFW $7885    ; Screen $2C.
 $75D7 DEFW $788B    ; Screen $2D.
 $75D9 DEFW $7899    ; Screen $2E.
 $75DB DEFW $78A3    ; Screen $2F.
 $75DD DEFW $78A9    ; Screen $30.
 $75DF DEFW $78B1    ; Screen $31.
 $75E1 DEFW $78B7    ; Screen $32.
 $75E3 DEFW $78BD    ; Screen $33.
 $75E5 DEFW $78C7    ; Screen $34.
 $75E7 DEFW $78CD    ; Screen $35.
 $75E9 DEFW $78D5    ; Screen $36.
 $75EB DEFW $78DB    ; Screen $37.
 $75ED DEFW $78E1    ; Screen $38.
 $75EF DEFW $78EB    ; Screen $39.
 $75F1 DEFW $78F1    ; Screen $3A.
 $75F3 DEFW $78F9    ; Screen $3B.
 $75F5 DEFW $7903    ; Screen $3C.
 $75F7 DEFW $7909    ; Screen $3D.
 $75F9 DEFW $7915    ; Screen $3E.
 $75FB DEFW $791D    ; Screen $3F.
 $75FD DEFW $7923    ; Screen $40.
 $75FF DEFW $792D    ; Screen $41.
 $7601 DEFW $7933    ; Screen $42.
 $7603 DEFW $7939    ; Screen $43.
 $7605 DEFW $7943    ; Screen $44.
 $7607 DEFW $7949    ; Screen $45.
 $7609 DEFW $794F    ; Screen $46.
 $760B DEFW $7957    ; Screen $47.
 $760D DEFW $795D    ; Screen $48.
 $760F DEFW $7967    ; Screen $49.
 $7611 DEFW $796D    ; Screen $4A.
 $7613 DEFW $7973    ; Screen $4B.
 $7615 DEFW $797D    ; Screen $4C.
 $7617 DEFW $7985    ; Screen $4D.
 $7619 DEFW $798B    ; Screen $4E.
 $761B DEFW $7993    ; Screen $4F.
 $761D DEFW $7999    ; Screen $50.
 $761F DEFW $79A1    ; Screen $51.
 $7621 DEFW $79A7    ; Screen $52.
 $7623 DEFW $79AD    ; Screen $53.
 $7625 DEFW $79B5    ; Screen $54.
 $7627 DEFW $79BD    ; Screen $55.
 $7629 DEFW $79C5    ; Screen $56.
 $762B DEFW $79D3    ; Screen $57.
 $762D DEFW $79DB    ; Screen $58.
 $762F DEFW $79E3    ; Screen $59.
 $7631 DEFW $79EB    ; Screen $5A.
 $7633 DEFW $79F7    ; Screen $5B.
 $7635 DEFW $7A05    ; Screen $5C.
 $7637 DEFW $7A13    ; Screen $5D.
 $7639 DEFW $7A1F    ; Screen $5E.
 $763B DEFW $7A27    ; Screen $5F.
 $763D DEFW $7A33    ; Screen $60.
 $763F DEFW $7A3F    ; Screen $61.
 $7641 DEFW $7A4B    ; Screen $62.
 $7643 DEFW $7A55    ; Screen $63.
 $7645 DEFW $7A61    ; Screen $64.
 $7647 DEFW $7A6B    ; Screen $65.
 $7649 DEFW $7A77    ; Screen $66.
 $764B DEFW $7A8B    ; Screen $67.
 $764D DEFW $7A91    ; Screen $68.
 $764F DEFW $7A97    ; Screen $69.
 $7651 DEFW $7A9D    ; Screen $6A.
 $7653 DEFW $7AA5    ; Screen $6B.
 $7655 DEFW $7AAD    ; Screen $6C.
 $7657 DEFW $7AB7    ; Screen $6D.
 $7659 DEFW $7AC3    ; Screen $6E.
 $765B DEFW $7ACF    ; Screen $6F.
 $765D DEFW $7AD7    ; Screen $70.
 $765F DEFW $7AE1    ; Screen $71.
 $7661 DEFW $7AE7    ; Screen $72.
 $7663 DEFW $7AED    ; Screen $73.
 $7665 DEFW $7AF7    ; Screen $74.
 $7667 DEFW $7AFD    ; Screen $75.
 $7669 DEFW $7B05    ; Screen $76.
 $766B DEFW $7B11    ; Screen $77.
 $766D DEFW $7B17    ; Screen $78.
 $766F DEFW $7B1F    ; Screen $79.
 $7671 DEFW $7B25    ; Screen $7A.
 $7673 DEFW $7B33    ; Screen $7B.
 $7675 DEFW $7B39    ; Screen $7C.
 $7677 DEFW $7B43    ; Screen $7D.
 $7679 DEFW $7B4D    ; Screen $7E.
 $767B DEFW $7B57    ; Screen $7F.
 $767D DEFW $7B61    ; Screen $80.
 $767F DEFW $7B67    ; Screen $81.
 $7681 DEFW $7B6F    ; Screen $82.
 $7683 DEFW $7B7B    ; Screen $83.
 $7685 DEFW $7B81    ; Screen $84.
 $7687 DEFW $7B8B    ; Screen $85.
 $7689 DEFW $7B91    ; Screen $86.
 $768B DEFW $7B97    ; Screen $87.
 $768D DEFW $7BA3    ; Screen $88.
 $768F DEFW $7BAF    ; Screen $89.
 $7691 DEFW $7BBB    ; Screen $8A.
 $7693 DEFW $7BC9    ; Screen $8B.
 $7695 DEFW $7BD3    ; Screen $8C.
 $7697 DEFW $7BDD    ; Screen $8D.
 $7699 DEFW $7BEB    ; Screen $8E.
 $769B DEFW $7BEF    ; Screen $8F.
 $769D DEFW $7BF7    ; Screen $90.
 $769F DEFW $7BFD    ; Screen $91.
 $76A1 DEFW $7C05    ; Screen $92.
 $76A3 DEFW $7C0B    ; Screen $93.
 $76A5 DEFW $7C11    ; Screen $94.
 $76A7 DEFW $7C17    ; Terminator.

; Static Screen Background Item Table
@label=StaticScreenBackgroundItemTable
w$76A9 DEFW $645D    ; {Screen $00.
 $76AB DEFW $646D    ;
 $76AD DEFW $647D    ;
 $76AF DEFW $754D    ;
 $76B1 DEFW $705D    ;
 $76B3 DEFW $706D    ;
 $76B5 DEFW $728D    ;
 $76B7 DEFW $729D    ;
 $76B9 DEFW $72AD    ;
 $76BB DEFW $72BD    ;
 $76BD DEFW $735D    ;
 $76BF DEFW $736D    ;
 $76C1 DEFW $0000    ; }
 $76C3 DEFW $647D    ; {Screen $01.
 $76C5 DEFW $648D    ;
 $76C7 DEFW $707D    ;
 $76C9 DEFW $731D    ;
 $76CB DEFW $0000    ; }
 $76CD DEFW $648D    ; {Screen $02.
 $76CF DEFW $649D    ;
 $76D1 DEFW $661D    ;
 $76D3 DEFW $66ED    ;
 $76D5 DEFW $0000    ; }
 $76D7 DEFW $649D    ; {Screen $03.
 $76D9 DEFW $64AD    ;
 $76DB DEFW $6C4D    ;
 $76DD DEFW $6F7D    ;
 $76DF DEFW $6FDD    ;
 $76E1 DEFW $707D    ;
 $76E3 DEFW $0000    ; }
 $76E5 DEFW $64AD    ; {Screen $04.
 $76E7 DEFW $64BD    ;
 $76E9 DEFW $64CD    ;
 $76EB DEFW $72CD    ;
 $76ED DEFW $72DD    ;
 $76EF DEFW $0000    ; }
 $76F1 DEFW $64CD    ; {Screen $05.
 $76F3 DEFW $64DD    ;
 $76F5 DEFW $6C7D    ;
 $76F7 DEFW $708D    ;
 $76F9 DEFW $0000    ; }
 $76FB DEFW $64DD    ; {Screen $06.
 $76FD DEFW $64ED    ;
 $76FF DEFW $64FD    ;
 $7701 DEFW $650D    ;
 $7703 DEFW $705D    ;
 $7705 DEFW $706D    ;
 $7707 DEFW $730D    ;
 $7709 DEFW $731D    ;
 $770B DEFW $0000    ; }
 $770D DEFW $645D    ; {Screen $07.
 $770F DEFW $650D    ;
 $7711 DEFW $708D    ;
 $7713 DEFW $730D    ;
 $7715 DEFW $0000    ; }
 $7717 DEFW $64FD    ; {Screen $08.
 $7719 DEFW $651D    ;
 $771B DEFW $726D    ;
 $771D DEFW $753D    ;
 $771F DEFW $0000    ; }
 $7721 DEFW $651D    ; {Screen $09.
 $7723 DEFW $652D    ;
 $7725 DEFW $700D    ;
 $7727 DEFW $745D    ;
 $7729 DEFW $713D    ;
 $772B DEFW $714D    ;
 $772D DEFW $73ED    ;
 $772F DEFW $73FD    ;
 $7731 DEFW $0000    ; }
 $7733 DEFW $652D    ; {Screen $0A.
 $7735 DEFW $653D    ;
 $7737 DEFW $74AD    ;
 $7739 DEFW $72BD    ;
 $773B DEFW $0000    ; }
 $773D DEFW $653D    ; {Screen $0B.
 $773F DEFW $654D    ;
 $7741 DEFW $701D    ;
 $7743 DEFW $729D    ;
 $7745 DEFW $0000    ; }
 $7747 DEFW $654D    ; {Screen $0C.
 $7749 DEFW $655D    ;
 $774B DEFW $701D    ;
 $774D DEFW $73DD    ;
 $774F DEFW $0000    ; }
 $7751 DEFW $655D    ; {Screen $0D.
 $7753 DEFW $656D    ;
 $7755 DEFW $6C8D    ;
 $7757 DEFW $744D    ;
 $7759 DEFW $715D    ;
 $775B DEFW $73CD    ;
 $775D DEFW $0000    ; }
 $775F DEFW $656D    ; {Screen $0E.
 $7761 DEFW $657D    ;
 $7763 DEFW $723D    ;
 $7765 DEFW $727D    ;
 $7767 DEFW $72FD    ;
 $7769 DEFW $0000    ; }
 $776B DEFW $657D    ; {Screen $0F.
 $776D DEFW $658D    ;
 $776F DEFW $6C5D    ;
 $7771 DEFW $724D    ;
 $7773 DEFW $0000    ; }
 $7775 DEFW $658D    ; {Screen $10.
 $7777 DEFW $659D    ;
 $7779 DEFW $725D    ;
 $777B DEFW $0000    ; }
 $777D DEFW $659D    ; {Screen $11.
 $777F DEFW $65AD    ;
 $7781 DEFW $6C2D    ;
 $7783 DEFW $724D    ;
 $7785 DEFW $0000    ; }
 $7787 DEFW $65AD    ; {Screen $12.
 $7789 DEFW $65BD    ;
 $778B DEFW $723D    ;
 $778D DEFW $0000    ; }
 $778F DEFW $65BD    ; {Screen $13.
 $7791 DEFW $65CD    ;
 $7793 DEFW $6C1D    ;
 $7795 DEFW $715D    ;
 $7797 DEFW $744D    ;
 $7799 DEFW $70AD    ;
 $779B DEFW $0000    ; }
 $779D DEFW $65CD    ; {Screen $14.
 $779F DEFW $65DD    ;
 $77A1 DEFW $722D    ;
 $77A3 DEFW $72DD    ;
 $77A5 DEFW $0000    ; }
 $77A7 DEFW $65DD    ; {Screen $15.
 $77A9 DEFW $65ED    ;
 $77AB DEFW $6FED    ;
 $77AD DEFW $72CD    ;
 $77AF DEFW $709D    ;
 $77B1 DEFW $70AD    ;
 $77B3 DEFW $0000    ; }
 $77B5 DEFW $65ED    ; {Screen $16.
 $77B7 DEFW $65FD    ;
 $77B9 DEFW $722D    ;
 $77BB DEFW $74AD    ;
 $77BD DEFW $0000    ; }
 $77BF DEFW $65FD    ; {Screen $17.
 $77C1 DEFW $660D    ;
 $77C3 DEFW $745D    ;
 $77C5 DEFW $732D    ;
 $77C7 DEFW $709D    ;
 $77C9 DEFW $0000    ; }
 $77CB DEFW $660D    ; {Screen $18.
 $77CD DEFW $661D    ;
 $77CF DEFW $726D    ;
 $77D1 DEFW $717D    ;
 $77D3 DEFW $719D    ;
 $77D5 DEFW $732D    ;
 $77D7 DEFW $0000    ; }
 $77D9 DEFW $646D    ; {Screen $19.
 $77DB DEFW $64BD    ;
 $77DD DEFW $728D    ;
 $77DF DEFW $72AD    ;
 $77E1 DEFW $0000    ; }
 $77E3 DEFW $64ED    ; {Screen $1A.
 $77E5 DEFW $662D    ;
 $77E7 DEFW $0000    ; }
 $77E9 DEFW $662D    ; {Screen $1B.
 $77EB DEFW $663D    ;
 $77ED DEFW $6EED    ;
 $77EF DEFW $71BD    ;
 $77F1 DEFW $0000    ; }
 $77F3 DEFW $663D    ; {Screen $1C.
 $77F5 DEFW $664D    ;
 $77F7 DEFW $0000    ; }
 $77F9 DEFW $664D    ; {Screen $1D.
 $77FB DEFW $69ED    ;
 $77FD DEFW $0000    ; }
 $77FF DEFW $665D    ; {Screen $1E.
 $7801 DEFW $66CD    ;
 $7803 DEFW $0000    ; }
 $7805 DEFW $665D    ; {Screen $1F.
 $7807 DEFW $666D    ;
 $7809 DEFW $703D    ;
 $780B DEFW $0000    ; }
 $780D DEFW $666D    ; {Screen $20.
 $780F DEFW $667D    ;
 $7811 DEFW $678D    ;
 $7813 DEFW $0000    ; }
 $7815 DEFW $667D    ; {Screen $21.
 $7817 DEFW $668D    ;
 $7819 DEFW $6AFD    ;
 $781B DEFW $6FDD    ;
 $781D DEFW $703D    ;
 $781F DEFW $0000    ; }
 $7821 DEFW $668D    ; {Screen $22.
 $7823 DEFW $669D    ;
 $7825 DEFW $748D    ;
 $7827 DEFW $0000    ; }
 $7829 DEFW $669D    ; {Screen $23.
 $782B DEFW $66AD    ;
 $782D DEFW $6C0D    ;
 $782F DEFW $704D    ;
 $7831 DEFW $0000    ; }
 $7833 DEFW $66AD    ; {Screen $24.
 $7835 DEFW $66BD    ;
 $7837 DEFW $66DD    ;
 $7839 DEFW $70FD    ;
 $783B DEFW $710D    ;
 $783D DEFW $0000    ; }
 $783F DEFW $66BD    ; {Screen $25.
 $7841 DEFW $66CD    ;
 $7843 DEFW $704D    ;
 $7845 DEFW $0000    ; }
 $7847 DEFW $66DD    ; {Screen $26.
 $7849 DEFW $66ED    ;
 $784B DEFW $0000    ; }
 $784D DEFW $66FD    ; {Screen $27.
 $784F DEFW $676D    ;
 $7851 DEFW $677D    ;
 $7853 DEFW $70DD    ;
 $7855 DEFW $70ED    ;
 $7857 DEFW $740D    ;
 $7859 DEFW $741D    ;
 $785B DEFW $0000    ; }
 $785D DEFW $66FD    ; {Screen $28.
 $785F DEFW $670D    ;
 $7861 DEFW $0000    ; }
 $7863 DEFW $670D    ; {Screen $29.
 $7865 DEFW $671D    ;
 $7867 DEFW $6AED    ;
 $7869 DEFW $700D    ;
 $786B DEFW $742D    ;
 $786D DEFW $743D    ;
 $786F DEFW $0000    ; }
 $7871 DEFW $671D    ; {Screen $2A.
 $7873 DEFW $672D    ;
 $7875 DEFW $71ED    ;
 $7877 DEFW $71FD    ;
 $7879 DEFW $0000    ; }
 $787B DEFW $672D    ; {Screen $2B.
 $787D DEFW $673D    ;
 $787F DEFW $70DD    ;
 $7881 DEFW $70ED    ;
 $7883 DEFW $0000    ; }
 $7885 DEFW $673D    ; {Screen $2C.
 $7887 DEFW $674D    ;
 $7889 DEFW $0000    ; }
 $788B DEFW $674D    ; {Screen $2D.
 $788D DEFW $675D    ;
 $788F DEFW $6A3D    ;
 $7891 DEFW $6F9D    ;
 $7893 DEFW $71ED    ;
 $7895 DEFW $71FD    ;
 $7897 DEFW $0000    ; }
 $7899 DEFW $675D    ; {Screen $2E.
 $789B DEFW $676D    ;
 $789D DEFW $71CD    ;
 $789F DEFW $71DD    ;
 $78A1 DEFW $0000    ; }
 $78A3 DEFW $677D    ; {Screen $2F.
 $78A5 DEFW $678D    ;
 $78A7 DEFW $0000    ; }
 $78A9 DEFW $679D    ; {Screen $30.
 $78AB DEFW $6A2D    ;
 $78AD DEFW $6CDD    ;
 $78AF DEFW $0000    ; }
 $78B1 DEFW $679D    ; {Screen $31.
 $78B3 DEFW $67AD    ;
 $78B5 DEFW $0000    ; }
 $78B7 DEFW $67AD    ; {Screen $32.
 $78B9 DEFW $67BD    ;
 $78BB DEFW $0000    ; }
 $78BD DEFW $67BD    ; {Screen $33.
 $78BF DEFW $67CD    ;
 $78C1 DEFW $67ED    ;
 $78C3 DEFW $756D    ;
 $78C5 DEFW $0000    ; }
 $78C7 DEFW $67CD    ; {Screen $34.
 $78C9 DEFW $67DD    ;
 $78CB DEFW $0000    ; }
 $78CD DEFW $67DD    ; {Screen $35.
 $78CF DEFW $6CCD    ;
 $78D1 DEFW $746D    ;
 $78D3 DEFW $0000    ; }
 $78D5 DEFW $67ED    ; {Screen $36.
 $78D7 DEFW $67FD    ;
 $78D9 DEFW $0000    ; }
 $78DB DEFW $67FD    ; {Screen $37.
 $78DD DEFW $680D    ;
 $78DF DEFW $0000    ; }
 $78E1 DEFW $680D    ; {Screen $38.
 $78E3 DEFW $681D    ;
 $78E5 DEFW $682D    ;
 $78E7 DEFW $751D    ;
 $78E9 DEFW $0000    ; }
 $78EB DEFW $681D    ; {Screen $39.
 $78ED DEFW $683D    ;
 $78EF DEFW $0000    ; }
 $78F1 DEFW $682D    ; {Screen $3A.
 $78F3 DEFW $684D    ;
 $78F5 DEFW $6F5D    ;
 $78F7 DEFW $0000    ; }
 $78F9 DEFW $683D    ; {Screen $3B.
 $78FB DEFW $684D    ;
 $78FD DEFW $685D    ;
 $78FF DEFW $686D    ;
 $7901 DEFW $0000    ; }
 $7903 DEFW $685D    ; {Screen $3C.
 $7905 DEFW $687D    ;
 $7907 DEFW $0000    ; }
 $7909 DEFW $686D    ; {Screen $3D.
 $790B DEFW $688D    ;
 $790D DEFW $689D    ;
 $790F DEFW $74BD    ;
 $7911 DEFW $702D    ;
 $7913 DEFW $0000    ; }
 $7915 DEFW $687D    ; {Screen $3E.
 $7917 DEFW $688D    ;
 $7919 DEFW $74ED    ;
 $791B DEFW $0000    ; }
 $791D DEFW $689D    ; {Screen $3F.
 $791F DEFW $68AD    ;
 $7921 DEFW $0000    ; }
 $7923 DEFW $68AD    ; {Screen $40.
 $7925 DEFW $68BD    ;
 $7927 DEFW $68CD    ;
 $7929 DEFW $6EFD    ;
 $792B DEFW $0000    ; }
 $792D DEFW $68BD    ; {Screen $41.
 $792F DEFW $74ED    ;
 $7931 DEFW $0000    ; }
 $7933 DEFW $68CD    ; {Screen $42.
 $7935 DEFW $68DD    ;
 $7937 DEFW $0000    ; }
 $7939 DEFW $68DD    ; {Screen $43.
 $793B DEFW $68ED    ;
 $793D DEFW $690D    ;
 $793F DEFW $69ED    ;
 $7941 DEFW $0000    ; }
 $7943 DEFW $68ED    ; {Screen $44.
 $7945 DEFW $68FD    ;
 $7947 DEFW $0000    ; }
 $7949 DEFW $68FD    ; {Screen $45.
 $794B DEFW $74FD    ;
 $794D DEFW $0000    ; }
 $794F DEFW $690D    ; {Screen $46.
 $7951 DEFW $691D    ;
 $7953 DEFW $69FD    ;
 $7955 DEFW $0000    ; }
 $7957 DEFW $691D    ; {Screen $47.
 $7959 DEFW $692D    ;
 $795B DEFW $0000    ; }
 $795D DEFW $692D    ; {Screen $48.
 $795F DEFW $693D    ;
 $7961 DEFW $694D    ;
 $7963 DEFW $697D    ;
 $7965 DEFW $0000    ; }
 $7967 DEFW $693D    ; {Screen $49.
 $7969 DEFW $74BD    ;
 $796B DEFW $0000    ; }
 $796D DEFW $694D    ; {Screen $4A.
 $796F DEFW $695D    ;
 $7971 DEFW $0000    ; }
 $7973 DEFW $695D    ; {Screen $4B.
 $7975 DEFW $696D    ;
 $7977 DEFW $6F8D    ;
 $7979 DEFW $751D    ;
 $797B DEFW $0000    ; }
 $797D DEFW $696D    ; {Screen $4C.
 $797F DEFW $6A0D    ;
 $7981 DEFW $750D    ;
 $7983 DEFW $0000    ; }
 $7985 DEFW $697D    ; {Screen $4D.
 $7987 DEFW $698D    ;
 $7989 DEFW $0000    ; }
 $798B DEFW $698D    ; {Screen $4E.
 $798D DEFW $699D    ;
 $798F DEFW $750D    ;
 $7991 DEFW $0000    ; }
 $7993 DEFW $699D    ; {Screen $4F.
 $7995 DEFW $69AD    ;
 $7997 DEFW $0000    ; }
 $7999 DEFW $69AD    ; {Screen $50.
 $799B DEFW $69BD    ;
 $799D DEFW $69CD    ;
 $799F DEFW $0000    ; }
 $79A1 DEFW $69BD    ; {Screen $51.
 $79A3 DEFW $69FD    ;
 $79A5 DEFW $0000    ; }
 $79A7 DEFW $69CD    ; {Screen $52.
 $79A9 DEFW $69DD    ;
 $79AB DEFW $0000    ; }
 $79AD DEFW $69DD    ; {Screen $53.
 $79AF DEFW $74FD    ;
 $79B1 DEFW $755D    ;
 $79B3 DEFW $0000    ; }
 $79B5 DEFW $6A1D    ; {Screen $54.
 $79B7 DEFW $6A2D    ;
 $79B9 DEFW $6F0D    ;
 $79BB DEFW $0000    ; }
 $79BD DEFW $6A0D    ; {Screen $55.
 $79BF DEFW $6A1D    ;
 $79C1 DEFW $756D    ;
 $79C3 DEFW $0000    ; }
 $79C5 DEFW $6CED    ; {Screen $56.
 $79C7 DEFW $6DAD    ;
 $79C9 DEFW $6E6D    ;
 $79CB DEFW $6E8D    ;
 $79CD DEFW $70FD    ;
 $79CF DEFW $710D    ;
 $79D1 DEFW $0000    ; }
 $79D3 DEFW $6CED    ; {Screen $57.
 $79D5 DEFW $6CFD    ;
 $79D7 DEFW $6DDD    ;
 $79D9 DEFW $0000    ; }
 $79DB DEFW $6CFD    ; {Screen $58.
 $79DD DEFW $6D0D    ;
 $79DF DEFW $6E0D    ;
 $79E1 DEFW $0000    ; }
 $79E3 DEFW $6D0D    ; {Screen $59.
 $79E5 DEFW $6E3D    ;
 $79E7 DEFW $6E7D    ;
 $79E9 DEFW $0000    ; }
 $79EB DEFW $6D1D    ; {Screen $5A.
 $79ED DEFW $6DAD    ;
 $79EF DEFW $6DBD    ;
 $79F1 DEFW $740D    ;
 $79F3 DEFW $741D    ;
 $79F5 DEFW $0000    ; }
 $79F7 DEFW $6D1D    ; {Screen $5B.
 $79F9 DEFW $6D2D    ;
 $79FB DEFW $6DDD    ;
 $79FD DEFW $6DED    ;
 $79FF DEFW $6EAD    ;
 $7A01 DEFW $71AD    ;
 $7A03 DEFW $0000    ; }
 $7A05 DEFW $6D2D    ; {Screen $5C.
 $7A07 DEFW $6D3D    ;
 $7A09 DEFW $6E0D    ;
 $7A0B DEFW $6E1D    ;
 $7A0D DEFW $6EBD    ;
 $7A0F DEFW $71AD    ;
 $7A11 DEFW $0000    ; }
 $7A13 DEFW $6D3D    ; {Screen $5D.
 $7A15 DEFW $6E3D    ;
 $7A17 DEFW $6E4D    ;
 $7A19 DEFW $716D    ;
 $7A1B DEFW $738D    ;
 $7A1D DEFW $0000    ; }
 $7A1F DEFW $6D4D    ; {Screen $5E.
 $7A21 DEFW $6DBD    ;
 $7A23 DEFW $6DCD    ;
 $7A25 DEFW $0000    ; }
 $7A27 DEFW $6D4D    ; {Screen $5F.
 $7A29 DEFW $6D5D    ;
 $7A2B DEFW $6DED    ;
 $7A2D DEFW $6DFD    ;
 $7A2F DEFW $6ECD    ;
 $7A31 DEFW $0000    ; }
 $7A33 DEFW $6D5D    ; {Screen $60.
 $7A35 DEFW $6D6D    ;
 $7A37 DEFW $6E1D    ;
 $7A39 DEFW $6E2D    ;
 $7A3B DEFW $6EDD    ;
 $7A3D DEFW $0000    ; }
 $7A3F DEFW $6D6D    ; {Screen $61.
 $7A41 DEFW $6E4D    ;
 $7A43 DEFW $6E5D    ;
 $7A45 DEFW $6F8D    ;
 $7A47 DEFW $737D    ;
 $7A49 DEFW $0000    ; }
 $7A4B DEFW $6D7D    ; {Screen $62.
 $7A4D DEFW $6DCD    ;
 $7A4F DEFW $6E9D    ;
 $7A51 DEFW $73BD    ;
 $7A53 DEFW $0000    ; }
 $7A55 DEFW $6D7D    ; {Screen $63.
 $7A57 DEFW $6D8D    ;
 $7A59 DEFW $6DFD    ;
 $7A5B DEFW $716D    ;
 $7A5D DEFW $73BD    ;
 $7A5F DEFW $0000    ; }
 $7A61 DEFW $6D8D    ; {Screen $64.
 $7A63 DEFW $6D9D    ;
 $7A65 DEFW $6E2D    ;
 $7A67 DEFW $73AD    ;
 $7A69 DEFW $0000    ; }
 $7A6B DEFW $6D9D    ; {Screen $65.
 $7A6D DEFW $6E5D    ;
 $7A6F DEFW $6EED    ;
 $7A71 DEFW $6F7D    ;
 $7A73 DEFW $739D    ;
 $7A75 DEFW $0000    ; }
 $7A77 DEFW $6EAD    ; {Screen $66.
 $7A79 DEFW $6EBD    ;
 $7A7B DEFW $6ECD    ;
 $7A7D DEFW $6EDD    ;
 $7A7F DEFW $6FED    ;
 $7A81 DEFW $737D    ;
 $7A83 DEFW $738D    ;
 $7A85 DEFW $739D    ;
 $7A87 DEFW $73AD    ;
 $7A89 DEFW $0000    ; }
 $7A8B DEFW $6E6D    ; {Screen $67.
 $7A8D DEFW $747D    ;
 $7A8F DEFW $0000    ; }
 $7A91 DEFW $6E7D    ; {Screen $68.
 $7A93 DEFW $747D    ;
 $7A95 DEFW $0000    ; }
 $7A97 DEFW $6E8D    ; {Screen $69.
 $7A99 DEFW $74CD    ;
 $7A9B DEFW $0000    ; }
 $7A9D DEFW $6E9D    ; {Screen $6A.
 $7A9F DEFW $74CD    ;
 $7AA1 DEFW $71BD    ;
 $7AA3 DEFW $0000    ; }
 $7AA5 DEFW $6C2D    ; {Screen $6B.
 $7AA7 DEFW $6C3D    ;
 $7AA9 DEFW $752D    ;
 $7AAB DEFW $0000    ; }
 $7AAD DEFW $6C3D    ; {Screen $6C.
 $7AAF DEFW $6C4D    ;
 $7AB1 DEFW $6FBD    ;
 $7AB3 DEFW $74DD    ;
 $7AB5 DEFW $0000    ; }
 $7AB7 DEFW $6C5D    ; {Screen $6D.
 $7AB9 DEFW $6C6D    ;
 $7ABB DEFW $752D    ;
 $7ABD DEFW $72FD    ;
 $7ABF DEFW $719D    ;
 $7AC1 DEFW $0000    ; }
 $7AC3 DEFW $6C6D    ; {Screen $6E.
 $7AC5 DEFW $6C7D    ;
 $7AC7 DEFW $6FCD    ;
 $7AC9 DEFW $74DD    ;
 $7ACB DEFW $72ED    ;
 $7ACD DEFW $0000    ; }
 $7ACF DEFW $6C8D    ; {Screen $6F.
 $7AD1 DEFW $6C9D    ;
 $7AD3 DEFW $727D    ;
 $7AD5 DEFW $0000    ; }
 $7AD7 DEFW $6C9D    ; {Screen $70.
 $7AD9 DEFW $6CAD    ;
 $7ADB DEFW $73CD    ;
 $7ADD DEFW $73DD    ;
 $7ADF DEFW $0000    ; }
 $7AE1 DEFW $6CAD    ; {Screen $71.
 $7AE3 DEFW $6CBD    ;
 $7AE5 DEFW $0000    ; }
 $7AE7 DEFW $6CBD    ; {Screen $72.
 $7AE9 DEFW $6CCD    ;
 $7AEB DEFW $0000    ; }
 $7AED DEFW $6C1D    ; {Screen $73.
 $7AEF DEFW $6F6D    ;
 $7AF1 DEFW $725D    ;
 $7AF3 DEFW $72ED    ;
 $7AF5 DEFW $0000    ; }
 $7AF7 DEFW $6CDD    ; {Screen $74.
 $7AF9 DEFW $6F6D    ;
 $7AFB DEFW $0000    ; }
 $7AFD DEFW $6A3D    ; {Screen $75.
 $7AFF DEFW $6A4D    ;
 $7B01 DEFW $749D    ;
 $7B03 DEFW $0000    ; }
 $7B05 DEFW $6A4D    ; {Screen $76.
 $7B07 DEFW $6A5D    ;
 $7B09 DEFW $6ACD    ;
 $7B0B DEFW $6FAD    ;
 $7B0D DEFW $749D    ;
 $7B0F DEFW $0000    ; }
 $7B11 DEFW $6A5D    ; {Screen $77.
 $7B13 DEFW $6A6D    ;
 $7B15 DEFW $0000    ; }
 $7B17 DEFW $6A6D    ; {Screen $78.
 $7B19 DEFW $6A7D    ;
 $7B1B DEFW $6FFD    ;
 $7B1D DEFW $0000    ; }
 $7B1F DEFW $6A7D    ; {Screen $79.
 $7B21 DEFW $6A8D    ;
 $7B23 DEFW $0000    ; }
 $7B25 DEFW $6A8D    ; {Screen $7A.
 $7B27 DEFW $6A9D    ;
 $7B29 DEFW $6ADD    ;
 $7B2B DEFW $718D    ;
 $7B2D DEFW $711D    ;
 $7B2F DEFW $712D    ;
 $7B31 DEFW $0000    ; }
 $7B33 DEFW $6A9D    ; {Screen $7B.
 $7B35 DEFW $6AAD    ;
 $7B37 DEFW $0000    ; }
 $7B39 DEFW $6AAD    ; {Screen $7C.
 $7B3B DEFW $6ABD    ;
 $7B3D DEFW $711D    ;
 $7B3F DEFW $712D    ;
 $7B41 DEFW $0000    ; }
 $7B43 DEFW $6ABD    ; {Screen $7D.
 $7B45 DEFW $6ACD    ;
 $7B47 DEFW $71CD    ;
 $7B49 DEFW $71DD    ;
 $7B4B DEFW $0000    ; }
 $7B4D DEFW $6ADD    ; {Screen $7E.
 $7B4F DEFW $6AED    ;
 $7B51 DEFW $742D    ;
 $7B53 DEFW $743D    ;
 $7B55 DEFW $0000    ; }
 $7B57 DEFW $6B0D    ; {Screen $7F.
 $7B59 DEFW $6B3D    ;
 $7B5B DEFW $713D    ;
 $7B5D DEFW $714D    ;
 $7B5F DEFW $0000    ; }
 $7B61 DEFW $6B0D    ; {Screen $80.
 $7B63 DEFW $6B1D    ;
 $7B65 DEFW $0000    ; }
 $7B67 DEFW $6B2D    ; {Screen $81.
 $7B69 DEFW $6B3D    ;
 $7B6B DEFW $718D    ;
 $7B6D DEFW $0000    ; }
 $7B6F DEFW $6B1D    ; {Screen $82.
 $7B71 DEFW $6B2D    ;
 $7B73 DEFW $6B4D    ;
 $7B75 DEFW $735D    ;
 $7B77 DEFW $736D    ;
 $7B79 DEFW $0000    ; }
 $7B7B DEFW $6B9D    ; {Screen $83.
 $7B7D DEFW $6BCD    ;
 $7B7F DEFW $0000    ; }
 $7B81 DEFW $6B9D    ; {Screen $84.
 $7B83 DEFW $6BAD    ;
 $7B85 DEFW $6BDD    ;
 $7B87 DEFW $6FAD    ;
 $7B89 DEFW $0000    ; }
 $7B8B DEFW $6BBD    ; {Screen $85.
 $7B8D DEFW $6BCD    ;
 $7B8F DEFW $0000    ; }
 $7B91 DEFW $6BAD    ; {Screen $86.
 $7B93 DEFW $6BBD    ;
 $7B95 DEFW $0000    ; }
 $7B97 DEFW $6B4D    ; {Screen $87.
 $7B99 DEFW $6B5D    ;
 $7B9B DEFW $6B6D    ;
 $7B9D DEFW $733D    ;
 $7B9F DEFW $734D    ;
 $7BA1 DEFW $0000    ; }
 $7BA3 DEFW $6AFD    ; {Screen $88.
 $7BA5 DEFW $6B5D    ;
 $7BA7 DEFW $717D    ;
 $7BA9 DEFW $70BD    ;
 $7BAB DEFW $70CD    ;
 $7BAD DEFW $0000    ; }
 $7BAF DEFW $6BDD    ; {Screen $89.
 $7BB1 DEFW $6BED    ;
 $7BB3 DEFW $6BFD    ;
 $7BB5 DEFW $733D    ;
 $7BB7 DEFW $734D    ;
 $7BB9 DEFW $0000    ; }
 $7BBB DEFW $6BFD    ; {Screen $8A.
 $7BBD DEFW $6C0D    ;
 $7BBF DEFW $6FFD    ;
 $7BC1 DEFW $753D    ;
 $7BC3 DEFW $70BD    ;
 $7BC5 DEFW $70CD    ;
 $7BC7 DEFW $0000    ; }
 $7BC9 DEFW $6B6D    ; {Screen $8B.
 $7BCB DEFW $6B7D    ;
 $7BCD DEFW $6FBD    ;
 $7BCF DEFW $721D    ;
 $7BD1 DEFW $0000    ; }
 $7BD3 DEFW $6B7D    ; {Screen $8C.
 $7BD5 DEFW $6B8D    ;
 $7BD7 DEFW $720D    ;
 $7BD9 DEFW $721D    ;
 $7BDB DEFW $0000    ; }
 $7BDD DEFW $6B8D    ; {Screen $8D.
 $7BDF DEFW $6BED    ;
 $7BE1 DEFW $6F9D    ;
 $7BE3 DEFW $6FCD    ;
 $7BE5 DEFW $720D    ;
 $7BE7 DEFW $748D    ;
 $7BE9 DEFW $0000    ; }
 $7BEB DEFW $754D    ; {Screen $8E.
 $7BED DEFW $0000    ; }
 $7BEF DEFW $6EFD    ; {Screen $8F.
 $7BF1 DEFW $746D    ;
 $7BF3 DEFW $755D    ;
 $7BF5 DEFW $0000    ; }
 $7BF7 DEFW $6F0D    ; {Screen $90.
 $7BF9 DEFW $6F1D    ;
 $7BFB DEFW $0000    ; }
 $7BFD DEFW $6F1D    ; {Screen $91.
 $7BFF DEFW $6F2D    ;
 $7C01 DEFW $702D    ;
 $7C03 DEFW $0000    ; }
 $7C05 DEFW $6F2D    ; {Screen $92.
 $7C07 DEFW $6F3D    ;
 $7C09 DEFW $0000    ; }
 $7C0B DEFW $6F3D    ; {Screen $93.
 $7C0D DEFW $6F4D    ;
 $7C0F DEFW $0000    ; }
 $7C11 DEFW $6F4D    ; {Screen $94.
 $7C13 DEFW $6F5D    ;
 $7C15 DEFW $0000    ; }
 $7C17 DEFW $0000    ; Terminator.

; Initialise Game
;
; Initialises the game.
; .
; Used by the routine at #R$6000.
@label=InitialiseGame
c$7C19 LD HL,$5E00   ; #REGhl=address of #R$5E00.
 $7C1C LD B,$10      ; #REGb=$10; size (in bytes) of ???
@label=Clear???Loop
*$7C1E LD (HL),$00   ; Clear the ???
 $7C20 INC HL        ; #REGhl=next address of ???
 $7C21 DJNZ $7C1E    ; Loop until finished.
 $7C23 LD HL,$BE4C   ; {Set #R$5E01 to 256 bytes lower than #R$BF4C.
 $7C26 LD ($5E01),HL ; }

; Game Selection Menu
;
; The game selection menu.
; .
; #TABLE
; { 1 KEYBOARD }
; { 2 KEMPSTON JOYSTICK }
; { 3 CURSOR   JOYSTICK }
; { 4 KNIGHT }
; { 5 WIZARD }
; { 6 SERF }
; { 0 START GAME }
; TABLE#
; .
; This entry point is used by the routine at #R$8C35.
@label=GameSelectionMenu
c$7C29 CALL $80AA    ; Initialise the screen.
 $7C2C CALL $A311    ; Display the game selection menu graphics.
@label=GameSelectionMenuLoop
*$7C2F CALL $7CAF    ; Display the game selection menu text.
 $7C32 LD A,$F7      ; #REGa=$F7 (keys=1, 2, 3, 4, 5).
 $7C34 OUT ($FD),A   ; {Read keyboard port.
 $7C36 IN A,($FE)    ; }
 $7C38 CPL           ; Invert all bits in #REGa. Bits are set to 1 for any key
                     ; that is pressed and 0 for any key that is not pressed.
 $7C39 LD E,A        ; #REGe=#REGa; keys pressed.
 $7C3A LD A,($5E00)  ; #REGa=contents of #R$5E00.
@label=CheckKey1Press
 $7C3D BIT 0,E       ; {If bit0 is not set, key 1 is not pressed check for key
 $7C3F JR Z,$7C43    ; 2 press.}
 $7C41 AND $F9       ; Key 1 is pressed; keyboard selected. Reset bit1 & bit2
                     ; in #REGa.
@label=CheckKey2Press
*$7C43 BIT 1,E       ; {If bit1 is not set, key 2 is not pressed check for key
 $7C45 JR Z,$7C4B    ; 3 press.}
 $7C47 AND $F9       ; Key 2 is pressed; Kempston joystick selected. Reset bit1
                     ; & bit2 in #REGa.
 $7C49 OR $02        ; Set bit1 in #REGa; Kempston joystick.
@label=CheckKey3Press
*$7C4B BIT 2,E       ; {If bit2 is not set, key 3 is not pressed check for key
 $7C4D JR Z,$7C53    ; 4 press.}
 $7C4F AND $F9       ; Key 3 is pressed; cursor joystick selected. Reset bit1 &
                     ; bit2 in #REGa.
 $7C51 OR $04        ; Set bit2 in #REGa; cursor joystick.
@label=CheckKey4Press
*$7C53 BIT 3,E       ; {If bit3 is not set, key 4 is not pressed check for key
 $7C55 JR Z,$7C59    ; 5 press.}
 $7C57 AND $E7       ; Key 4 is pressed; knight selected. Reset bit3 & bit4 in
                     ; #REGa.
@label=CheckKey5Press
*$7C59 BIT 4,E       ; {If bit4 is not set, key 5 is not pressed check for
 $7C5B JR Z,$7C61    ; other key pressed.}
 $7C5D AND $E7       ; Key 5 is pressed; wizard selected. Reset bit3 & bit4 in
                     ; #REGa.
 $7C5F OR $08        ; Set bit3 in #REGa; wizard.
@label=CheckOtherKeyPresses
*$7C61 LD D,A        ; #REGd=#REGa; the game controller selections.
 $7C62 LD A,$EF      ; #REGa=$EF (keys=0, 9, 8, 7, 6).
 $7C64 OUT ($FD),A   ; {Read keyboard port.
 $7C66 IN A,($FE)    ; }
 $7C68 CPL           ; Invert all bits in #REGa. Bits are set to 1 for any key
                     ; that is pressed and 0 for any key that is not pressed.
 $7C69 LD E,A        ; #REGe=#REGa; keys pressed.
 $7C6A LD A,D        ; #REGa=#REGd; the game controller selections.
@label=CheckKey6Press
 $7C6B BIT 4,E       ; {If bit4 is not set, key 6 is not pressed check for key
 $7C6D JR Z,$7C73    ; 0 press.}
 $7C6F AND $E7       ; Key 6 is pressed; serf selected. Reset bit3 & bit4 in
                     ; #REGa.
 $7C71 OR $10        ; Set bit4 in #REGa; serf.
@label=CheckKey0Press
*$7C73 LD ($5E00),A  ; Set contents of #R$5E00 to #REGa.
 $7C76 LD C,A        ; #REGc=#REGa; game selection flags.
 $7C77 BIT 0,E       ; {If bit0 is set, key 0 is pressed, start game.
 $7C79 JP NZ,$7D9A   ; }
 $7C7C LD HL,$7CEA   ; #REGhl=address of #R$7CEA.
 $7C7F LD B,$03      ; #REGb=$03; number of game controller menu options.
 $7C81 LD A,C        ; #REGa=#REGc; game selection flags.
 $7C82 CALL $7C90    ; Flash the selected game controller menu option.
 $7C85 LD B,$03      ; #REGb=$03; number of character menu options.
 $7C87 LD A,C        ; #REGa=#REGc; game selection flags.
 $7C88 RRCA          ; {Right rotate the character bits into bit1-2 in #REGa.
 $7C89 RRCA          ; }
 $7C8A CALL $7C90    ; Flash the selected character menu option.
 $7C8D JP $7C2F      ; Loop.

; Flash Selected Menu Option
;
; Flash the selected game selection menu option.
; .
; Used by the routine at #R$7C29.
; .
; #TABLE(default)
; { I | #REGa  | The set bit in bit1-2 specifies the selected menu option to
; flash. }
; { I | #REGb  | The number of menu options. }
; { I | #REGhl | Address in #R$7CEA of the 1st (or 4th) menu option colour
; attribute. }
; TABLE#
@label=FlashSelectedMenuOption
c$7C90 RRCA          ; Right rotate bit1-2 into bit0-1 in #REGa
@label=FlashSelectedMenuOptionLoop
*$7C91 AND $03       ; $00<=#REGa<=$03.
 $7C93 JR Z,$7C9C    ; If #REGa=$00 then flash the menu option.
 $7C95 CALL $7CA4    ; Stop flashing the menu option.
@label=CheckNextMenuOption
*$7C98 DEC A         ; #REGa=next menu option.
 $7C99 DJNZ $7C91    ; Loop until finished.
 $7C9B RET           ;
@label=FlashMenuOption
*$7C9C CALL $7CAB    ; Start flashing the menu option.
 $7C9F JR $7C98      ; Check the next menu option.

i$7CA1

; Stop Flashing Menu Option
;
; Resets the flash attribute of the specified menu option.
; .
; Used by the routine at #R$7C90.
; .
; #TABLE(default)
; { I | #REGhl | Address in #R$7CEA of the menu option colour attribute to
; reset. }
; { O | #REGhl | Address in #R$7CEA of the next menu option's colour attribute.
; }
; TABLE#
@label=StopFlashingMenuOption
c$7CA4 RES 7,(HL)    ; Reset the flash attribute of the menu option colour
                     ; attribute in #REGhl.
 $7CA6 INC HL        ; #REGhl=address of the next menu option colour attribute.
 $7CA7 RET           ;

i$7CA8

; Start Flashing Menu Option
;
; Sets the flash attribute of the specified menu option.
; .
; Used by the routine at #R$7C90.
; .
; #TABLE(default)
; { I | #REGhl | Address in #R$7CEA of the menu option colour attribute to set.
; }
; { O | #REGhl | Address in #R$7CEA of the next menu option's colour attribute.
; }
; TABLE#
@label=StartFlashingMenuOption
c$7CAB SET 7,(HL)    ; Set the flash attribute of the menu option colour
                     ; attribute in #REGhl.
 $7CAD INC HL        ; #REGhl=address of the next menu option colour attribute.
 $7CAE RET           ;

; Display Game Selection Menu Text
;
; Displays the game selection menu text.
; .
; #TABLE
; { 1 KEYBOARD }
; { 2 KEMPSTON JOYSTICK }
; { 3 CURSOR   JOYSTICK }
; { 4 KNIGHT }
; { 5 WIZARD }
; { 6 SERF }
; { 0 START GAME }
; TABLE#
; .
; Used by the routine at #R$7C29.
@label=DisplayGameSelectionMenuText
c$7CAF LD HL,$BE4C   ; {Set #R$5E01 to 256 bytes lower than #R$BF4C.
 $7CB2 LD ($5E01),HL ; }
 $7CB5 LD DE,$7CEA   ; {#REGde'=address of #R$7CEA.
 $7CB8 EXX           ; }
 $7CB9 LD HL,$7CF1   ; #REGhl=address of #R$7CF1.
 $7CBC LD DE,$7CF8   ; #REGde=address of #R$7CF8.
 $7CBF LD B,$07      ; #REGb=$07; there are 7 game selection menu text options.
; Displays a game selection menu text option.
; .
; #TABLE(default)
; { I | #REGb   | The number of game selection menu text options to display. }
; { I | #REGde  | Address of the game selection menu text option's text. }
; { I | #REGde' | Address of the game selection menu text option's colour
; attribute. }
; { I | #REGhl  | Address of the game selection menu text option's Y
; coordinate. }
; TABLE#
@label=DisplayGameSelectionMenuTextLoop
*$7CC1 EXX           ; #REGde=address of the game selection menu text option's
                     ; colour attribute. #REGde'=address of the game selection
                     ; menu text option's text. #REGhl'=address of the game
                     ; selection menu text option's Y coordinate.
 $7CC2 LD A,(DE)     ; #REGa=colour attribute of the game selection menu text
                     ; option.
 $7CC3 LD ($5E22),A  ; Set #R$5E22 to #REGa.
 $7CC6 INC DE        ; #REGde=next game selection menu text option's colour
                     ; attribute.
 $7CC7 EXX           ; #REGde=address of the game selection menu text option's
                     ; text. #REGde'=next game selection menu text option's
                     ; colour attribute. #REGhl=address of the game selection
                     ; menu text option's Y coordinate.
 $7CC8 PUSH BC       ; Store #REGb; number of game selection menu text options
                     ; to display.
 $7CC9 LD A,(HL)     ; #REGa=Y coordinate of the game selection menu text
                     ; option to be displayed.
 $7CCA INC HL        ; #REGhl=adddress of the next game selection menu text
                     ; option's Y coordinate.
 $7CCB PUSH HL       ; Store #REGhl.
 $7CCC LD H,A        ; #REGh=Y coordinate of the game selection menu text
                     ; option to be displayed.
 $7CCD LD L,$58      ; #REGl=$58; X coordinate of the game selection menu text
                     ; option to be displayed.
 $7CCF CALL $7D8A    ; Display the game selection menu text option.
 $7CD2 EXX           ; #REGde=address of the game selection menu text option's
                     ; text. #REGde'=next game selection menu text option's
                     ; colour attribute.
 $7CD3 POP HL        ; #REGhl=adddress of the next game selection menu text
                     ; option's Y coordinate
 $7CD4 POP BC        ; Restore #REGb; number of game selection menu text
                     ; options to display.
 $7CD5 INC DE        ; #REGde=address of the next game selection menu text
                     ; option's text.
 $7CD6 DJNZ $7CC1    ; Loop until all the game selection menu text options are
                     ; displayed.
; Display the copyright text.
@label=DisplayCopyrightText
 $7CD8 LD HL,$B800   ; #REGhl=screen coordinates to display the "copyright"
                     ; text at (Y=184,X=00).
 $7CDB LD DE,$7D51   ; #REGde=address of #R$7D51.
 $7CDE CALL $A1F3    ; Display the "copyright" text.
; Display the game selection menu title.
@label=DisplayGameSelectionMenuTitle
 $7CE1 LD HL,$0020   ; #REGhl=screen coordinates to display the "game selection
                     ; menu" title at (Y=00,X=32).
 $7CE4 LD DE,$7D72   ; #REGde=address of #R$7D72.
 $7CE7 JP $A1F3      ; Display the "game selection menu title".

; Game Selection Menu Colour Attributes
;
; Holds the colour attributes of the game selection menu options.
; .
; #TABLE
; { 1 KEYBOARD }
; { 2 KEMPSTON JOYSTICK }
; { 3 CURSOR   JOYSTICK }
; { 4 KNIGHT }
; { 5 WIZARD }
; { 6 SERF }
; { 0 START GAME }
; TABLE#
@label=GameSelectionMenuColourAttributes
b$7CEA DEFB $45,$45,$45,$45,$45,$45,$47

; Game Selection Menu Y Coordinates
;
; Holds the Y coordinates of the game selection menu options.
; .
; #TABLE
; { 1 KEYBOARD }
; { 2 KEMPSTON JOYSTICK }
; { 3 CURSOR   JOYSTICK }
; { 4 KNIGHT }
; { 5 WIZARD }
; { 6 SERF }
; { 0 START GAME }
; TABLE#
@label=GameSelectionMenuYCoordinates
b$7CF1 DEFB $10,$28,$40,$58,$70,$88,$A0

; Keboard Text
@label=KeyboardText
t$7CF8 DEFM "1  KEYBOAR" ; Message text.
 $7D02 DEFB $C4          ; Message terminator (D).

; Kempston Joystick Text
@label=KempstonJoystickText
t$7D03 DEFM "2  KEMPSTON JOYSTIC" ; Message text.
 $7D16 DEFB $CB                   ; Message terminator (K).

; Cursor Joystick Text
@label=CursorJoystickText
t$7D17 DEFM "3  CURSOR   JOYSTIC" ; Message text.
 $7D2A DEFB $CB                   ; Message terminator (K).

; Knight Text
@label=KnightText
t$7D2B DEFM "4  KNIGH" ; Message text.
 $7D33 DEFB $D4        ; Message terminator (T).

; Wizard Text
@label=WizardText
t$7D34 DEFM "5  WIZAR" ; Message text.
 $7D3C DEFB $C4        ; Message terminator (D).

; Serf Text
@label=SerfText
t$7D3D DEFM "6  SER" ; Message text.
 $7D43 DEFB $C6      ; Message terminator (F).

; Start Game Text
@label=StartGameText
t$7D44 DEFM "0  START GAM" ; Message text.
 $7D50 DEFB $C5            ; Message terminator (E).

; Copyright Text
@label=CopyrightText
t$7D51 DEFB $47                               ; Colour attribute; bright
                                              ; white/black.
 $7D52 DEFM "%1983 A.C.G. ALL RIGHTS RESERVE" ; Message text.
 $7D71 DEFB $C4                               ; Message terminator (D).

; Game Selection Menu Title
@label=GameSelectionMenuTitle
t$7D72 DEFB $47                      ; Colour attribute; bright white/black.
 $7D73 DEFM "ATICATAC GAME SELECTIO" ; Message text.
 $7D89 DEFB $CE                      ; Message terminator (N).

; Display Game Selection Menu Item
;
; Displays a game selection menu item.
; .
; Used by the routine at #R$7CAF.
; .
; #TABLE(default)
; { I | #REGde | Address of the game selection menu item's text. }
; { I | #REGhl | (Y,X) position of the game selection menu item. }
; TABLE#
@label=DisplayGameSelectionMenuItem
c$7D8A PUSH HL       ; Store #REGhl; (Y,X) position of the game selection menu
                     ; item.
 $7D8B CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $7D8E LD A,($5E22)  ; {#REGa'=contents of #R$5E22.
 $7D91 EX AF,AF'     ; }
 $7D92 EXX           ; #REGde'=address of the game selection menu item's text.
                     ; #REGhl'=screen pixel address.
 $7D93 POP HL        ; Restore #REGhl; (Y,X) position of the game selection
                     ; menu item.
 $7D94 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $7D97 JP $A1FF      ; Display the game selection menu item.

; Start Game
;
; Starts a game.
; .
; Used by the routine at #R$7C29.
@label=StartGame
c$7D9A CALL $80CB    ; Clear the game data.
 $7D9D LD A,$03      ; {Set the current player's lives in #R$5E21 to $03.
 $7D9F LD ($5E21),A  ; }
 $7DA2 LD HL,$EB58   ; {Set the ??? in #R$5E55 to $EB58.
 $7DA5 LD ($5E55),HL ; }
 $7DA8 CALL $80AA    ; Initialise the screen.
 $7DAB CALL $A219    ; Display the status panel.
 $7DAE CALL $A2CE    ; Display the player lives (in the status panel).
 $7DB1 CALL $94B6    ; Set the random ACG key part locations.
 $7DB4 CALL $98D2    ; Set the random coloured key locations.
 $7DB7 CALL $8D61    ; Copy the static data.
 $7DBA CALL $94F5    ; Shut random doors.
 $7DBD CALL $9443    ; Set the initial player sprite.
 $7DC0 JP $9147      ; Display the screen

; Game Loop
;
; The game loop.
; .
; Used by the routines at #R$7E23 and #R$9117.
@label=StartGameLoop
c$7DC3 LD SP,$5E00   ; #REGsp=top of stack (below the start address of the game
                     ; data buffer (address of #R$5E00)).
 $7DC6 EI            ; Enable maskable interrupts (start keyboard scan).
 $7DC7 XOR A         ; {Clear #R$5E25.
 $7DC8 LD ($5E25),A  ; }
 $7DCB LD IX,$EAA8   ; #REGix=address of #R$EAA8; the first non player specific
                     ; sprite.
 $7DCF LD A,($5E14)  ; #REGa=contents of #R$5E14.
 $7DD2 BIT 0,A       ; {If the screen's sprites have been displayed, then start
 $7DD4 JR NZ,$7DDC   ; the game loop.}
 $7DD6 LD IX,$EEE0   ; #REGix=address of #R$EEE0.
 $7DDA JR $7E23      ; Display the current screen's background items.
; #TABLE(default)
; { I | #REGix | Address of the current sprite's data structure. }
; TABLE#
@label=GameLoop
*$7DDC LD A,($5C78)  ; {#REGc=the LSB of FRAMES.
 $7DDF LD C,A        ; }
 $7DE0 LD A,($5E03)  ; #REGa=contents of #R$5E03.
 $7DE3 CP C          ; {If the system frame counter has changed, then process
 $7DE4 CALL NZ,$7EB2 ; the player specific sprites only.}
 $7DE7 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $7DEA CP (IX+$01)   ; Compare the current sprite's screen number in #REGix
                     ; with the player's screen number in #R$EA90.
 $7DED LD HL,$7DF3   ; #REGhl=address of #R$7DF3; the address that the sprite's
                     ; jump routine should return to.
 $7DF0 JP Z,$7E7E    ; If the current sprite's screen number is the same as the
                     ; player's screen number, then the current sprite is on
                     ; the current screen. Lookup and jump to the sprite's jump
                     ; routine.
; #TABLE(default)
; { I | #REGix | Address of the current sprite's data structure. }
; TABLE#
@label=NextNonNastySprite
 $7DF3 LD DE,$0008   ; {#REGix=address of the next sprite data structure.
 $7DF6 ADD IX,DE     ; }
 $7DF8 PUSH IX       ; {#REGhl=address of the next sprite data structure.
 $7DFA POP HL        ; }
 $7DFB LD DE,$EE60   ; #REGde=address of #R$EE60; the first nasty specific
                     ; sprite.
 $7DFE AND A         ; Clear carry flag!
 $7DFF SBC HL,DE     ; Subtract #REGde from #REGhl; we are checking if the next
                     ; sprite data structure is #R$EE60. If it is then all non
                     ; nasty sprites have been processed.
 $7E01 JR C,$7DDC    ; If there is still a non nasty sprite to process, then
                     ; process it.
; This entry point is used by the routine at #R$7E13.
@label=NextNastySprite
*$7E03 LD A,($5C78)  ; {#REGc=the LSB of FRAMES.
 $7E06 LD C,A        ; }
 $7E07 LD A,($5E03)  ; #REGa=contents of #R$5E03.
 $7E0A CP C          ; {If the system frame counter has changed, then process
 $7E0B CALL NZ,$7EB2 ; the player specific sprites only.}
 $7E0E LD HL,$7E13   ; #REGhl=address of #R$7E13; the address that the sprite's
                     ; jump routine should return to
 $7E11 JR $7E7E      ; Lookup and jump to the sprite's jump routine.

; Nasty Sprite Jump Routine Complete
;
; Return point of a call to a nasty sprite jump routine.
; .
; #TABLE(default)
; { I | #REGix | Address of the current nasty sprite's data structure. }
; TABLE#
@label=NastySpriteJumpRoutineComplete
c$7E13 LD DE,$0010   ; {#REGix=address of the next nasty sprite data structure.
 $7E16 ADD IX,DE     ; }
 $7E18 PUSH IX       ; {#REGhl=address of the next nasty sprite data structure.
 $7E1A POP HL        ; }
 $7E1B LD DE,$EEE0   ; #REGde=address of #R$EEE0.
 $7E1E AND A         ; Clear carry flag!
 $7E1F SBC HL,DE     ; Subtract #REGde from #REGhl; we are checking if the next
                     ; sprite data structure is #R$EEE0. If it is then all
                     ; nasty sprites have been processed.
 $7E21 JR C,$7E03    ; If there is still a nasty sprite to process, then
                     ; process it.

; Display Current Screen Background Items
;
; Displays the current screen's background items.
; .
; This entry point is used by the routine at #R$7DC3.
@label=DisplayScreenBackgroundItems
c$7E23 LD A,($EA91)  ; {#REGhl=player's screen number in #R$EA90.
 $7E26 LD L,A        ;
 $7E27 LD H,$00      ; }
 $7E29 ADD HL,HL     ; #REGhl=offset in #R$757D of the address of the screen in
                     ; #R$76A9.
 $7E2A LD BC,$757D   ; #REGbc=address of #R$757D.
 $7E2D ADD HL,BC     ; #REGhl=address in #R$757D of the address of the screen
                     ; in #R$76A9.
 $7E2E LD A,(HL)     ; #REGa=LSB of the address of the current screen's first
                     ; background item in #R$76A9.
 $7E2F INC HL        ; {#REGh=MSB of the address of the current screen's first
 $7E30 LD H,(HL)     ; background item in #R$76A9.}
 $7E31 LD L,A        ; #REGhl=address of the current screen's first background
                     ; item in #R$76A9.
 $7E32 LD ($5E1B),HL ; Set the contents of #R$5E1B to #REGhl.
@label=DisplayScreenBackgroundItemsLoop
 $7E35 LD HL,($5E1B) ; #REGhl=contents of #R$5E1B.
 $7E38 LD A,(HL)     ; #REGa=LSB of the address of the current background item
                     ; in #R$645D.
 $7E39 INC HL        ; {#REGhl=address of the current screen's next background
 $7E3A INC HL        ; item in #R$76A9}
 $7E3B LD ($5E1B),HL ; Set the contents of #R$5E1B to #REGhl.
 $7E3E DEC HL        ; {#REGhl=address of the current screen's current
 $7E3F LD H,(HL)     ; background item in #R$645D.
 $7E40 LD L,A        ; }
 $7E41 OR H          ; {If the address of the current screen's current
 $7E42 JR NZ,$7E93   ; background item is not zero, then display the current
                     ; screen's current background item.}
 $7E44 LD HL,($5E12) ; {Increment #R$5E12.
 $7E47 INC HL        ;
 $7E48 LD ($5E12),HL ; }
 $7E4B LD HL,$5E14   ; #REGhl=address of #R$5E14.
 $7E4E BIT 0,(HL)    ; {If the current screen's sprites have been displayed,
 $7E50 JR NZ,$7E55   ; then skip.}
 $7E52 CALL $9291    ; Display the current screen's sprites.
@label=SkipDisplayScreenSprites
*$7E55 LD HL,$5E14   ; #REGhl=address of #R$5E14.
 $7E58 SET 0,(HL)    ; Set the current screen's sprites displayed flag in
                     ; #R$5E14.
 $7E5A LD HL,($5E05) ; #REGhl=address of #R$5E05.
 $7E5D LD DE,($5C78) ; #REGde=contents of #R$5C78 and #R$5C79.
 $7E61 ADD HL,DE     ; #REGhl=random value.
 $7E62 LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $7E65 ADD A,L       ; {#REGhl=random value.
 $7E66 LD L,A        ; }
 $7E67 LD ($5E05),HL ; Set the random value in #R$5E05 to #REGhl.
 $7E6A CALL $938B    ; Check for a pick up key press.
 $7E6D CALL $9489    ; Check for pause game.
 $7E70 CALL $9924    ;
 $7E73 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $7E76 CP $8E        ; {If the screen number is $8E, then the player has
 $7E78 JP Z,$96EC    ; completed the game.}
 $7E7B JP $7DC3      ; Start the game loop.

; Lookup And Jump To Jump Routine
;
; Looks up the specified sprite's jump routine and jumps to it.
; .
; Used by the routine at #R$7DC3.
; .
; #TABLE(default)
; { I | #REGhl | Address of the routine that the sprite's jump routine should
; return to. }
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
@label=LookupAndJumpToJumpRoutine
c$7E7E PUSH HL       ; Store #REGhl; when the jump routine completes it will
                     ; return to the address in #REGhl.
; This entry point is used by the routine at #R$7EB2.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
@label=LookupAndJumpToJumpRoutine1
*$7E7F LD HL,$7EE6   ; #REGhl=address of #R$7EE6.
; This entry point is used by the routine at #R$7E93.
; .
; #TABLE(default)
; { I | #REGhl | Start address of the jump routine table. }
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
@label=LookupAndJumpToJumpRoutine2
*$7E82 LD C,(IX+$00) ; #REGc=jump table index of the sprite data in #REGix.
; This entry point is used by the routine at #R$9962.
; .
; #TABLE(default)
; { I | #REGc  | Jump table index in the jump routine table. }
; { I | #REGhl | Start address of the jump routine table. }
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
@label=LookupAndJumpToJumpRoutine3
*$7E85 LD B,$00      ; #REGb=$00.
 $7E87 SLA C         ; {#REGbc=calculated offset in the jump routine table.
 $7E89 RL B          ; }
 $7E8B ADD HL,BC     ; #REGhl=address in the jump routine table of the sprite's
                     ; jump routine.
 $7E8C LD A,(HL)     ; #REGa=LSB of the address of the sprite's jump routine in
                     ; the jump routine table.
 $7E8D INC HL        ; {#REGh=MSB of the address of the sprite's jump routine
 $7E8E LD H,(HL)     ; in the jump routine table.}
 $7E8F LD L,A        ; #REGhl=address of the sprite's jump routine in the
                     ; sprite jump routine table.
 $7E90 JP $5CB0      ; Jump to the jump routine.

; Display Current Screen Background Item
;
; Displays the current screen's specified background item.
; .
; Used by the routine at #R$7E23.
; .
; #TABLE(default)
; { I | #REGhl | Address of the background item in #R$645D. }
; TABLE#
@label=DisplayCurrentScreenBackgroundItem
c$7E93 LD BC,$7E35   ; #REGbc=address of #R$7E35.
 $7E96 PUSH BC       ; Store #REGbc; the address that the background item's
                     ; jump routine should return to.
 $7E97 LD BC,$757D   ; #REGbc=address of #R$757D.
 $7E9A AND A         ; Clear carry flag!
 $7E9B SBC HL,BC     ; #REGhl=calculated address of the background item in
                     ; #R$EEE0.
 $7E9D PUSH HL       ; {#REGix=address of the background item in #R$EEE0.
 $7E9E POP IX        ; }
 $7EA0 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $7EA3 CP (IX+$01)   ; Compare the background item's screen number in #REGix
                     ; with the player's screen number in #R$EA90.
 $7EA6 JR Z,$7EAD    ; If the background item's screen number is the same as
                     ; the player's screen number, then the background item is
                     ; on the current screen. Display it.
 $7EA8 LD BC,$0008   ; #REGbc=$0008; size (in bytes) of a background item data
                     ; structure.
 $7EAB ADD IX,BC     ; #REGix=next background item.
@label=DisplayCurrentScreenBackgroundItem1
*$7EAD LD HL,$802A   ; #REGhl=address of #R$802A.
 $7EB0 JR $7E82      ; Lookup and jump to the sprite's jump routine.

; Processes Player Sprites Only
;
; Stores the current sprite, and enables processing of the player specific
; sprites only.
; .
; Used by the routine at #R$7DC3.
; .
; #TABLE(default)
; { I | #REGix | Address of the current sprite's data structure. }
; { O | #REGix | Address of #R$EA90. }
; TABLE#
@label=ProcessPlayerSpritesOnly
c$7EB2 DI            ; Disable maskable interrupts (stop keyboard scan).
 $7EB3 PUSH IX       ; Store #REGix; address of the current sprite's data
                     ; structure.
 $7EB5 LD A,$01      ; {Set #R$5E04 to $01; only processing player sprites.
 $7EB7 LD ($5E04),A  ; }
 $7EBA LD IX,$EA90   ; #REGix=address of #R$EA90; the first player specific
                     ; sprite.
; This entry point is used by the routine at #R$7EC5.
@label=LookupAndJumpToPlayerSpriteRoutine
*$7EBE LD HL,$7EC5   ; #REGhl=address of #R$7EC5.
 $7EC1 PUSH HL       ; Store #REGhl; when the jump routine completes it will
                     ; return to the address in #REGhl.
 $7EC2 JP $7E7F      ; Lookup and jump to the player sprite's jump routine.

; Player Sprite Jump Routine Complete
;
; Return point of a call to a player specific sprite jump routine.
; .
; #TABLE(default)
; { I | #REGix | Address of the current player specific sprite's data
; structure. }
; { O | #REGix | Address of the current sprite's data structure (the sprite
; being processed before enabling the processing of player specific sprites
; only). }
; TABLE#
@label=PlayerSpriteJumpRoutineComplete
c$7EC5 LD DE,$0008   ; {#REGix=address of the next sprite data structure.
 $7EC8 ADD IX,DE     ; }
 $7ECA PUSH IX       ; {#REGhl=address of the next sprite data structure.
 $7ECC POP HL        ; }
 $7ECD LD DE,$EAA8   ; #REGde=address of #R$EAA8; the first non player specific
                     ; sprite.
 $7ED0 AND A         ; Clear carry flag.
 $7ED1 SBC HL,DE     ; Subtract #REGde from #REGhl; we are checking if the next
                     ; sprite data structure is #R$EAA8. If it is then all
                     ; player specific sprites have been processed.
 $7ED3 JR C,$7EBE    ; If there is still a player specific sprite to process,
                     ; then process it.
 $7ED5 CALL $95DA    ; Check the time.
 $7ED8 LD A,($5C78)  ; {Set #R$5E03 to the LSB of FRAMES.
 $7EDB LD ($5E03),A  ; }
 $7EDE XOR A         ; {Clear #R$5E04; not only processing player sprites.
 $7EDF LD ($5E04),A  ; }
 $7EE2 POP IX        ; Restore #REGix; address of the current sprite's data
                     ; structure (the sprite being processed before enabling
                     ; the processing of player specific sprites only.
 $7EE4 EI            ; Enable maskable interrupts (start keyboard scan).
 $7EE5 RET           ;

; Sprite Jump Routine Table
;
; Order is important, as the same index value used to calculate the required
; jump routine is used in #R$A4BE.
@label=SpriteJumpRoutineTable
w$7EE6 DEFW $807A    ; $00.
 $7EE8 DEFW $8E26    ; $01 #R$AE0C.
 $7EEA DEFW $8E26    ; $02 #R$AE31.
 $7EEC DEFW $8E26    ; $03 #R$AE56.
 $7EEE DEFW $8E26    ; $04 #R$AE31.
 $7EF0 DEFW $8E26    ; $05 #R$AE7B.
 $7EF2 DEFW $8E26    ; $06 #R$AEA0.
 $7EF4 DEFW $8E26    ; $07 #R$AEC5.
 $7EF6 DEFW $8E26    ; $08 #R$AEA0.
 $7EF8 DEFW $8E26    ; $09 #R$AD9D.
 $7EFA DEFW $8E26    ; $0A #R$ADC2.
 $7EFC DEFW $8E26    ; $0B #R$ADE7.
 $7EFE DEFW $8E26    ; $0C #R$ADC2.
 $7F00 DEFW $8E26    ; $0D #R$AD2E.
 $7F02 DEFW $8E26    ; $0E #R$AD53.
 $7F04 DEFW $8E26    ; $0F #R$AD78.
 $7F06 DEFW $8E26    ; $10 #R$AD53.
 $7F08 DEFW $80D2    ; $11 #R$B87C.
 $7F0A DEFW $80D2    ; $12 #R$B8A5.
 $7F0C DEFW $80D2    ; $13 #R$B8CE.
 $7F0E DEFW $80D2    ; $14 #R$B8A5.
 $7F10 DEFW $80D2    ; $15 #R$B8F7.
 $7F12 DEFW $80D2    ; $16 #R$B920.
 $7F14 DEFW $80D2    ; $17 #R$B949.
 $7F16 DEFW $80D2    ; $18 #R$B920.
 $7F18 DEFW $80D2    ; $19 #R$B801.
 $7F1A DEFW $80D2    ; $1A #R$B82A.
 $7F1C DEFW $80D2    ; $1B #R$B853.
 $7F1E DEFW $80D2    ; $1C #R$B82A.
 $7F20 DEFW $80D2    ; $1D #R$B786.
 $7F22 DEFW $80D2    ; $1E #R$B7AF.
 $7F24 DEFW $80D2    ; $1F #R$B7D8.
 $7F26 DEFW $80D2    ; $20 #R$B7AF.
 $7F28 DEFW $8DC4    ; $21 #R$B614.
 $7F2A DEFW $8DC4    ; $22 #R$B639.
 $7F2C DEFW $8DC4    ; $23 #R$B65E.
 $7F2E DEFW $8DC4    ; $24 #R$B639.
 $7F30 DEFW $8DC4    ; $25 #R$B683.
 $7F32 DEFW $8DC4    ; $26 #R$B6A8.
 $7F34 DEFW $8DC4    ; $27 #R$B6CD.
 $7F36 DEFW $8DC4    ; $28 #R$B6A8.
 $7F38 DEFW $8DC4    ; $29 #R$B5A5.
 $7F3A DEFW $8DC4    ; $2A #R$B5CA.
 $7F3C DEFW $8DC4    ; $2B #R$B5EF.
 $7F3E DEFW $8DC4    ; $2C #R$B5CA.
 $7F40 DEFW $8DC4    ; $2D #R$B536.
 $7F42 DEFW $8DC4    ; $2E #R$B55B.
 $7F44 DEFW $8DC4    ; $2F #R$B580.
 $7F46 DEFW $8DC4    ; $30 #R$B55B.
 $7F48 DEFW $93E3    ; $31 #R$AEEC.
 $7F4A DEFW $807A    ; $32 #R$BBDC.
 $7F4C DEFW $807A    ; $33 #R$BC05.
 $7F4E DEFW $81F0    ; $34 #R$BB60.
 $7F50 DEFW $81F0    ; $35 #R$BB7F.
 $7F52 DEFW $81F0    ; $36 #R$BB7F.
 $7F54 DEFW $81F0    ; $37 #R$BBBD.
 $7F56 DEFW $82F1    ; $38 #R$BA16.
 $7F58 DEFW $82F1    ; $39 #R$B9FB.
 $7F5A DEFW $82F1    ; $3A #R$B9E2.
 $7F5C DEFW $82F1    ; $3B #R$B98B.
 $7F5E DEFW $82F1    ; $3C #R$B9A6.
 $7F60 DEFW $82F1    ; $3D #R$B9C7.
 $7F62 DEFW $82F1    ; $3E #R$B972.
 $7F64 DEFW $82F1    ; $3F #R$BA37.
 $7F66 DEFW $81DB    ; $40 #R$BA58.
 $7F68 DEFW $81DB    ; $41 #R$BA79.
 $7F6A DEFW $81DB    ; $42 #R$BA9A.
 $7F6C DEFW $81DB    ; $43 #R$BABB.
 $7F6E DEFW $81DB    ; $44 #R$BADC.
 $7F70 DEFW $81DB    ; $45 #R$BAFD.
 $7F72 DEFW $81DB    ; $46 #R$BB1E.
 $7F74 DEFW $81DB    ; $47 #R$BB3F.
 $7F76 DEFW $807A    ; $48 #R$BC2E.
 $7F78 DEFW $807A    ; $49 #R$BC4F.
 $7F7A DEFW $807A    ; $4A #R$BC70.
 $7F7C DEFW $807A    ; $4B #R$BC9F.
 $7F7E DEFW $845F    ; $4C #R$BD30.
 $7F80 DEFW $845F    ; $4D #R$BD57.
 $7F82 DEFW $862E    ; $4E #R$D2C0.
 $7F84 DEFW $862E    ; $4F #R$D2D7.
 $7F86 DEFW $8C63    ; $50 #R$C124.
 $7F88 DEFW $8C63    ; $51 #R$C1AA.
 $7F8A DEFW $8C63    ; $52 #R$C1CB.
 $7F8C DEFW $8C63    ; $53 #R$C1F4.
 $7F8E DEFW $8C63    ; $54 #R$C219.
 $7F90 DEFW $8C63    ; $55 #R$AFF8.
 $7F92 DEFW $8C63    ; $56 #R$B019.
 $7F94 DEFW $8C63    ; $57 #R$AF6C.
 $7F96 DEFW $85F7    ; $58 #R$C23A.
 $7F98 DEFW $85F7    ; $59 #R$C253.
 $7F9A DEFW $85F7    ; $5A #R$C26E.
 $7F9C DEFW $85F7    ; $5B #R$C28D.
 $7F9E DEFW $845F    ; $5C #R$C310.
 $7FA0 DEFW $845F    ; $5D #R$C32D.
 $7FA2 DEFW $8672    ; $5E #R$C34A.
 $7FA4 DEFW $8672    ; $5F #R$C36B.
 $7FA6 DEFW $871A    ; $60 #R$C38C.
 $7FA8 DEFW $871A    ; $61 #R$C3A3.
 $7FAA DEFW $87A6    ; $62 #R$C3B6.
 $7FAC DEFW $87A6    ; $63 #R$C3DF.
 $7FAE DEFW $A3EF    ; $64 #R$AEEA.
 $7FB0 DEFW $A408    ; $65 #R$AEEA.
 $7FB2 DEFW $8CB7    ; $66 #R$AEEA.
 $7FB4 DEFW $8D45    ; $67 #R$AEEA.
 $7FB6 DEFW $8672    ; $68 #R$C408.
 $7FB8 DEFW $8672    ; $69 #R$C429.
 $7FBA DEFW $8301    ; $6A #R$C44A.
 $7FBC DEFW $8301    ; $6B #R$C46F.
 $7FBE DEFW $8787    ; $6C #R$C5F8.
 $7FC0 DEFW $8787    ; $6D #R$C60F.
 $7FC2 DEFW $8787    ; $6E #R$C62A.
 $7FC4 DEFW $8787    ; $6F #R$C649.
 $7FC6 DEFW $8862    ; $70 #R$CB46.
 $7FC8 DEFW $8862    ; $71 #R$CB77.
 $7FCA DEFW $8862    ; $72 #R$CBA8.
 $7FCC DEFW $8862    ; $73 #R$CB77.
 $7FCE DEFW $8988    ; $74 #R$CBD9.
 $7FD0 DEFW $8988    ; $75 #R$CC0A.
 $7FD2 DEFW $8988    ; $76 #R$CC3B.
 $7FD4 DEFW $8988    ; $77 #R$CC0A.
 $7FD6 DEFW $89ED    ; $78 #R$CC6C.
 $7FD8 DEFW $89ED    ; $79 #R$CC9D.
 $7FDA DEFW $89ED    ; $7A #R$CCCE.
 $7FDC DEFW $89ED    ; $7B #R$CC9D.
 $7FDE DEFW $8906    ; $7C #R$CCFF.
 $7FE0 DEFW $8906    ; $7D #R$CD30.
 $7FE2 DEFW $8906    ; $7E #R$CD61.
 $7FE4 DEFW $8906    ; $7F #R$CD30.
 $7FE6 DEFW $92F5    ; $80 #R$AF0D.
 $7FE8 DEFW $92F5    ; $81 #R$AF2E.
 $7FEA DEFW $92F5    ; $82 #R$AF43.
 $7FEC DEFW $92F5    ; $83 #R$C16E.
 $7FEE DEFW $92F5    ; $84 #R$AF95.
 $7FF0 DEFW $92F5    ; $85 #R$AFB6.
 $7FF2 DEFW $92F5    ; $86 #R$AFD7.
 $7FF4 DEFW $92F5    ; $87 #R$C18F.
 $7FF6 DEFW $92F5    ; $88 #R$C14D.
 $7FF8 DEFW $92F5    ; $89 #R$CDE2.
 $7FFA DEFW $92F5    ; $8A #R$CDBD.
 $7FFC DEFW $92F5    ; $8B #R$D29F.
 $7FFE DEFW $92F5    ; $8C #R$D1D5.
 $8000 DEFW $92F5    ; $8D #R$D1EC.
 $8002 DEFW $92F5    ; $8E #R$D20B.
 $8004 DEFW $95D7    ; $8F #R$CD92.
 $8006 DEFW $8A2F    ; $90 #R$CE01.
 $8008 DEFW $8A2F    ; $91 #R$CE2E.
 $800A DEFW $8A2F    ; $92 #R$CE5B.
 $800C DEFW $8A2F    ; $93 #R$CE88.
 $800E DEFW $8A80    ; $94 #R$CEB5.
 $8010 DEFW $8A80    ; $95 #R$CEDC.
 $8012 DEFW $8A80    ; $96 #R$CF03.
 $8014 DEFW $8A80    ; $97 #R$CF2A.
 $8016 DEFW $8A80    ; $98 #R$CF51.
 $8018 DEFW $8A80    ; $99 #R$CF78.
 $801A DEFW $8A80    ; $9A #R$CF93.
 $801C DEFW $8A80    ; $9B #R$CFAE.
 $801E DEFW $8AFF    ; $9C #R$D3D3.
 $8020 DEFW $8AFF    ; $9D #R$D404.
 $8022 DEFW $8AFF    ; $9E #R$D435.
 $8024 DEFW $8AFF    ; $9F #R$D404.
 $8026 DEFW $A48B    ; $A0 #R$AEEA.
 $8028 DEFW $988B    ; $A1 #R$D232.

; Background Item Jump Routine Table
;
; Order is important, as the same index value used to calculate the required
; jump routine is used in #R$A600.
@label=BackgroundItemJumpRoutineTable
b$802A DEFW $807A    ; $00.
 $802C DEFW $91F2    ; $01 #R$BCCE.
 $802E DEFW $91F2    ; $02 #R$A76E.
 $8030 DEFW $91ED    ; $03 #R$B3EA.
 $8032 DEFW $807A    ; $04 #R$AEEA.
 $8034 DEFW $807A    ; $05 #R$AEEA.
 $8036 DEFW $807A    ; $06 #R$AEEA.
 $8038 DEFW $807A    ; $07 #R$AEEA.
 $803A DEFW $9244    ; $08 #R$A69C.
 $803C DEFW $9244    ; $09 #R$A69C.
 $803E DEFW $9244    ; $0A #R$A69C.
 $8040 DEFW $9244    ; $0B #R$A69C.
 $8042 DEFW $9252    ; $0C #R$C2AE.
 $8044 DEFW $9252    ; $0D #R$C2AE.
 $8046 DEFW $9252    ; $0E #R$C2AE.
 $8048 DEFW $9252    ; $0F #R$C2AE.
 $804A DEFW $942F    ; $10 #R$B6F2.
 $804C DEFW $91FE    ; $11 #R$B4C6.
 $804E DEFW $91FE    ; $12 #R$A7EC.
 $8050 DEFW $807A    ; $13 #R$C542.
 $8052 DEFW $807A    ; $14 #R$C48C.
 $8054 DEFW $91FE    ; $15 #R$C66A.
 $8056 DEFW $91FE    ; $16 #R$C6AC.
 $8058 DEFW $9428    ; $17 #R$C6CE.
 $805A DEFW $91BC    ; $18 #R$C7F2.
 $805C DEFW $91C5    ; $19 #R$C770.
 $805E DEFW $9421    ; $1A #R$CFD5.
 $8060 DEFW $91FE    ; $1B #R$C874.
 $8062 DEFW $91FE    ; $1C #R$C9CA.
 $8064 DEFW $91FE    ; $1D #R$C9EC.
 $8066 DEFW $91FE    ; $1E #R$CA0E.
 $8068 DEFW $807A    ; $1F #R$AEEA.
 $806A DEFW $917D    ; $20 #R$CA82.
 $806C DEFW $915F    ; $21 #R$A76E.
 $806E DEFW $917D    ; $22 #R$CAE4.
 $8070 DEFW $915F    ; $23 #R$BCCE.
 $8072 DEFW $961B    ; $24 #R$D069.
 $8074 DEFW $91FE    ; $25 #R$D253.
 $8076 DEFW $91FE    ; $26 #R$D2EE.
 $8078 DEFW $91FE    ; $27 #R$D466.

; Simulate Sprite Proccessing
;
; Simulates a sprite being processed (called when the specified sprite is not
; active).
; .
; #TABLE(default)
; { I | #REGix | Address of the current sprite's data structure. }
; TABLE#
@label=SimulateSpriteProccessing
c$807A PUSH IX       ;
 $807C POP HL        ;
 $807D LD DE,$EE60   ;
 $8080 AND A         ;
 $8081 SBC HL,DE     ;
 $8083 LD A,H        ;
 $8084 AND A         ;
 $8085 RET NZ        ;
 $8086 LD A,L        ;
 $8087 CP $30        ;
 $8089 RET NC        ;
 $808A LD HL,$00C0   ;
*$808D DEC HL        ;
 $808E LD A,H        ;
 $808F OR L          ;
 $8090 JR NZ,$808D   ;
 $8092 RET           ;

; Clear Screen Playing Area
;
; Clears the screen playing area. The screen playing area is 192 pixels wide
; and 192 pixels high and its origin is at (Y=00,X=00).
; .
; Used by the routines at #R$8C35, #R$9117 and #R$9731.
@label=ClearScreenPlayingArea
c$8093 LD HL,$4000   ; #REGhl=$4000; start of screen pixel memory.
 $8096 LD BC,$18C0   ; #REGb=$18; number of character columns to clear.
                     ; #REGc=$C0; number of lines to clear.
 $8099 XOR A         ; Clear #REGa.
; This entry point is used by the routines at #R$9BEA and #R$A240.
; .
; #TABLE(default)
; { I | #REGa  | Value to set. }
; { I | #REGb  | The number of character columns to set. }
; { I | #REGc  | The number of lines or character rows, to set. }
; { I | #REGhl | Screen memory address to set. }
; TABLE#
@label=SetScreenArea
*$809A PUSH BC       ; Store #REGbc. #REGb=number of character columns to set.
                     ; #REGc=number of lines or character rows, to set.
 $809B PUSH HL       ; Store #REGhl; initial screen memory address to set.
 $809C LD DE,$0020   ; #REGde=$0020; maximum number of character columns in a
                     ; character row.
; #TABLE(default)
; { I | #REGa  | Value to set. }
; { I | #REGb  | The number of character columns to set. }
; { I | #REGc  | The number of lines or character rows, to set. }
; { I | #REGde | The maximum number of character columns in a character row. }
; { I | #REGhl | Screen memory address to set. }
; TABLE#
@label=SetScreenAreaLoop
*$809F LD (HL),A     ; Set contents of #REGhl to #REGa.
 $80A0 INC HL        ; #REGhl=next screen memory address.
 $80A1 DJNZ $809F    ; Loop until all character columns are set.
 $80A3 POP HL        ; Restore #REGhl; screen memory address to set.
 $80A4 ADD HL,DE     ; #REGhl=calculated screen memory address of the next
                     ; character row.
 $80A5 POP BC        ; Restore #REGbc. #REGb=number of character columns to
                     ; set. #REGc=number of lines or character rows, to set.
 $80A6 DEC C         ; Decrement the number of lines or character rows, to set.
 $80A7 JR NZ,$809A   ; Loop until all lines or character rows, have been set.
 $80A9 RET           ;

; Initialise Screen
;
; Initialises the screen.
; .
; Used by the routines at #R$7C29 and #R$7D9A.
@label=InitialiseScreen
c$80AA CALL $80C2    ; Clear the screen attributes.
 $80AD CALL $80B4    ; Clear the screen pixels.
 $80B0 XOR A         ; {Black border.
 $80B1 OUT ($FE),A   ; }
 $80B3 RET           ;

; Clear Screen Pixels
;
; Clears the screen's pixels.
; .
; Used by the routine at #R$80AA.
@label=ClearScreenPixels
c$80B4 LD HL,$4000   ; #REGhl=start of screen pixels memory.
 $80B7 LD B,$58      ; #REGb=end of screen pixels memory (high byte).
; Clear Memory
; .
; This entry point is used by the routine at #R$80CB.
; .
; #TABLE(default)
; { I | #REGb  | End address of memory area to clear (high byte). }
; { I | #REGhl | Address of memory area to clear. }
; TABLE#
@label=ClearMemory
*$80B9 LD C,$00      ; #REGc=$00; clear.
; Set Memory
; .
; This entry point is used by the routine at #R$80C2.
; .
; #TABLE(default)
; { I | #REGb  | End address of memory area to set (high byte). }
; { I | #REGc  | Value to set. }
; { I | #REGhl | Address of memory area to set. }
; TABLE#
@label=SetMemory
*$80BB LD (HL),C     ; Set contents of #REGhl to #REGc.
 $80BC INC HL        ; #REGhl=next memory address.
 $80BD LD A,H        ; #REGa=high byte of memory address.
 $80BE CP B          ; Check if finished (if #REGa=#REGb).
 $80BF JR NZ,$80BB   ; Loop if not finished.
 $80C1 RET           ;

; Clear Screen Attributes
;
; Clears the screen's attributes to black/black.
; .
; Used by the routine at #R$80AA.
@label=ClearScreenAttributes
c$80C2 LD HL,$5800   ; #REGhl=start of screen attributes memory.
 $80C5 LD B,$5B      ; #REGb=end of screen attributes memory (high byte).
 $80C7 LD C,$00      ; #REGc=$00; black/black.
 $80C9 JR $80BB      ; Clear the screen's attributes to black/black.

; Clear Game Data
;
; Clears the game data.
; .
; Used by the routine at #R$7D9A.
@label=ClearGameData
c$80CB LD HL,$5E10   ; #REGhl=address of #R$5E10; start of the game data.
 $80CE LD B,$60      ; #REGb=$60; end of the game data (high byte).
 $80D0 JR $80B9      ; Clear the game data.

; Routine at 32978
c$80D2 LD BC,$2020   ;
 $80D5 LD DE,$2020   ;
 $80D8 LD HL,$2020   ;
 $80DB CALL $8D77    ;
 $80DE LD E,(IX+$06) ;
 $80E1 LD D,(IX+$07) ;
 $80E4 LD A,D        ;
 $80E5 OR E          ;
 $80E6 JR Z,$811D    ;
 $80E8 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $80EB AND $03       ;
 $80ED JR NZ,$811D   ;
 $80EF LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $80F2 AND $03       ;
 $80F4 ADD A,$11     ;
 $80F6 LD (IX+$00),A ;
 $80F9 LD A,D        ;
 $80FA AND A         ;
 $80FB JP P,$8100    ;
 $80FE NEG           ;
*$8100 LD C,A        ;
 $8101 LD A,E        ;
 $8102 AND A         ;
 $8103 JP P,$8108    ;
 $8106 NEG           ;
*$8108 CP C          ;
 $8109 JR NC,$8128   ;
 $810B LD A,D        ;
 $810C AND A         ;
 $810D LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8110 JP M,$8115    ;
 $8113 ADD A,$04     ;
*$8115 ADD A,$08     ;
*$8117 LD (IX+$00),A ;
 $811A CALL $A3C7    ; Play the player walking sound.
*$811D CALL $93BE    ; Get the game controller input.
 $8120 AND $10       ;
 $8122 CALL Z,$814B  ;
 $8125 JP $8E78      ;
*$8128 LD A,E        ;
 $8129 AND A         ;
 $812A LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $812D JP M,$8117    ;
 $8130 ADD A,$04     ;
 $8132 JR $8117      ;

; Routine at 33076
;
; Used by the routine at #R$8E26.
c$8134 LD A,($EA98)  ;
 $8137 AND A         ;
 $8138 RET NZ        ;
 $8139 LD A,($5E2D)  ;
 $813C AND A         ;
 $813D RET NZ        ;
 $813E CALL $A41B    ; Play the knight fired weapon sound.
 $8141 CALL $817C    ;
 $8144 LD HL,$EA98   ;
 $8147 LD (HL),$40   ;
 $8149 JR $8160      ;

; Routine at 33099
;
; Used by the routine at #R$80D2.
c$814B LD A,($EA98)  ;
 $814E AND A         ;
 $814F RET NZ        ;
 $8150 LD A,($5E2D)  ;
 $8153 AND A         ;
 $8154 RET NZ        ;
 $8155 CALL $A438    ; Play the wizard fired weapon sound.
 $8158 CALL $817C    ;
 $815B LD HL,$EA98   ;
 $815E LD (HL),$34   ;
; This entry point is used by the routines at #R$8134 and #R$8283.
*$8160 INC HL        ;
 $8161 LD A,(IX+$01) ;
 $8164 LD (HL),A     ;
 $8165 INC HL        ;
 $8166 INC HL        ;
 $8167 LD A,(IX+$03) ;
 $816A LD (HL),A     ;
 $816B INC HL        ;
 $816C LD A,(IX+$04) ;
 $816F LD (HL),A     ;
 $8170 PUSH IX       ;
 $8172 LD IX,$EA98   ;
 $8176 CALL $9F4A    ; Display the sprite (without mask).
 $8179 POP IX        ;
 $817B RET           ;

; Routine at 33148
;
; Used by the routines at #R$8134, #R$814B and #R$8283.
c$817C LD HL,$EA9E   ;
 $817F LD A,$30      ;
 $8181 LD ($EAA7),A  ;
 $8184 LD A,$00      ;
 $8186 LD ($EA9A),A  ;
 $8189 LD A,(IX+$06) ;
 $818C OR (IX+$07)   ;
 $818F JR Z,$81B3    ;
 $8191 LD A,(IX+$06) ;
 $8194 AND A         ;
 $8195 JR Z,$81A0    ;
 $8197 JP M,$819E    ;
 $819A LD A,$04      ;
 $819C JR $81A0      ;
*$819E LD A,$FC      ;
*$81A0 LD (HL),A     ;
 $81A1 INC HL        ;
 $81A2 LD A,(IX+$07) ;
 $81A5 AND A         ;
 $81A6 JR Z,$81B1    ;
 $81A8 JP M,$81AF    ;
 $81AB LD A,$04      ;
 $81AD JR $81B1      ;
*$81AF LD A,$FC      ;
*$81B1 LD (HL),A     ;
 $81B2 RET           ;
*$81B3 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $81B6 DEC A         ;
 $81B7 AND $0C       ;
 $81B9 JR Z,$81C9    ;
 $81BB CP $04        ;
 $81BD JR Z,$81CF    ;
 $81BF CP $08        ;
 $81C1 JR NZ,$81D5   ;
 $81C3 LD (HL),$00   ;
 $81C5 INC HL        ;
 $81C6 LD (HL),$FC   ;
 $81C8 RET           ;
*$81C9 LD (HL),$FC   ;
 $81CB INC HL        ;
 $81CC LD (HL),$00   ;
 $81CE RET           ;
*$81CF LD (HL),$04   ;
 $81D1 INC HL        ;
 $81D2 LD (HL),$00   ;
 $81D4 RET           ;
*$81D5 LD (HL),$00   ;
 $81D7 INC HL        ;
 $81D8 LD (HL),$04   ;
 $81DA RET           ;

; Routine at 33243
c$81DB CALL $9FFB      ;
 $81DE LD A,($5C78)    ; #REGa=the LSB of FRAMES.
 $81E1 CPL             ;
 $81E2 RRA             ;
 $81E3 AND $07         ;
 $81E5 ADD A,$40       ;
 $81E7 LD (IX+$00),A   ;
 $81EA LD (IX+$05),$42 ;
 $81EE JR $8209        ;

; Routine at 33264
c$81F0 CALL $9FFB      ;
 $81F3 LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $81F6 INC A           ;
 $81F7 AND $03         ;
 $81F9 ADD A,$34       ;
 $81FB LD (IX+$00),A   ;
 $81FE LD A,($5C78)    ; #REGa=the LSB of FRAMES.
 $8201 RLA             ;
 $8202 AND $02         ;
 $8204 ADD A,$45       ;
 $8206 LD (IX+$05),A   ;
; This entry point is used by the routines at #R$81DB and #R$82F1.
*$8209 LD DE,($5E1D)   ;
 $820D LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8210 CP (IX+$01)     ;
 $8213 JR NZ,$827E     ;
 $8215 DEC (IX+$0F)    ;
 $8218 JR Z,$826F      ;
 $821A BIT 0,(IX+$02)  ;
 $821E JR NZ,$826F     ;
 $8220 LD A,(IX+$03)   ;
 $8223 ADD A,(IX+$06)  ;
 $8226 LD C,A          ;
 $8227 SUB $58         ;
 $8229 JP P,$822E      ;
 $822C NEG             ;
*$822E CP E            ;
 $822F JR NC,$825D     ;
*$8231 LD A,(IX+$04)   ;
 $8234 ADD A,(IX+$07)  ;
 $8237 LD B,A          ;
 $8238 SUB $68         ;
 $823A JP P,$823F      ;
 $823D NEG             ;
*$823F CP D            ;
 $8240 JR NC,$824B     ;
*$8242 LD (IX+$03),C   ;
 $8245 LD (IX+$04),B   ;
 $8248 JP $8E8E        ;
*$824B LD B,(IX+$04)   ;
 $824E LD A,(IX+$07)   ;
 $8251 NEG             ;
 $8253 LD (IX+$07),A   ;
 $8256 PUSH BC         ;
 $8257 CALL $A4B0      ;
 $825A POP BC          ;
 $825B JR $8242        ;
*$825D LD C,(IX+$03)   ;
 $8260 LD A,(IX+$06)   ;
 $8263 NEG             ;
 $8265 LD (IX+$06),A   ;
 $8268 PUSH BC         ;
 $8269 CALL $A4B0      ;
 $826C POP BC          ;
 $826D JR $8231        ;
; This entry point is used by the routine at #R$8787.
*$826F CALL $9F56      ; Display the current sprite (with mask).
 $8272 CALL $A445      ; Play the nasty dead sound.
 $8275 LD A,($5E1A)    ;
 $8278 LD (IX+$05),A   ;
 $827B CALL $A01A      ;
; This entry point is used by the routine at #R$85F0.
*$827E LD (IX+$00),$00 ;
 $8282 RET             ;

; Routine at 33411
;
; Used by the routine at #R$8DC4.
c$8283 LD A,($EA98)  ;
 $8286 AND A         ;
 $8287 RET NZ        ;
 $8288 LD A,($5E2D)  ;
 $828B AND A         ;
 $828C RET NZ        ;
 $828D CALL $A427    ; Play the serf fired weapon sound.
 $8290 CALL $817C    ;
 $8293 LD C,$00      ;
 $8295 LD A,(HL)     ;
 $8296 AND A         ;
 $8297 JR Z,$82B6    ;
 $8299 JP P,$829E    ;
 $829C LD C,$04      ;
*$829E DEC HL        ;
 $829F LD A,(HL)     ;
 $82A0 AND A         ;
 $82A1 JR Z,$82A7    ;
 $82A3 JP P,$82B3    ;
 $82A6 DEC C         ;
*$82A7 LD A,C        ;
 $82A8 AND $07       ;
 $82AA ADD A,$38     ;
 $82AC LD HL,$EA98   ;
 $82AF LD (HL),A     ;
 $82B0 JP $8160      ;
*$82B3 INC C         ;
 $82B4 JR $82A7      ;
*$82B6 DEC HL        ;
 $82B7 BIT 7,(HL)    ;
 $82B9 JR Z,$82BF    ;
 $82BB LD C,$06      ;
 $82BD JR $82A7      ;
*$82BF LD C,$02      ;
 $82C1 JR $82A7      ;

; Routine at 33475
;
; Used by the routine at #R$82F1.
c$82C3 LD C,$00      ;
 $82C5 LD A,(HL)     ;
 $82C6 AND A         ;
 $82C7 JR Z,$82E4    ;
 $82C9 JP P,$82CE    ;
 $82CC LD C,$04      ;
*$82CE DEC HL        ;
 $82CF LD A,(HL)     ;
 $82D0 AND A         ;
 $82D1 JR Z,$82D7    ;
 $82D3 JP P,$82E1    ;
 $82D6 DEC C         ;
*$82D7 LD A,C        ;
 $82D8 AND $07       ;
 $82DA ADD A,$38     ;
 $82DC LD HL,$EA98   ;
 $82DF LD (HL),A     ;
 $82E0 RET           ;
*$82E1 INC C         ;
 $82E2 JR $82D7      ;
*$82E4 DEC HL        ;
 $82E5 BIT 7,(HL)    ;
 $82E7 JR Z,$82ED    ;
 $82E9 LD C,$06      ;
 $82EB JR $82D7      ;
*$82ED LD C,$02      ;
 $82EF JR $82D7      ;

; Routine at 33521
c$82F1 CALL $9FFB      ;
 $82F4 LD (IX+$05),$46 ;
 $82F8 LD HL,$EA9F     ;
 $82FB CALL $82C3      ;
 $82FE JP $8209        ;

; Routine at 33537
c$8301 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8304 CP (IX+$01)     ;
 $8307 JP NZ,$85F0     ;
 $830A CALL $9FFB      ;
 $830D LD HL,$5E25     ;
 $8310 INC (HL)        ;
 $8311 CALL $85B2      ;
 $8314 DEC E           ;
 $8315 JP Z,$85EA      ;
 $8318 CALL $8566      ;
 $831B DEC E           ;
 $831C JP Z,$875F      ;
 $831F LD (IX+$0F),$00 ;
 $8323 LD DE,($5E1D)   ;
 $8327 LD A,(IX+$09)   ;
 $832A INC A           ;
 $832B AND $0F         ;
 $832D LD (IX+$09),A   ;
 $8330 JP NZ,$833A     ;
 $8333 LD A,R          ;
 $8335 AND $07         ;
 $8337 LD (IX+$08),A   ;
*$833A CALL $83BA      ;
 $833D LD (IX+$05),$43 ;
 $8341 JR NZ,$8344     ;
 $8343 INC HL          ;
*$8344 LD A,(HL)       ;
 $8345 BIT 1,(IX+$08)  ;
 $8349 JR NZ,$834D     ;
 $834B NEG             ;
*$834D ADD A,(IX+$04)  ;
 $8350 LD C,A          ;
 $8351 SUB $68         ;
 $8353 JR C,$835A      ;
 $8355 CP D            ;
 $8356 JR NC,$83A2     ;
 $8358 JR $835F        ;
*$835A NEG             ;
 $835C CP D            ;
 $835D JR NC,$83A8     ;
*$835F LD (IX+$04),C   ;
*$8362 CALL $83BA      ;
 $8365 JR Z,$8368      ;
 $8367 INC HL          ;
*$8368 LD A,(HL)       ;
 $8369 BIT 0,(IX+$08)  ;
 $836D JR NZ,$8371     ;
 $836F NEG             ;
*$8371 ADD A,(IX+$03)  ;
 $8374 LD C,A          ;
 $8375 SUB $58         ;
 $8377 JR C,$837E      ;
 $8379 CP E            ;
 $837A JR NC,$83B4     ;
 $837C JR $8383        ;
*$837E NEG             ;
 $8380 CP E            ;
 $8381 JR NC,$83AE     ;
*$8383 LD (IX+$03),C   ;
 $8386 LD A,(IX+$09)   ;
 $8389 RRA             ;
 $838A RRA             ;
 $838B AND $01         ;
 $838D LD C,A          ;
 $838E LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8391 AND $FE         ;
 $8393 ADD A,C         ;
 $8394 LD (IX+$00),A   ;
 $8397 LD A,($EA90)    ; #REGa=graphic index in #R$A4BE of the player in
                       ; #R$EA90.
 $839A CP $31          ;
 $839C JP NC,$875F     ;
 $839F JP $8E8E        ;
*$83A2 RES 1,(IX+$08)  ;
 $83A6 JR $8362        ;
*$83A8 SET 1,(IX+$08)  ;
 $83AC JR $8362        ;
*$83AE SET 0,(IX+$08)  ;
 $83B2 JR $8383        ;
*$83B4 RES 0,(IX+$08)  ;
 $83B8 JR $8383        ;

; Routine at 33722
;
; Used by the routine at #R$8301.
c$83BA LD C,(IX+$09)  ;
 $83BD SLA C          ;
 $83BF LD B,$00       ;
 $83C1 LD HL,$83CA    ;
 $83C4 ADD HL,BC      ;
 $83C5 BIT 2,(IX+$08) ;
 $83C9 RET            ;

; Data block at 33738
b$83CA DEFB $03,$00,$03,$00,$03,$01,$03,$01
 $83D2 DEFB $03,$01,$02,$02,$02,$02,$02,$02
 $83DA DEFB $02,$02,$02,$02,$02,$02,$01,$03
 $83E2 DEFB $01,$03,$01,$03,$00,$03,$00,$03

; Routine at 33770
;
; Used by the routine at #R$8E26.
c$83EA LD A,($5E26)  ;
 $83ED LD C,A        ;
 $83EE LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $83F1 CP C          ;
 $83F2 JR NZ,$844F   ;
 $83F4 LD HL,$5E27   ;
 $83F7 LD A,(HL)     ;
 $83F8 AND A         ;
 $83F9 JR Z,$8458    ;
 $83FB DEC (HL)      ;
 $83FC RET NZ        ;
*$83FD LD HL,$EE60   ;
 $8400 LD DE,$0010   ;
 $8403 LD B,$03      ;
*$8405 LD A,(HL)     ;
 $8406 AND A         ;
 $8407 JR Z,$840D    ;
 $8409 ADD HL,DE     ;
 $840A DJNZ $8405    ;
 $840C RET           ;
*$840D EX DE,HL      ;
 $840E LD HL,$8B6A   ;
 $8411 LD BC,$0010   ;
 $8414 PUSH DE       ;
 $8415 LDIR          ; Copy #REGhl to #REGde, i.e copy the
 $8417 POP HL        ;
 $8418 PUSH HL       ;
 $8419 INC HL        ;
 $841A LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $841D LD (HL),A     ;
 $841E INC HL        ;
 $841F PUSH HL       ;
 $8420 LD HL,$8B7A   ;
 $8423 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $8426 AND $0F       ;
 $8428 LD E,A        ;
 $8429 LD D,$00      ;
 $842B ADD HL,DE     ;
 $842C LD A,(HL)     ;
 $842D POP HL        ;
 $842E LD (HL),A     ;
 $842F LD DE,($5E1D) ;
 $8433 LD B,E        ;
 $8434 CALL $8598    ;
 $8437 LD (HL),A     ;
 $8438 LD B,D        ;
 $8439 CALL $8598    ;
 $843C LD (HL),A     ;
 $843D POP DE        ;
 $843E PUSH IX       ;
 $8440 LD IX,$0000   ;
 $8444 ADD IX,DE     ;
 $8446 CALL $86F2    ;
 $8449 CALL $9F4A    ; Display the sprite (without mask).
 $844C POP IX        ;
 $844E RET           ;
*$844F LD ($5E26),A  ;
 $8452 LD A,$20      ;
 $8454 LD ($5E27),A  ;
 $8457 RET           ;
*$8458 LD A,R        ;
 $845A AND $0F       ;
 $845C RET NZ        ;
 $845D JR $83FD      ;

; Routine at 33887
c$845F CALL $9FFB      ;
 $8462 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8465 CP (IX+$01)     ;
 $8468 JP NZ,$85F0     ;
 $846B LD HL,$5E25     ;
 $846E INC (HL)        ;
 $846F CALL $8566      ;
 $8472 DEC E           ;
 $8473 JP Z,$875F      ;
 $8476 CALL $85B2      ;
 $8479 DEC E           ;
 $847A JP Z,$85EA      ;
 $847D LD DE,($5E1D)   ;
 $8481 LD (IX+$0F),$00 ;
 $8485 LD (IX+$05),$46 ;
 $8489 LD A,(IX+$07)   ;
 $848C AND $0F         ;
 $848E JR NZ,$8497     ;
 $8490 LD A,R          ;
 $8492 AND $03         ;
 $8494 LD (IX+$06),A   ;
*$8497 BIT 0,(IX+$07)  ;
 $849B JR NZ,$84BF     ;
 $849D BIT 0,(IX+$06)  ;
 $84A1 JP Z,$854A      ;
 $84A4 LD A,(IX+$08)   ;
 $84A7 CP $02          ;
 $84A9 JR Z,$84AE      ;
 $84AB INC (IX+$08)    ;
*$84AE BIT 1,(IX+$06)  ;
 $84B2 JP Z,$8558      ;
 $84B5 LD A,(IX+$09)   ;
 $84B8 CP $02          ;
 $84BA JR Z,$84BF      ;
 $84BC INC (IX+$09)    ;
*$84BF INC (IX+$07)    ;
 $84C2 LD A,(IX+$07)   ;
 $84C5 AND $01         ;
 $84C7 XOR (IX+$00)    ;
 $84CA LD (IX+$00),A   ;
; This entry point is used by the routines at #R$862E, #R$8672, #R$871A,
; #R$87A6, #R$8988, #R$8A2F, #R$8A80 and #R$8AFF.
*$84CD LD A,(IX+$03)   ;
 $84D0 ADD A,(IX+$08)  ;
 $84D3 LD C,A          ;
 $84D4 SUB $58         ;
 $84D6 JR C,$84E8      ;
 $84D8 CP E            ;
 $84D9 JR C,$84F8      ;
 $84DB RES 0,(IX+$06)  ;
 $84DF LD (IX+$08),$FE ;
 $84E3 LD C,(IX+$03)   ;
 $84E6 JR $84F8        ;
*$84E8 NEG             ;
 $84EA CP E            ;
 $84EB JR C,$84F8      ;
 $84ED SET 0,(IX+$06)  ;
 $84F1 LD C,(IX+$03)   ;
 $84F4 LD (IX+$08),$02 ;
*$84F8 LD A,(IX+$04)   ;
 $84FB ADD A,(IX+$09)  ;
 $84FE LD B,A          ;
 $84FF SUB $68         ;
 $8501 JR C,$8513      ;
 $8503 CP D            ;
 $8504 JR C,$8523      ;
 $8506 RES 1,(IX+$06)  ;
 $850A LD (IX+$09),$FE ;
 $850E LD B,(IX+$04)   ;
 $8511 JR $8523        ;
*$8513 NEG             ;
 $8515 CP D            ;
 $8516 JR C,$8523      ;
 $8518 SET 1,(IX+$06)  ;
 $851C LD B,(IX+$04)   ;
 $851F LD (IX+$09),$02 ;
*$8523 LD (IX+$03),C   ;
 $8526 LD (IX+$04),B   ;
 $8529 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $852C CP (IX+$01)     ;
 $852F RET NZ          ;
 $8530 LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8533 AND $FC         ;
 $8535 CP $9C          ;
 $8537 JR Z,$8547      ;
 $8539 AND $F0         ;
 $853B CP $70          ;
 $853D JR Z,$8547      ;
 $853F LD A,($EA90)    ; #REGa=graphic index in #R$A4BE of the player in
                       ; #R$EA90.
 $8542 CP $31          ;
 $8544 JP NC,$875F     ;
*$8547 JP $8E8E        ;
*$854A LD A,(IX+$08)   ;
 $854D CP $FE          ;
 $854F JP Z,$84AE      ;
 $8552 DEC (IX+$08)    ;
 $8555 JP $84AE        ;
*$8558 LD A,(IX+$09)   ;
 $855B CP $FE          ;
 $855D JP Z,$84BF      ;
 $8560 DEC (IX+$09)    ;
 $8563 JP $84BF        ;

; Routine at 34150
;
; Used by the routines at #R$8301, #R$845F, #R$862E, #R$8672, #R$871A, #R$87A6,
; #R$8A2F and #R$8A80.
c$8566 LD A,($EA99)  ;
 $8569 LD E,$00      ;
 $856B CP (IX+$01)   ;
 $856E RET NZ        ;
 $856F LD A,($EA98)  ;
 $8572 AND A         ;
 $8573 RET Z         ;
 $8574 LD A,($EA9B)  ;
 $8577 SUB (IX+$03)  ;
 $857A JP P,$857F    ;
 $857D NEG           ;
*$857F CP $0C        ;
 $8581 RET NC        ;
 $8582 LD A,($EA9C)  ;
 $8585 SUB (IX+$04)  ;
 $8588 JP P,$858D    ;
 $858B NEG           ;
*$858D CP $0C        ;
 $858F RET NC        ;
 $8590 LD A,$01      ;
 $8592 LD ($EA9A),A  ;
 $8595 LD E,$01      ;
 $8597 RET           ;

; Routine at 34200
;
; Used by the routine at #R$83EA.
c$8598 LD A,B        ;
 $8599 SUB $08       ;
 $859B LD B,A        ;
 $859C LD A,R        ;
 $859E INC HL        ;
*$859F CP B          ;
 $85A0 JR C,$85A5    ;
 $85A2 SUB B         ;
 $85A3 JR $859F      ;
*$85A5 LD C,A        ;
 $85A6 LD A,R        ;
 $85A8 BIT 1,A       ;
 $85AA LD A,$60      ;
 $85AC JR Z,$85B0    ;
 $85AE ADD A,C       ;
 $85AF RET           ;
*$85B0 SUB C         ;
 $85B1 RET           ;

; Routine at 34226
;
; Used by the routines at #R$8301, #R$845F, #R$862E, #R$8672, #R$871A, #R$87A6,
; #R$8862, #R$8906, #R$8988, #R$89ED, #R$8A2F, #R$8A80 and #R$8AFF.
c$85B2 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $85B5 LD E,$00      ;
 $85B7 CP (IX+$01)   ;
 $85BA RET NZ        ;
 $85BB LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
 $85BE AND A         ;
 $85BF RET Z         ;
 $85C0 CP $31        ;
 $85C2 RET NC        ;
 $85C3 LD A,($EA93)  ;
 $85C6 SUB (IX+$03)  ;
 $85C9 JP P,$85CE    ;
 $85CC NEG           ;
*$85CE CP $0C        ;
 $85D0 RET NC        ;
 $85D1 LD A,($EA94)  ;
 $85D4 SUB (IX+$04)  ;
 $85D7 JP P,$85DC    ;
 $85DA NEG           ;
*$85DC CP $0C        ;
 $85DE RET NC        ;
 $85DF LD A,$01      ;
 $85E1 LD ($EA92),A  ;
 $85E4 CALL $A3E5    ;
 $85E7 LD E,$01      ;
 $85E9 RET           ;

; Routine at 34282
;
; Used by the routines at #R$8301, #R$845F, #R$862E, #R$8672, #R$871A, #R$87A6,
; #R$8A2F and #R$8A80.
c$85EA CALL $8ED7    ;
 $85ED JP $875F      ;

; Routine at 34288
;
; Used by the routines at #R$8301, #R$845F, #R$85F7, #R$862E, #R$8672, #R$871A,
; #R$8787, #R$87A6, #R$8A2F and #R$8A80.
c$85F0 DEC (IX+$0F)  ;
 $85F3 RET NZ        ;
 $85F4 JP $827E      ;

; Routine at 34295
c$85F7 CALL $9FFB      ;
 $85FA LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $85FD CP (IX+$01)     ;
 $8600 JP NZ,$85F0     ;
 $8603 LD HL,$5E25     ;
 $8606 INC (HL)        ;
 $8607 DEC (IX+$0E)    ;
 $860A JR Z,$8625      ;
 $860C LD A,(IX+$0E)   ;
 $860F AND $03         ;
 $8611 ADD A,$58       ;
 $8613 LD (IX+$00),A   ;
 $8616 LD (IX+$0F),$80 ;
 $861A LD A,($EA90)    ; #REGa=graphic index in #R$A4BE of the player in
                       ; #R$EA90.
 $861D CP $31          ;
 $861F JP NC,$875F     ;
 $8622 JP $8E8E        ;
*$8625 LD A,(IX+$02)   ;
 $8628 LD (IX+$00),A   ;
 $862B JP $8E8E        ;

; Routine at 34350
c$862E CALL $9FFB      ;
 $8631 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8634 CP (IX+$01)     ;
 $8637 JP NZ,$85F0     ;
 $863A LD HL,$5E25     ;
 $863D INC (HL)        ;
 $863E CALL $85B2      ;
 $8641 DEC E           ;
 $8642 JP Z,$85EA      ;
 $8645 CALL $8566      ;
 $8648 DEC E           ;
 $8649 JP Z,$875F      ;
 $864C LD (IX+$05),$45 ;
 $8650 INC (IX+$07)    ;
 $8653 CALL Z,$86F2    ;
 $8656 LD A,(IX+$07)   ;
 $8659 RRA             ;
 $865A RRA             ;
 $865B AND $01         ;
 $865D LD C,A          ;
 $865E LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8661 AND $FE         ;
 $8663 ADD A,C         ;
 $8664 LD (IX+$00),A   ;
 $8667 LD DE,($5E1D)   ;
 $866B LD (IX+$0F),$00 ;
 $866F JP $84CD        ;

; Routine at 34418
c$8672 CALL $9FFB      ;
 $8675 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8678 CP (IX+$01)     ;
 $867B JP NZ,$85F0     ;
 $867E LD HL,$5E25     ;
 $8681 INC (HL)        ;
 $8682 LD (IX+$0F),$00 ;
 $8686 CALL $85B2      ;
 $8689 DEC E           ;
 $868A JP Z,$85EA      ;
 $868D CALL $8566      ;
 $8690 DEC E           ;
 $8691 JP Z,$875F      ;
 $8694 LD A,(IX+$0A)   ;
 $8697 RRA             ;
 $8698 AND $01         ;
 $869A LD C,A          ;
 $869B LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $869E AND $FE         ;
 $86A0 ADD A,C         ;
 $86A1 LD (IX+$00),A   ;
 $86A4 LD DE,($5E1D)   ;
 $86A8 INC (IX+$0A)    ;
 $86AB LD A,(IX+$0A)   ;
 $86AE CP $07          ;
 $86B0 JR NZ,$86B9     ;
 $86B2 CALL $86F2      ;
 $86B5 LD (IX+$0A),$F9 ;
*$86B9 SRA A           ;
 $86BB ADD A,(IX+$04)  ;
 $86BE LD C,A          ;
 $86BF SUB $68         ;
 $86C1 JP P,$86E1      ;
 $86C4 NEG             ;
 $86C6 CP D            ;
 $86C7 JR C,$86DB      ;
 $86C9 LD (IX+$09),$02 ;
 $86CD SET 1,(IX+$06)  ;
 $86D1 BIT 7,(IX+$0A)  ;
 $86D5 JR Z,$86DB      ;
 $86D7 LD (IX+$0A),$00 ;
*$86DB LD (IX+$04),C   ;
 $86DE JP $84CD        ;
*$86E1 CP D            ;
 $86E2 JR C,$86DB      ;
 $86E4 RES 1,(IX+$06)  ;
 $86E8 LD (IX+$09),$FE ;
 $86EC LD (IX+$0A),$F9 ;
 $86F0 JR $86DB        ;

; Routine at 34546
;
; Used by the routines at #R$83EA, #R$862E, #R$8672, #R$871A, #R$8A2F and
; #R$8A80.
c$86F2 LD A,R        ;
 $86F4 BIT 0,A       ;
 $86F6 JR Z,$870E    ;
 $86F8 AND $04       ;
 $86FA SUB $02       ;
*$86FC LD (IX+$09),A ;
 $86FF LD A,R        ;
 $8701 RRA           ;
 $8702 BIT 0,A       ;
 $8704 JR Z,$8714    ;
 $8706 AND $04       ;
 $8708 SUB $02       ;
*$870A LD (IX+$08),A ;
 $870D RET           ;
*$870E AND $02       ;
 $8710 SUB $01       ;
 $8712 JR $86FC      ;
*$8714 AND $02       ;
 $8716 SUB $01       ;
 $8718 JR $870A      ;

; Routine at 34586
c$871A CALL $9FFB      ;
 $871D LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8720 CP (IX+$01)     ;
 $8723 JP NZ,$85F0     ;
 $8726 LD HL,$5E25     ;
 $8729 INC (HL)        ;
 $872A LD (IX+$0F),$00 ;
 $872E CALL $85B2      ;
 $8731 DEC E           ;
 $8732 JP Z,$85EA      ;
 $8735 CALL $8566      ;
 $8738 DEC E           ;
 $8739 JP Z,$875F      ;
 $873C LD DE,($5E1D)   ;
 $8740 DEC (IX+$0D)    ;
 $8743 JR NZ,$874C     ;
 $8745 LD (IX+$0D),$11 ;
 $8749 CALL $86F2      ;
*$874C LD A,(IX+$0D)   ;
 $874F RRA             ;
 $8750 AND $01         ;
 $8752 LD C,A          ;
 $8753 LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8756 AND $FE         ;
 $8758 ADD A,C         ;
 $8759 LD (IX+$00),A   ;
 $875C JP $84CD        ;
; This entry point is used by the routines at #R$8301, #R$845F, #R$85EA,
; #R$85F7, #R$862E, #R$8672, #R$87A6, #R$8988, #R$8A2F and #R$8A80.
*$875F LD A,(IX+$05)   ;
 $8762 PUSH AF         ;
 $8763 LD A,($5E1A)    ;
 $8766 LD (IX+$05),A   ;
 $8769 CALL $9F56      ; Display the current sprite (with mask).
 $876C CALL $A01A      ;
 $876F POP AF          ;
 $8770 LD (IX+$05),A   ;
 $8773 LD (IX+$00),$6C ;
 $8777 LD (IX+$0E),$10 ;
 $877B LD BC,$0155     ; #REGbc=155 points (BCD encoded).
 $877E CALL $A19C      ; Add points to the player's score.
 $8781 CALL $9F4A      ; Display the sprite (without mask).
 $8784 JP $A01A        ;

; Routine at 34695
c$8787 CALL $9FFB    ;
 $878A LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $878D CP (IX+$01)   ;
 $8790 JP NZ,$85F0   ;
 $8793 DEC (IX+$0E)  ;
 $8796 JP Z,$826F    ;
 $8799 LD A,(IX+$0E) ;
 $879C AND $03       ;
 $879E ADD A,$6C     ;
 $87A0 LD (IX+$00),A ;
 $87A3 JP $8E8E      ;

; Routine at 34726
c$87A6 CALL $9FFB      ;
 $87A9 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $87AC CP (IX+$01)     ;
 $87AF JP NZ,$85F0     ;
 $87B2 LD HL,$5E25     ;
 $87B5 INC (HL)        ;
 $87B6 CALL $8566      ;
 $87B9 DEC E           ;
 $87BA JP Z,$875F      ;
 $87BD CALL $85B2      ;
 $87C0 DEC E           ;
 $87C1 JP Z,$85EA      ;
 $87C4 LD DE,($5E1D)   ;
 $87C8 LD (IX+$0F),$00 ;
 $87CC LD (IX+$05),$46 ;
 $87D0 LD A,(IX+$07)   ;
 $87D3 AND $07         ;
 $87D5 JR NZ,$87DE     ;
 $87D7 LD A,R          ;
 $87D9 AND $03         ;
 $87DB LD (IX+$06),A   ;
*$87DE BIT 0,(IX+$07)  ;
 $87E2 JR NZ,$8804     ;
 $87E4 BIT 0,(IX+$06)  ;
 $87E8 JR Z,$8815      ;
 $87EA LD A,(IX+$08)   ;
 $87ED CP $02          ;
 $87EF JR Z,$87F4      ;
 $87F1 INC (IX+$08)    ;
*$87F4 BIT 1,(IX+$06)  ;
 $87F8 JR Z,$8821      ;
 $87FA LD A,(IX+$09)   ;
 $87FD CP $02          ;
 $87FF JR Z,$8804      ;
 $8801 INC (IX+$09)    ;
*$8804 INC (IX+$07)    ;
 $8807 LD A,(IX+$07)   ;
 $880A AND $01         ;
 $880C XOR (IX+$00)    ;
 $880F LD (IX+$00),A   ;
 $8812 JP $84CD        ;
*$8815 LD A,(IX+$08)   ;
 $8818 CP $FE          ;
 $881A JR Z,$87F4      ;
 $881C DEC (IX+$08)    ;
 $881F JR $87F4        ;
*$8821 LD A,(IX+$09)   ;
 $8824 CP $FE          ;
 $8826 JR Z,$8804      ;
 $8828 DEC (IX+$09)    ;
 $882B JR $8804        ;

; Routine at 34861
;
; Used by the routines at #R$8862, #R$8906, #R$8988, #R$89ED and #R$8AFF.
c$882D LD C,$00        ;
 $882F LD A,D          ;
 $8830 CP (IX+$04)     ;
 $8833 JR Z,$8848      ;
 $8835 JR NC,$8850     ;
 $8837 LD (IX+$09),$FF ;
*$883B LD A,E          ;
 $883C CP (IX+$03)     ;
 $883F JR Z,$8856      ;
 $8841 JR NC,$885D     ;
 $8843 LD (IX+$08),$FF ;
 $8847 RET             ;
*$8848 LD (IX+$09),$00 ;
 $884C SET 0,C         ;
 $884E JR $883B        ;
*$8850 LD (IX+$09),$01 ;
 $8854 JR $883B        ;
*$8856 LD (IX+$08),$00 ;
 $885A SET 1,C         ;
 $885C RET             ;
*$885D LD (IX+$08),$01 ;
 $8861 RET             ;

; Routine at 34914
c$8862 CALL $9FFB      ;
 $8865 CALL $85B2      ;
 $8868 DEC E           ;
 $8869 CALL Z,$8A1E    ;
 $886C LD HL,$EAE0     ;
 $886F LD A,(HL)       ;
 $8870 AND A           ;
 $8871 JR Z,$8881      ;
 $8873 INC HL          ;
 $8874 LD A,(HL)       ;
 $8875 CP (IX+$01)     ;
 $8878 JR NZ,$8881     ;
 $887A INC HL          ;
 $887B INC HL          ;
 $887C LD E,(HL)       ;
 $887D INC HL          ;
 $887E LD D,(HL)       ;
 $887F JR $88D7        ;
*$8881 BIT 7,(IX+$06)  ;
 $8885 JR NZ,$88FD     ;
 $8887 LD HL,$EAC8     ;
 $888A LD A,(HL)       ;
 $888B AND A           ;
 $888C JR Z,$88F9      ;
 $888E INC HL          ;
 $888F LD A,(HL)       ;
 $8890 CP (IX+$01)     ;
 $8893 JR NZ,$88F9     ;
 $8895 LD D,(IX+$0C)   ;
 $8898 LD E,(IX+$0B)   ;
 $889B CALL $882D      ;
 $889E LD A,C          ;
 $889F CP $03          ;
 $88A1 JR Z,$88B5      ;
*$88A3 LD A,($5E12)    ; #REGa=(random) contents of #R$5E12.
 $88A6 RRA             ;
 $88A7 RRA             ;
 $88A8 AND $03         ;
 $88AA ADD A,$70       ;
 $88AC LD (IX+$00),A   ;
 $88AF LD DE,$3838     ;
 $88B2 JP $89BB        ;
*$88B5 BIT 6,(IX+$06)  ;
 $88B9 JR Z,$88C9      ;
 $88BB LD (IX+$0B),$8C ;
 $88BF LD (IX+$0C),$68 ;
 $88C3 RES 6,(IX+$06)  ;
 $88C7 JR $88A3        ;
*$88C9 LD (IX+$0B),$68 ;
 $88CD LD (IX+$0C),$38 ;
 $88D1 SET 6,(IX+$06)  ;
 $88D5 JR $88A3        ;
*$88D7 CALL $882D      ;
 $88DA LD A,C          ;
 $88DB CP $03          ;
 $88DD JR NZ,$88A3     ;
 $88DF PUSH IX         ;
 $88E1 LD IX,$EAE0     ;
 $88E5 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $88E8 CP (IX+$01)     ;
 $88EB JR NZ,$88F0     ;
 $88ED CALL $9F4A      ; Display the sprite (without mask).
*$88F0 POP IX          ;
 $88F2 LD A,$6B        ;
 $88F4 LD ($EAE1),A    ;
 $88F7 JR $88B5        ;
*$88F9 SET 7,(IX+$06)  ;
*$88FD LD DE,($EA93)   ;
 $8901 CALL $882D      ;
 $8904 JR $88A3        ;

; Routine at 35078
c$8906 CALL $9FFB      ;
 $8909 CALL $85B2      ;
 $890C DEC E           ;
 $890D CALL Z,$8A1E    ;
 $8910 LD DE,$468A     ;
 $8913 CALL $9273      ;
 $8916 JR NZ,$8931     ;
 $8918 LD DE,($EA93)   ;
 $891C CALL $882D      ;
 $891F LD A,(IX+$08)   ;
 $8922 NEG             ;
 $8924 LD (IX+$08),A   ;
 $8927 LD A,(IX+$09)   ;
 $892A NEG             ;
 $892C LD (IX+$09),A   ;
 $892F JR $8940        ;
*$8931 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8934 CP (IX+$01)     ;
 $8937 JR NZ,$8952     ;
 $8939 LD DE,($EA93)   ;
 $893D CALL $882D      ;
*$8940 LD A,($5E12)    ; #REGa=(random) contents of #R$5E12.
 $8943 RRA             ;
 $8944 RRA             ;
 $8945 AND $03         ;
 $8947 ADD A,$7C       ;
 $8949 LD (IX+$00),A   ;
 $894C LD DE,$3434     ;
 $894F JP $89BB        ;
*$8952 LD (IX+$0B),$68 ;
 $8956 LD (IX+$0C),$68 ;
 $895A CALL $882D      ;
 $895D LD A,($5C78)    ; #REGa=the LSB of FRAMES.
 $8960 AND A           ;
 $8961 JP NZ,$8940     ;
 $8964 LD A,R          ;
 $8966 AND $7F         ;
 $8968 LD C,A          ;
 $8969 CALL $897D      ;
 $896C CP $03          ;
 $896E JP NC,$8940     ;
 $8971 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8974 CP C            ;
 $8975 JP Z,$8940      ;
 $8978 LD (IX+$01),C   ;
 $897B JR $8940        ;

; Routine at 35197
;
; Used by the routine at #R$8906.
c$897D LD L,A        ;
 $897E LD H,$00      ;
 $8980 LD DE,$A854   ;
 $8983 ADD HL,HL     ;
 $8984 ADD HL,DE     ;
 $8985 INC HL        ;
 $8986 LD A,(HL)     ;
 $8987 RET           ;

; Routine at 35208
c$8988 CALL $9FFB      ;
 $898B CALL $85B2      ;
 $898E DEC E           ;
 $898F JR NZ,$89A5     ;
 $8991 LD DE,$458B     ;
 $8994 CALL $9273      ;
 $8997 JR NZ,$89A2     ;
 $8999 LD BC,$1000     ; #REGbc=1000 points (BCD encoded).
 $899C CALL $A19C      ; Add points to the player's score.
 $899F JP $875F        ;
*$89A2 CALL $8A1E      ;
*$89A5 LD DE,($EA93)   ;
 $89A9 CALL $882D      ;
 $89AC LD A,($5E12)    ; #REGa=(random) contents of #R$5E12.
 $89AF RRA             ;
 $89B0 RRA             ;
 $89B1 AND $03         ;
 $89B3 ADD A,$74       ;
 $89B5 LD (IX+$00),A   ;
 $89B8 LD DE,$3434     ;
; This entry point is used by the routines at #R$8862, #R$8906 and #R$89ED.
*$89BB LD A,($EA90)    ; #REGa=graphic index in #R$A4BE of the player in
                       ; #R$EA90.
 $89BE CP $31          ;
 $89C0 JP C,$84CD      ;
 $89C3 LD DE,($EA93)   ;
 $89C7 CALL $882D      ;
 $89CA LD A,(IX+$08)   ;
 $89CD NEG             ;
 $89CF LD (IX+$08),A   ;
 $89D2 LD C,A          ;
 $89D3 LD A,(IX+$09)   ;
 $89D6 NEG             ;
 $89D8 LD (IX+$09),A   ;
 $89DB LD DE,$3434     ;
 $89DE AND C           ;
 $89DF JP NZ,$84CD     ;
 $89E2 LD (IX+$08),$01 ;
 $89E6 LD (IX+$09),$01 ;
 $89EA JP $84CD        ;

; Routine at 35309
c$89ED CALL $9FFB    ;
 $89F0 CALL $85B2    ;
 $89F3 DEC E         ;
 $89F4 CALL Z,$8A1E  ;
 $89F7 LD DE,($EA93) ;
 $89FB CALL $882D    ;
 $89FE LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8A01 AND $FC       ;
 $8A03 LD C,A        ;
 $8A04 LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $8A07 RRA           ;
 $8A08 RRA           ;
 $8A09 AND $03       ;
 $8A0B ADD A,C       ;
 $8A0C LD (IX+$00),A ;
 $8A0F LD DE,$3434   ;
 $8A12 JP $89BB      ;

; Routine at 35349
;
; Used by the routine at #R$8AFF.
c$8A15 LD A,($5E28)  ; #REGa=contents of #R$5E28.
 $8A18 SUB $10       ; Reduce the health of the player by $10.
 $8A1A JR C,$8A2B    ; If the health of the player is zero or less, then the
                     ; player is dead.
 $8A1C JR $8A25      ;

; Routine at 35358
;
; Used by the routines at #R$8862, #R$8906, #R$8988 and #R$89ED.
c$8A1E LD A,($5E28)  ; #REGa=contents of #R$5E28.
 $8A21 SUB $08       ; Reduce the health of the player by $08.
 $8A23 JR C,$8A2B    ; If the health of the player is zero or less, then the
                     ; player is dead.
; This entry point is used by the routine at #R$8A15.
*$8A25 LD ($5E28),A  ; Set the health of the player in #R$5E28 to #REGa.
 $8A28 JP $8B8A      ; Display the chicken (in the status panel).
; This entry point is used by the routine at #R$8A15.
*$8A2B POP HL        ;
 $8A2C JP $8EA0      ;

; Routine at 35375
c$8A2F CALL $9FFB      ;
 $8A32 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8A35 CP (IX+$01)     ;
 $8A38 JP NZ,$85F0     ;
 $8A3B LD HL,$5E25     ;
 $8A3E INC (HL)        ;
 $8A3F CALL $85B2      ;
 $8A42 DEC E           ;
 $8A43 JP Z,$85EA      ;
 $8A46 CALL $8566      ;
 $8A49 DEC E           ;
 $8A4A JP Z,$875F      ;
 $8A4D DEC (IX+$0D)    ;
 $8A50 JR NZ,$8A5D     ;
 $8A52 CALL $86F2      ;
 $8A55 SRA (IX+$09)    ;
 $8A59 LD (IX+$0D),$10 ;
*$8A5D LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8A60 AND $FC         ;
 $8A62 BIT 7,(IX+$08)  ;
 $8A66 JR NZ,$8A6A     ;
 $8A68 ADD A,$02       ;
*$8A6A LD C,A          ;
 $8A6B LD A,(IX+$0D)   ;
 $8A6E RRA             ;
 $8A6F AND $01         ;
 $8A71 ADD A,C         ;
 $8A72 LD (IX+$00),A   ;
 $8A75 LD DE,($5E1D)   ;
 $8A79 LD (IX+$05),$43 ;
 $8A7D JP $84CD        ;

; Routine at 35456
c$8A80 CALL $9FFB      ;
 $8A83 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8A86 CP (IX+$01)     ;
 $8A89 JP NZ,$85F0     ;
 $8A8C LD HL,$5E25     ;
 $8A8F INC (HL)        ;
 $8A90 CALL $85B2      ;
 $8A93 DEC E           ;
 $8A94 JP Z,$85EA      ;
 $8A97 CALL $8566      ;
 $8A9A DEC E           ;
 $8A9B JP Z,$875F      ;
 $8A9E DEC (IX+$0D)    ;
 $8AA1 JR NZ,$8AB8     ;
 $8AA3 CALL $86F2      ;
 $8AA6 LD A,($5C78)    ; #REGa=the LSB of FRAMES.
 $8AA9 AND $04         ;
 $8AAB SUB $02         ;
 $8AAD LD (IX+$08),A   ;
 $8AB0 SRA (IX+$09)    ;
 $8AB4 LD (IX+$0D),$20 ;
*$8AB8 LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8ABB AND $FC         ;
 $8ABD BIT 7,(IX+$08)  ;
 $8AC1 JR NZ,$8AC5     ;
 $8AC3 ADD A,$02       ;
*$8AC5 LD C,A          ;
 $8AC6 LD A,(IX+$0D)   ;
 $8AC9 RRA             ;
 $8ACA AND $01         ;
 $8ACC ADD A,C         ;
 $8ACD LD (IX+$00),A   ;
 $8AD0 LD DE,($5E1D)   ;
 $8AD4 LD (IX+$05),$42 ;
 $8AD8 JP $84CD        ;

; Routine at 35547
;
; Used by the routine at #R$8AFF.
c$8ADB LD HL,$EB18   ;
 $8ADE LD DE,$0008   ;
 $8AE1 LD B,$08      ;
*$8AE3 PUSH HL       ;
 $8AE4 LD A,(HL)     ;
 $8AE5 AND A         ;
 $8AE6 JR Z,$8AF8    ;
 $8AE8 INC HL        ;
 $8AE9 LD A,(HL)     ;
 $8AEA CP (IX+$01)   ;
 $8AED JR NZ,$8AF8   ;
 $8AEF POP DE        ;
 $8AF0 INC HL        ;
 $8AF1 INC HL        ;
 $8AF2 LD E,(HL)     ;
 $8AF3 INC HL        ;
 $8AF4 LD D,(HL)     ;
 $8AF5 LD C,$01      ;
 $8AF7 RET           ;
*$8AF8 POP HL        ;
 $8AF9 ADD HL,DE     ;
 $8AFA DJNZ $8AE3    ;
 $8AFC LD C,$00      ;
 $8AFE RET           ;

; Routine at 35583
c$8AFF CALL $9FFB      ;
 $8B02 CALL $85B2      ;
 $8B05 DEC E           ;
 $8B06 CALL Z,$8A15    ;
 $8B09 XOR A           ;
 $8B0A LD (IX+$09),A   ;
 $8B0D LD (IX+$08),A   ;
 $8B10 CALL $8ADB      ;
 $8B13 DEC C           ;
 $8B14 JP NZ,$8B59     ;
 $8B17 CALL $882D      ;
 $8B1A LD A,C          ;
 $8B1B CP $03          ;
 $8B1D JR NZ,$8B45     ;
 $8B1F CALL $8ADB      ;
 $8B22 LD DE,$0004     ;
 $8B25 AND A           ;
 $8B26 SBC HL,DE       ;
 $8B28 PUSH IX         ;
 $8B2A LD IX,$0000     ;
 $8B2E EX DE,HL        ;
 $8B2F ADD IX,DE       ;
 $8B31 LD A,($EA91)    ; #REGa=player's screen number in #R$EA90.
 $8B34 CP (IX+$01)     ;
 $8B37 JR NZ,$8B3C     ;
 $8B39 CALL $9F4A      ; Display the sprite (without mask).
*$8B3C LD (IX+$00),$00 ;
 $8B40 POP IX          ;
 $8B42 JP $8B59        ;
*$8B45 LD A,(IX+$00)   ; #REGa=graphic index in #R$A4BE of the sprite data in
                       ; #REGix.
 $8B48 AND $FC         ;
 $8B4A LD C,A          ;
 $8B4B LD A,($5E12)    ; #REGa=(random) contents of #R$5E12.
 $8B4E RRA             ;
 $8B4F RRA             ;
 $8B50 AND $03         ;
 $8B52 ADD A,C         ;
 $8B53 LD (IX+$00),A   ;
 $8B56 LD DE,$3C3C     ;
*$8B59 LD A,($EA90)    ; #REGa=graphic index in #R$A4BE of the player in
                       ; #R$EA90.
 $8B5C CP $31          ;
 $8B5E JP C,$84CD      ;
 $8B61 LD DE,$3A58     ;
 $8B64 CALL $882D      ;
 $8B67 JP $84CD        ;

; Data block at 35690
b$8B6A DEFB $58,$00,$5C,$68,$68,$44,$00,$00
 $8B72 DEFB $02,$02,$00,$00,$00,$10,$20,$00
 $8B7A DEFB $5C,$5E,$98,$98,$90,$90,$94,$94
 $8B82 DEFB $5C,$5E,$60,$62,$4C,$4E,$68,$6A

; Display Chicken In Status Panel
;
; Displays the chicken in the status panel. The height of chicken sprite
; displayed is dependendent on the current health of the player. A full chicken
; is $1E pixels in height, and the maximum health of the player is $F0 ($1E x
; $08).
; .
; Used by the routines at #R$8A1E, #R$8C63, #R$8E26, #R$8ED7, #R$9443 and
; #R$988B.
; .
; #TABLE(default)
; { I | #REGix | Address of a sprite data structure. }
; TABLE#
@label=DisplayChicken
c$8B8A LD A,($5E28)  ; #REGa=contents of #R$5E28.
 $8B8D SRL A         ; {#REGc=calculated current height (in pixels) of the
 $8B8F SRL A         ; chicken sprite (current health of the player / $08).
 $8B91 SRL A         ;
 $8B93 LD C,A        ; }
 $8B94 LD A,($5E29)  ; #REGa=contents of #R$5E29.
 $8B97 SRL A         ; {#REGb=calculated previous height (in pixels) of the
 $8B99 SRL A         ; chicken sprite (previous health of the player / $08).
 $8B9B SRL A         ;
 $8B9D LD B,A        ; }
 $8B9E CP C          ; {If the current height of the chicken sprite is the same
 $8B9F RET Z         ; as the previous height of the chicken sprite, then we
                     ; have nothing to do.}
 $8BA0 LD A,($C543)  ; {#REGe=height (in pixels) of #R$C542.
 $8BA3 LD E,A        ; }
 $8BA4 LD A,($C48D)  ; {#REGd=height (in pixels) of #R$C48C.
 $8BA7 LD D,A        ; }
 $8BA8 PUSH IX       ; Store #REGix.
 $8BAA LD IX,$8C2D   ; #REGix=address of #R$8C2D.
 $8BAE PUSH DE       ; Store #REGde. #REGd=height (in pixels) of #R$C48C.
                     ; #REGe=height (in pixels) of #R$C542.
 $8BAF JR C,$8C12    ; If the current height of the chicken sprite is greater
                     ; than the previous height of the chicken sprite, then the
                     ; height of the chicken sprite has increased.
 $8BB1 LD A,($C48C)  ; {#REGde=width (in bytes) of #R$C48C.
 $8BB4 LD E,A        ;
 $8BB5 LD D,$00      ; }
 $8BB7 LD A,C        ; #REGa=current height (in pixels) of the chicken sprite.
 $8BB8 PUSH BC       ; Store #REGbc. #REGb=previous height (in pixels) of the
                     ; chicken sprite. #REGc=current height (in pixels) of the
                     ; chicken sprite.
 $8BB9 CALL $9AAD    ; Calculate the offset to #R$C48C.
 $8BBC POP BC        ; Restore #REGbc. #REGb=previous height (in pixels) of the
                     ; chicken sprite. #REGc=current height (in pixels) of the
                     ; chicken sprite.
 $8BBD LD DE,($A626) ; #REGde=address of #R$A626.
 $8BC1 PUSH DE       ;
 $8BC2 ADD HL,DE     ;
 $8BC3 LD ($A626),HL ;
 $8BC6 LD E,(HL)     ;
 $8BC7 INC HL        ;
 $8BC8 LD D,(HL)     ;
 $8BC9 LD A,($C48D)  ;
 $8BCC SUB C         ;
 $8BCD JR Z,$8BFC    ;
 $8BCF PUSH DE       ;
 $8BD0 LD (HL),A     ;
 $8BD1 LD A,($C48C)  ;
 $8BD4 DEC HL        ;
 $8BD5 LD (HL),A     ;
 $8BD6 PUSH HL       ;
 $8BD7 LD A,$14      ;
 $8BD9 LD (IX+$00),A ;
 $8BDC LD HL,$77C8   ;
 $8BDF LD A,H        ;
 $8BE0 SUB C         ;
 $8BE1 LD H,A        ;
 $8BE2 LD ($8C30),HL ;
 $8BE5 CALL $9213    ;
 $8BE8 LD HL,($8C30) ;
 $8BEB CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $8BEE LD A,($C48C)  ;
 $8BF1 LD B,A        ;
*$8BF2 LD (HL),$00   ;
 $8BF4 INC L         ;
 $8BF5 DJNZ $8BF2    ;
 $8BF7 POP HL        ;
 $8BF8 POP DE        ;
 $8BF9 LD (HL),E     ;
 $8BFA INC HL        ;
 $8BFB LD (HL),D     ;
*$8BFC POP HL        ;
 $8BFD LD ($A626),HL ;
@label=DisplayChickenComplete
*$8C00 POP DE        ; Restore #REGde. #REGd=height (in pixels) of #R$C48C.
                     ; #REGe=height (in pixels) of #R$C542.
 $8C01 LD A,E        ; {Set the height (in pixels) of #R$C542 to #REGe.
 $8C02 LD ($C543),A  ; }
 $8C05 LD A,D        ; {Set the height (in pixels) of #R$C48C to #REGd.
 $8C06 LD ($C48D),A  ; }
 $8C09 POP IX        ; Restore #REGix.
 $8C0B LD A,($5E28)  ; {Set the previous health of the player in #R$5E29 to the
 $8C0E LD ($5E29),A  ; current health of the player in #R$5E28.}
 $8C11 RET           ;
; #TABLE(default)
; { I | #REGb  | The previous height (in pixels) of the chicken sprite. }
; { I | #REGc  | The current height (in pixels) of the chicken sprite. }
; { I | #REGd  | The height (in pixels) of #R$C48C. }
; { I | #REGe  | The height (in pixels) of #R$C542. }
; { I | #REGix | Address of #R$8C2D. }
; TABLE#
@label=IncreaseChickenHeight
*$8C12 LD A,C        ; #REGa=current height (in pixels) of the chicken sprite.
 $8C13 LD ($C543),A  ; Set the height (in pixels) of #R$C542 to #REGa.
 $8C16 LD A,$13      ; {Set the graphic index of #R$8C2D in #REGix to #REGa;
 $8C18 LD (IX+$00),A ; #R$C542.}
 $8C1B LD HL,$77C8   ; #REGhl=(Y,X) position of the chicken sprite in the
                     ; status panel (Y=119,X=200).
 $8C1E LD ($8C30),HL ; Set the (Y,X) position of #R$8C2D in #REGix to #REGhl.
 $8C21 CALL $9213    ; Display the chicken sprite.
 $8C24 LD B,$06      ; #REGb=$06; width (in bytes) of the chicken sprite.
@label=DrawBlank1x8GlyphLineLoop
*$8C26 LD (HL),$00   ; Set screen pixels in #REGhl to $00; clear 1x8 glyh line.
 $8C28 INC L         ; #REGhl=next screen pixel address to clear the next 1x8
                     ; glyph line.
 $8C29 DJNZ $8C26    ; Loop until a single blank line the width of the chicken
                     ; sprite has been drawn
 $8C2B JR $8C00      ; We've displayed the chicken.

; Chicken Sprite Data
;
; Holds the chicken sprite data.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A600. }
; { $01         |                       | ??? }
; { $02         |                       | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Jump Table Index      | Jump table index in #R$9970. }
; { $06         |                       | ??? }
; { $07         |                       | ??? }
; TABLE#
@label=ChickenSpriteData
b$8C2D DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Display Game Over Screen
;
; Displays the game over screen.
; .
; Used by the routine at #R$8E26.
@label=DisplayGameOverScreen
c$8C35 CALL $8093    ; Clear the screen playing area.
 $8C38 LD HL,$BE4C   ; {Set #R$5E01 to 256 bytes lower than #R$BF4C.
 $8C3B LD ($5E01),HL ; }
 $8C3E LD HL,$3040   ; #REGhl=screen coordinates to display the "game over"
                     ; text at (Y=48,X=64).
 $8C41 LD DE,$8C59   ; #REGde=address of #R$8C59.
 $8C44 CALL $A1F3    ; Display "game over" text.
 $8C47 CALL $9641    ; Display the game statistics.
; This entry point is used by the routine at #R$96EC.
@label=GameOver
*$8C4A LD B,$14      ; #REGb=$14; outer loop counter.
 $8C4C LD HL,$0000   ; #REGhl=$0000; inner loop counter.
@label=GameOverWaitLoop
*$8C4F DEC HL        ; {Wait for 10 seconds.
 $8C50 LD A,H        ;
 $8C51 OR L          ;
 $8C52 JR NZ,$8C4F   ;
 $8C54 DJNZ $8C4F    ; }
 $8C56 JP $7C29      ; Display the game selection menu.

; Game Over Text
@label=GameOverText
t$8C59 DEFB $47        ; Colour attribute; bright white/black.
 $8C5A DEFM "GAME OVE" ; Message text.
 $8C62 DEFB $D2        ; Message terminator (R).

; Routine at 35939
c$8C63 CALL $9FFB      ;
 $8C66 CALL $90FB      ;
 $8C69 JR C,$8C6E      ;
 $8C6B JP $92E0        ;
*$8C6E CALL $9F56      ; Display the current sprite (with mask).
 $8C71 LD (IX+$00),$00 ;
 $8C75 CALL $A485      ;
 $8C78 LD C,$40        ;
 $8C7A LD A,($5E28)    ; #REGa=contents of #R$5E28.
 $8C7D ADD A,C         ;
 $8C7E JR C,$8C84      ;
 $8C80 CP $F0          ;
 $8C82 JR C,$8C86      ;
*$8C84 LD A,$F0        ; {Set the health of the player in #R$5E28 to #REGa;
*$8C86 LD ($5E28),A    ; $F0.}
 $8C89 JP $8B8A        ; Display the chicken (in the status panel).

; Routine at 35980
;
; Used by the routine at #R$8CB7.
c$8C8C DEC A         ;
 $8C8D LD ($5E3C),A  ;
 $8C90 JR Z,$8CA7    ;
 $8C92 AND $0F       ;
 $8C94 CALL Z,$A3E0  ; Play the game starting sound.
 $8C97 LD HL,$50C8   ;
 $8C9A CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $8C9D LD B,$06      ;
*$8C9F LD A,(HL)     ;
 $8CA0 OR $80        ;
 $8CA2 LD (HL),A     ;
 $8CA3 INC HL        ;
 $8CA4 DJNZ $8C9F    ;
 $8CA6 RET           ;
*$8CA7 LD HL,$50C8   ;
 $8CAA CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $8CAD LD B,$06      ;
*$8CAF LD A,(HL)     ;
 $8CB0 AND $7F       ;
 $8CB2 LD (HL),A     ;
 $8CB3 INC HL        ;
 $8CB4 DJNZ $8CAF    ;
 $8CB6 RET           ;

; Routine at 36023
c$8CB7 LD A,($5E3C)    ;
 $8CBA AND A           ;
 $8CBB JR NZ,$8C8C     ;
 $8CBD LD A,($5C78)    ; #REGa=the LSB of FRAMES.
 $8CC0 AND $03         ;
 $8CC2 JP NZ,$8D12     ;
 $8CC5 INC (IX+$06)    ;
 $8CC8 LD A,(IX+$07)   ;
 $8CCB CALL $9E89      ; Get the address of the sprite's graphic.
 $8CCE LD A,(DE)       ;
 $8CCF CP (IX+$06)     ;
 $8CD2 JR Z,$8D32      ;
; This entry point is used by the routine at #R$8D45.
*$8CD4 PUSH DE         ;
 $8CD5 PUSH HL         ;
 $8CD6 LD B,H          ;
 $8CD7 LD C,L          ;
 $8CD8 LD A,(IX+$04)   ;
 $8CDB LD (IX+$02),A   ;
 $8CDE SUB (IX+$06)    ;
 $8CE1 LD (IX+$04),A   ;
 $8CE4 LD L,(IX+$06)   ;
 $8CE7 LD H,$00        ;
 $8CE9 ADD HL,HL       ;
 $8CEA ADD HL,DE       ;
 $8CEB LD A,H          ;
 $8CEC LD (BC),A       ;
 $8CED DEC BC          ;
 $8CEE LD A,L          ;
 $8CEF LD (BC),A       ;
 $8CF0 PUSH HL         ;
 $8CF1 LD C,(HL)       ;
 $8CF2 LD B,(IX+$00)   ;
 $8CF5 PUSH BC         ;
 $8CF6 LD (HL),$01     ;
 $8CF8 LD A,(IX+$07)   ;
 $8CFB LD (IX+$00),A   ;
 $8CFE CALL $9F4A      ; Display the sprite (without mask).
 $8D01 POP BC          ;
 $8D02 POP HL          ;
 $8D03 LD (HL),C       ;
 $8D04 LD (IX+$00),B   ;
 $8D07 LD A,(IX+$02)   ;
 $8D0A LD (IX+$04),A   ;
 $8D0D POP HL          ;
 $8D0E POP DE          ;
 $8D0F LD (HL),D       ;
 $8D10 DEC HL          ;
 $8D11 LD (HL),E       ;
; This entry point is used by the routine at #R$8D45.
*$8D12 LD A,(IX+$05)   ;
 $8D15 PUSH AF         ;
 $8D16 LD A,($5C78)    ; #REGa=the LSB of FRAMES.
 $8D19 RRCA            ;
 $8D1A RRCA            ;
 $8D1B AND $07         ;
 $8D1D JR NZ,$8D20     ;
 $8D1F INC A           ;
*$8D20 OR $40          ;
 $8D22 LD (IX+$05),A   ;
 $8D25 LD A,(IX+$06)   ;
 $8D28 CALL $92E2      ;
 $8D2B POP AF          ;
 $8D2C LD (IX+$05),A   ;
 $8D2F JP $A45F        ; Play the player initialised/terminated sound.
*$8D32 LD A,(IX+$07)   ;
 $8D35 LD (IX+$00),A   ;
 $8D38 LD (IX+$06),$00 ;
 $8D3C LD (IX+$07),$00 ;
 $8D40 LD (IX+$02),$00 ;
 $8D44 RET             ;

; Routine at 36165
c$8D45 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $8D48 AND $03       ;
 $8D4A JR Z,$8D12    ;
 $8D4C DEC (IX+$06)  ;
 $8D4F JP M,$8D5B    ;
 $8D52 LD A,(IX+$07) ;
 $8D55 CALL $9E89    ; Get the address of the sprite's graphic.
 $8D58 JP $8CD4      ;
*$8D5B CALL $95A9    ;
 $8D5E JP $9443      ;

; Copy Static Data
;
; Copies the #R$600D to #R$EA90 and #R$645D to #R$EEE0.
; .
; Used by the routine at #R$7D9A.
@label=CopyStaticData
c$8D61 LD HL,$600D   ; #REGhl=address of #R$600D.
 $8D64 LD DE,$EA90   ; #REGde=address of #R$EA90.
 $8D67 LD BC,$1570   ; #REGbc=$1570; size (in bytes) of the data to copy.
 $8D6A LDIR          ; Copy #REGhl to #REGde, i.e. copy #R$600D to #R$EA90 (and
                     ; #R$645D to #R$EEE0).
 $8D6C RET           ;

; Routine at 36205
;
; Used by the routine at #R$8D77.
c$8D6D LD A,(IX+$02) ;
 $8D70 AND $0F       ;
 $8D72 RET Z         ;
 $8D73 DEC (IX+$02)  ;
 $8D76 RET           ;

; Routine at 36215
;
; Used by the routines at #R$80D2, #R$8DC4 and #R$8E26.
c$8D77 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $8D7A LD ($EE59),A  ;
 $8D7D PUSH BC       ;
 $8D7E PUSH DE       ;
 $8D7F PUSH HL       ;
 $8D80 CALL $8D6D    ;
 $8D83 LD A,(IX+$02) ;
 $8D86 OR $30        ;
 $8D88 LD (IX+$02),A ;
 $8D8B CALL $9FFB    ;
 $8D8E CALL $93BE    ; Get the game controller input.
 $8D91 LD C,A        ;
 $8D92 POP HL        ;
 $8D93 LD DE,$0000   ;
 $8D96 BIT 1,C       ;
 $8D98 JR NZ,$8D9E   ;
 $8D9A LD A,B        ;
 $8D9B NEG           ;
 $8D9D LD E,A        ;
*$8D9E BIT 0,C       ;
 $8DA0 JR NZ,$8DA3   ;
 $8DA2 LD E,B        ;
*$8DA3 BIT 2,C       ;
 $8DA5 JR NZ,$8DA8   ;
 $8DA7 LD D,B        ;
*$8DA8 BIT 3,C       ;
 $8DAA JR NZ,$8DB0   ;
 $8DAC LD A,B        ;
 $8DAD NEG           ;
 $8DAF LD D,A        ;
*$8DB0 POP HL        ;
 $8DB1 CALL $8F96    ;
 $8DB4 POP HL        ;
 $8DB5 CALL $8EEF    ;
 $8DB8 CALL $8FCA    ;
 $8DBB CALL $957D    ;
 $8DBE CALL $900A    ;
 $8DC1 JP $8F66      ;

; Routine at 36292
c$8DC4 LD BC,$2020   ;
 $8DC7 LD DE,$0101   ;
 $8DCA LD HL,$0707   ;
 $8DCD CALL $8D77    ;
 $8DD0 LD E,(IX+$06) ;
 $8DD3 LD D,(IX+$07) ;
 $8DD6 LD A,D        ;
 $8DD7 OR E          ;
 $8DD8 JR Z,$8E0F    ;
 $8DDA LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $8DDD AND $03       ;
 $8DDF JR NZ,$8E0F   ;
 $8DE1 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8DE4 AND $03       ;
 $8DE6 ADD A,$21     ;
 $8DE8 LD (IX+$00),A ;
 $8DEB LD A,D        ;
 $8DEC AND A         ;
 $8DED JP P,$8DF2    ;
 $8DF0 NEG           ;
*$8DF2 LD C,A        ;
 $8DF3 LD A,E        ;
 $8DF4 AND A         ;
 $8DF5 JP P,$8DFA    ;
 $8DF8 NEG           ;
*$8DFA CP C          ;
 $8DFB JR NC,$8E1A   ;
 $8DFD LD A,D        ;
 $8DFE AND A         ;
 $8DFF LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8E02 JP M,$8E07    ;
 $8E05 ADD A,$04     ;
*$8E07 ADD A,$08     ;
*$8E09 LD (IX+$00),A ;
 $8E0C CALL $A3C7    ; Play the player walking sound.
*$8E0F CALL $93BE    ; Get the game controller input.
 $8E12 AND $10       ;
 $8E14 CALL Z,$8283  ;
 $8E17 JP $8E78      ;
*$8E1A LD A,E        ;
 $8E1B AND A         ;
 $8E1C LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8E1F JP M,$8E09    ;
 $8E22 ADD A,$04     ;
 $8E24 JR $8E09      ;

; Routine at 36390
c$8E26 LD BC,$2020   ;
 $8E29 LD DE,$0303   ;
 $8E2C LD HL,$0707   ;
 $8E2F CALL $8D77    ;
 $8E32 LD E,(IX+$06) ;
 $8E35 LD D,(IX+$07) ;
 $8E38 LD A,D        ;
 $8E39 OR E          ;
 $8E3A JR Z,$8E70    ;
 $8E3C LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $8E3F AND $03       ;
 $8E41 JR NZ,$8E70   ;
 $8E43 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8E46 AND $03       ;
 $8E48 INC A         ;
 $8E49 LD (IX+$00),A ;
 $8E4C LD A,D        ;
 $8E4D AND A         ;
 $8E4E JP P,$8E53    ;
 $8E51 NEG           ;
*$8E53 LD C,A        ;
 $8E54 LD A,E        ;
 $8E55 AND A         ;
 $8E56 JP P,$8E5B    ;
 $8E59 NEG           ;
*$8E5B CP C          ;
 $8E5C JR NC,$8E94   ;
 $8E5E LD A,D        ;
 $8E5F AND A         ;
 $8E60 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8E63 JP M,$8E68    ;
 $8E66 ADD A,$04     ;
*$8E68 ADD A,$08     ;
*$8E6A LD (IX+$00),A ;
 $8E6D CALL $A3C7    ; Play the player walking sound.
*$8E70 CALL $93BE    ; Get the game controller input.
 $8E73 AND $10       ;
 $8E75 CALL Z,$8134  ;
; This entry point is used by the routines at #R$80D2 and #R$8DC4.
*$8E78 CALL $83EA    ;
 $8E7B LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $8E7E AND $0F       ;
 $8E80 JR NZ,$8E8E   ;
 $8E82 LD A,($5E28)  ; #REGa=contents of #R$5E28.
 $8E85 DEC A         ; Decrement the health of the player.
 $8E86 JR Z,$8EA0    ;
 $8E88 LD ($5E28),A  ; Set the health of the player in #R$5E28 to #REGa.
 $8E8B CALL $8B8A    ; Display the chicken (in the status panel).
; This entry point is used by the routines at #R$81F0, #R$8301, #R$845F,
; #R$85F7 and #R$8787.
*$8E8E CALL $9FCA    ;
 $8E91 JP $A01A      ;
*$8E94 LD A,E        ;
 $8E95 AND A         ;
 $8E96 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8E99 JP M,$8E6A    ;
 $8E9C ADD A,$04     ;
 $8E9E JR $8E6A      ;
; This entry point is used by the routines at #R$8A1E and #R$8ED7.
*$8EA0 LD A,($5E21)  ; #REGa=contents of #R$5E21; current player's lives.
 $8EA3 AND A         ;
 $8EA4 JP Z,$8C35    ;
 $8EA7 DEC A         ; Decrement the current player's lives.
 $8EA8 LD ($5E21),A  ; Set the current player's lives in #R$5E21 to #REGa.
 $8EAB LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $8EAE DEC A         ;
 $8EAF CP $30        ;
 $8EB1 JR C,$8EC6    ;
 $8EB3 LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
*$8EB6 LD ($EA97),A  ;
 $8EB9 CALL $9E89    ; Get the address of the sprite's graphic.
 $8EBC LD A,(DE)     ;
 $8EBD LD ($EA96),A  ;
 $8EC0 LD A,$67      ;
 $8EC2 LD ($EA90),A  ;
 $8EC5 RET           ;
*$8EC6 LD A,($5E16)  ;
 $8EC9 LD ($EA93),A  ;
 $8ECC LD A,($5E17)  ;
 $8ECF LD ($EA94),A  ;
 $8ED2 LD A,($5E15)  ; #REGa=contents of #R$5E15; the graphic index in #R$A4BE
                     ; of a sprite mask.
 $8ED5 JR $8EB6      ;

; Routine at 36567
;
; Used by the routine at #R$85EA.
c$8ED7 LD A,($5E28)  ; #REGa=contents of #R$5E28.
 $8EDA SUB $20       ; Reduce the health of the player by $20.
 $8EDC JR Z,$8EE1    ;
 $8EDE JR NC,$8EE9   ;
 $8EE0 XOR A         ;
*$8EE1 LD ($5E28),A  ; #REGa=contents of #R$5E28.
 $8EE4 CALL $8B8A    ; Display the chicken (in the status panel).
 $8EE7 JR $8EA0      ;
*$8EE9 LD ($5E28),A  ; #REGa=contents of #R$5E28.
 $8EEC JP $8B8A      ; Display the chicken (in the status panel).

; Routine at 36591
;
; Used by the routine at #R$8D77.
c$8EEF LD A,(IX+$02)  ;
 $8EF2 AND $0F        ;
 $8EF4 JR NZ,$8F35    ;
 $8EF6 LD A,E         ;
 $8EF7 ADD A,(IX+$06) ;
 $8EFA JP M,$8F21     ;
 $8EFD CP L           ;
 $8EFE JR C,$8F01     ;
 $8F00 LD A,L         ;
*$8F01 LD (IX+$06),A  ;
 $8F04 LD A,D         ;
 $8F05 ADD A,(IX+$07) ;
 $8F08 JP M,$8F2B     ;
 $8F0B CP H           ;
 $8F0C JR C,$8F0F     ;
 $8F0E LD A,H         ;
*$8F0F LD (IX+$07),A  ;
 $8F12 LD A,(IX+$06)  ;
 $8F15 CALL $8F80     ;
 $8F18 LD E,A         ;
 $8F19 LD A,(IX+$07)  ;
 $8F1C CALL $8F80     ;
 $8F1F LD D,A         ;
 $8F20 RET            ;
*$8F21 NEG            ;
 $8F23 CP L           ;
 $8F24 JR C,$8F27     ;
 $8F26 LD A,L         ;
*$8F27 NEG            ;
 $8F29 JR $8F01       ;
*$8F2B NEG            ;
 $8F2D CP H           ;
 $8F2E JR C,$8F31     ;
 $8F30 LD A,H         ;
*$8F31 NEG            ;
 $8F33 JR $8F0F       ;
*$8F35 LD A,(IX+$06)  ;
 $8F38 AND A          ;
 $8F39 JP M,$8F52     ;
 $8F3C AND $F0        ;
 $8F3E JR Z,$8F42     ;
 $8F40 LD A,$02       ;
*$8F42 LD E,A         ;
 $8F43 LD A,(IX+$07)  ;
 $8F46 AND A          ;
 $8F47 JP M,$8F5C     ;
 $8F4A AND $F0        ;
 $8F4C JR Z,$8F50     ;
 $8F4E LD A,$02       ;
*$8F50 LD D,A         ;
 $8F51 RET            ;
*$8F52 NEG            ;
 $8F54 AND $F0        ;
 $8F56 JR Z,$8F42     ;
 $8F58 LD A,$FE       ;
 $8F5A JR $8F42       ;
*$8F5C NEG            ;
 $8F5E AND $F0        ;
 $8F60 JR Z,$8F50     ;
 $8F62 LD A,$FE       ;
 $8F64 JR $8F50       ;

; Routine at 36710
;
; Used by the routine at #R$8D77.
c$8F66 BIT 4,(IX+$02) ;
 $8F6A JR NZ,$8F73    ;
 $8F6C LD A,E         ;
 $8F6D ADD A,(IX+$03) ;
 $8F70 LD (IX+$03),A  ;
*$8F73 BIT 5,(IX+$02) ;
 $8F77 RET NZ         ;
 $8F78 LD A,D         ;
 $8F79 ADD A,(IX+$04) ;
 $8F7C LD (IX+$04),A  ;
 $8F7F RET            ;

; Routine at 36736
;
; Used by the routine at #R$8EEF.
c$8F80 AND A         ;
 $8F81 JP P,$8F8F    ;
 $8F84 NEG           ;
 $8F86 RRCA          ;
 $8F87 RRCA          ;
 $8F88 RRCA          ;
 $8F89 RRCA          ;
 $8F8A AND $0F       ;
 $8F8C NEG           ;
 $8F8E RET           ;
*$8F8F RRCA          ;
 $8F90 RRCA          ;
 $8F91 RRCA          ;
 $8F92 RRCA          ;
 $8F93 AND $0F       ;
 $8F95 RET           ;

; Routine at 36758
;
; Used by the routine at #R$8D77.
c$8F96 LD A,(IX+$02) ;
 $8F99 AND $0F       ;
 $8F9B RET NZ        ;
 $8F9C LD A,(IX+$06) ;
 $8F9F AND A         ;
 $8FA0 JR Z,$8FAD    ;
 $8FA2 JP M,$8FBE    ;
 $8FA5 SUB L         ;
 $8FA6 JP P,$8FAA    ;
*$8FA9 XOR A         ;
*$8FAA LD (IX+$06),A ;
*$8FAD LD A,(IX+$07) ;
 $8FB0 AND A         ;
 $8FB1 RET Z         ;
 $8FB2 JP M,$8FC4    ;
 $8FB5 SUB H         ;
 $8FB6 JP P,$8FBA    ;
*$8FB9 XOR A         ;
*$8FBA LD (IX+$07),A ;
 $8FBD RET           ;
*$8FBE ADD A,L       ;
 $8FBF JP M,$8FAA    ;
 $8FC2 JR $8FA9      ;
*$8FC4 ADD A,H       ;
 $8FC5 JP M,$8FBA    ;
 $8FC8 JR $8FB9      ;

; Routine at 36810
;
; Used by the routine at #R$8D77.
c$8FCA PUSH DE        ;
 $8FCB LD A,E         ;
 $8FCC ADD A,(IX+$03) ;
 $8FCF LD E,A         ;
 $8FD0 LD D,(IX+$04)  ;
 $8FD3 LD B,$10       ;
 $8FD5 CALL $8FE9     ;
 $8FD8 POP DE         ;
 $8FD9 PUSH DE        ;
 $8FDA LD E,(IX+$03)  ;
 $8FDD LD A,D         ;
 $8FDE ADD A,(IX+$04) ;
 $8FE1 LD D,A         ;
 $8FE2 LD B,$20       ;
 $8FE4 CALL $8FE9     ;
 $8FE7 POP DE         ;
 $8FE8 RET            ;

; Routine at 36841
;
; Used by the routine at #R$8FCA.
c$8FE9 LD HL,$5E1D   ;
 $8FEC LD A,E        ;
 $8FED SUB $58       ;
 $8FEF JP P,$8FF4    ;
 $8FF2 NEG           ;
*$8FF4 CP (HL)       ;
 $8FF5 RET NC        ;
 $8FF6 INC HL        ;
 $8FF7 LD A,D        ;
 $8FF8 SUB $68       ;
 $8FFA JP P,$8FFF    ;
 $8FFD NEG           ;
*$8FFF CP (HL)       ;
 $9000 RET NC        ;
 $9001 LD A,B        ;
 $9002 CPL           ;
 $9003 AND (IX+$02)  ;
 $9006 LD (IX+$02),A ;
 $9009 RET           ;

; Routine at 36874
;
; Used by the routine at #R$8D77.
c$900A PUSH DE        ;
 $900B LD A,E         ;
 $900C ADD A,(IX+$03) ;
 $900F LD E,A         ;
 $9010 LD D,(IX+$04)  ;
 $9013 LD A,$10       ;
 $9015 EX AF,AF'      ;
 $9016 CALL $902B     ;
 $9019 POP DE         ;
 $901A PUSH DE        ;
 $901B LD E,(IX+$03)  ;
 $901E LD A,D         ;
 $901F ADD A,(IX+$04) ;
 $9022 LD D,A         ;
 $9023 LD A,$20       ;
 $9025 EX AF,AF'      ;
 $9026 CALL $902B     ;
 $9029 POP DE         ;
 $902A RET            ;

; Routine at 36907
;
; Used by the routine at #R$900A.
c$902B LD C,(IX+$01) ;
 $902E LD B,$00      ;
 $9030 LD HL,$757D   ;
 $9033 SLA C         ;
 $9035 RL B          ;
 $9037 ADD HL,BC     ;
 $9038 LD C,(HL)     ;
 $9039 INC HL        ;
 $903A LD B,(HL)     ;
*$903B LD A,(BC)     ;
 $903C INC BC        ;
 $903D LD L,A        ;
 $903E LD A,(BC)     ;
 $903F INC BC        ;
 $9040 LD H,A        ;
 $9041 OR L          ;
 $9042 RET Z         ;
 $9043 PUSH BC       ;
 $9044 LD BC,$757D   ;
 $9047 AND A         ;
 $9048 SBC HL,BC     ;
 $904A INC HL        ;
 $904B LD A,(HL)     ;
 $904C CP (IX+$01)   ;
 $904F JR Z,$9055    ;
 $9051 LD BC,$0008   ; #REGbc=$0008; size (in bytes) of a sprite data
                     ; structure.
 $9054 ADD HL,BC     ;
*$9055 INC HL        ;
 $9056 INC HL        ;
 $9057 LD C,(HL)     ;
 $9058 INC HL        ;
 $9059 LD B,(HL)     ;
 $905A INC HL        ;
 $905B LD A,(HL)     ;
 $905C INC HL        ;
 $905D BIT 2,A       ;
 $905F JR NZ,$909B   ;
 $9061 BIT 3,A       ;
 $9063 JR NZ,$9098   ;
 $9065 LD A,(HL)     ;
 $9066 SRA A         ;
 $9068 SRA A         ;
 $906A AND $FC       ;
 $906C ADD A,C       ;
 $906D SUB E         ;
 $906E NEG           ;
 $9070 LD C,A        ;
 $9071 LD A,(HL)     ;
 $9072 RLCA          ;
 $9073 RLCA          ;
 $9074 AND $3C       ;
 $9076 INC HL        ;
 $9077 CP C          ;
 $9078 JR C,$9098    ;
 $907A LD A,(HL)     ;
 $907B SRA A         ;
 $907D SRA A         ;
 $907F AND $FC       ;
 $9081 ADD A,B       ;
 $9082 SUB D         ;
 $9083 LD B,A        ;
 $9084 LD A,(HL)     ;
 $9085 INC HL        ;
 $9086 RLCA          ;
 $9087 RLCA          ;
 $9088 AND $3C       ;
 $908A CP B          ;
 $908B JR C,$9098    ;
 $908D EX AF,AF'     ;
 $908E LD C,A        ;
 $908F EX AF,AF'     ;
 $9090 LD A,C        ;
 $9091 CPL           ;
 $9092 AND (IX+$02)  ;
*$9095 LD (IX+$02),A ;
*$9098 POP BC        ;
 $9099 JR $903B      ;
*$909B LD A,(HL)     ;
 $909C SRA A         ;
 $909E SRA A         ;
 $90A0 AND $FC       ;
 $90A2 ADD A,C       ;
 $90A3 SUB E         ;
 $90A4 NEG           ;
 $90A6 LD C,A        ;
 $90A7 LD A,(HL)     ;
 $90A8 RLCA          ;
 $90A9 RLCA          ;
 $90AA AND $3C       ;
 $90AC INC HL        ;
 $90AD CP C          ;
 $90AE JR C,$9098    ;
 $90B0 LD A,(HL)     ;
 $90B1 SRA A         ;
 $90B3 SRA A         ;
 $90B5 AND $FC       ;
 $90B7 ADD A,B       ;
 $90B8 SUB D         ;
 $90B9 LD B,A        ;
 $90BA LD A,(HL)     ;
 $90BB INC HL        ;
 $90BC RLCA          ;
 $90BD RLCA          ;
 $90BE AND $3C       ;
 $90C0 CP B          ;
 $90C1 JR C,$9098    ;
 $90C3 EX AF,AF'     ;
 $90C4 LD C,A        ;
 $90C5 EX AF,AF'     ;
 $90C6 LD A,C        ;
 $90C7 OR (IX+$02)   ;
 $90CA JR $9095      ;

; Check If Player Walked Though Door
;
; Checks if the player has walked through the specified door.
; .
; Used by the routines at #R$91F2, #R$9222 and #R$9731.
; .
; #TABLE(default)
; { I | #REGb  | The interior width (in pixels) of the door. }
; { I | #REGc  | The interior height (in pixels) of the door. }
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=CheckIfPlayerWalkedThroughDoor
c$90CC LD A,($EA92)   ;
 $90CF AND $0F        ;
 $90D1 RET NZ         ;
 $90D2 LD A,($EA90)   ; #REGa=graphic index in #R$A4BE of the player in
                      ; #R$EA90.
 $90D5 DEC A          ;
 $90D6 CP $30         ;
 $90D8 RET NC         ;
 $90D9 BIT 6,(IX+$05) ;
 $90DD JR Z,$90E1     ;
 $90DF SRL C          ;
*$90E1 LD A,($EA93)   ;
 $90E4 SUB (IX+$03)   ;
 $90E7 CP C           ;
 $90E8 RET NC         ;
 $90E9 BIT 6,(IX+$05) ;
 $90ED JR NZ,$90F1    ;
 $90EF SRL B          ;
*$90F1 LD A,($EA94)   ;
 $90F4 SUB (IX+$04)   ;
 $90F7 NEG            ;
 $90F9 CP B           ;
 $90FA RET            ;

; Routine at 37115
;
; Used by the routines at #R$8C63, #R$92F5 and #R$988B.
c$90FB LD A,($EA93)  ;
 $90FE SUB (IX+$03)  ;
 $9101 JP P,$9106    ;
 $9104 NEG           ;
*$9106 CP $0C        ;
 $9108 RET NC        ;
 $9109 LD A,($EA94)  ;
 $910C SUB (IX+$04)  ;
 $910F JP P,$9114    ;
 $9112 NEG           ;
*$9114 CP $0C        ;
 $9116 RET           ;

; Enter New Screen
;
; The player has entered a new screen.
; .
; Used by the routines at #R$91F2, #R$9244 and #R$9731.
@label=EnterNewScreen
c$9117 CALL $9286     ;
 $911A LD A,(IX+$01)  ; {Set player's screen number in #R$EA90 to the screen
 $911D LD ($EA91),A   ; number of the sprite data in #REGix.}
 $9120 LD A,(IX+$02)  ; #REGa=flags of the sprite data in #REGix.
 $9123 RLCA           ; {#REGa=calculated X coordinate increment/decrement of
 $9124 AND $1E        ; the character.}
 $9126 ADD A,(IX+$03) ; #REGa=player's new X coordinate.
 $9129 LD ($EA93),A   ; Set player's X coordinate in #R$EA90 to the new X
                      ; coordinate in #REGa.
 $912C LD A,(IX+$02)  ; #REGa=flags of the sprite data in #REGix.
 $912F RRCA           ; {#REGa=calculated Y coordinate increment/decrement of
 $9130 RRCA           ; the character.
 $9131 RRCA           ;
 $9132 AND $1E        ;
 $9134 NEG            ; }
 $9136 ADD A,(IX+$04) ; #REGa=player's new Y coordinate.
 $9139 LD ($EA94),A   ; Set player's Y coordinate in #R$EA90 to the new Y
                      ; coordinate in #REGa.
 $913C CALL $986A     ;
 $913F LD A,($EA92)   ;
 $9142 OR $0F         ;
 $9144 LD ($EA92),A   ; Set the flags in #R$EA90 to #REGa.
; This entry point is used by the routine at #R$7D9A.
@label=DisplayScreen
*$9147 LD A,($EA91)   ; #REGa=player's screen number in #R$EA90.
 $914A CALL $96AF     ; Set the screen visited flag.
 $914D CALL $8093     ; Clear the screen playing area.
 $9150 CALL $9BEA     ; Draw the screen.
 $9153 CALL $A240     ; Colour the status panel.
 $9156 CALL $A13B     ; Display the collected items in the status panel.
 $9159 CALL $A403     ;
 $915C JP $7DC3       ; Start the game loop.

; Process Open Normal Or Cave Door
;
; Processs an open normal door or open cave door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessOpenNormalOrCaveDoor
c$915F LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $9162 AND $01       ; {If bit1 of #REGa is set, then display the door.
 $9164 JP NZ,$91F2   ; }
 $9167 LD A,($5E2E)  ; #REGa=(random) contents of #R$5E2E.
 $916A AND A         ; {If #REGa is zero, then shut the door.
 $916B JR Z,$9174    ; }
 $916D DEC A         ; {Decrement the door counter.
 $916E LD ($5E2E),A  ; }
 $9171 JP $91F2      ; Display the door.
@label=CheckShutDoor
*$9174 LD A,($5E2D)  ;
 $9177 AND A         ;
 $9178 JP NZ,$91F2   ;
 $917B JR $9193      ;

; Process Shut Normal Or Cave Door
;
; Processs a shut normal door or shut cave door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessShutNormalOrCaveDoor
c$917D LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $9180 AND $01       ; {If bit1 of #REGa is set, then display the door.
 $9182 JP NZ,$91FE   ; }
 $9185 LD A,($5E2E)  ; #REGa=(random) contents of #R$5E2E.
 $9188 AND A         ; {If #REGa is zero, then open the door.
 $9189 JP Z,$9193    ; }
 $918C DEC A         ; {Decrement the door counter.
 $918D LD ($5E2E),A  ; }
 $9190 JP $91FE      ; Display the door.
; Toggles a normal door, or cave door, from open to shut and vice-versa.
; .
; This entry point is used by the routine at #R$915F.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ToggleDoor
*$9193 LD A,$5E      ;
 $9195 LD ($5E2E),A  ;
 $9198 LD A,(IX+$05) ; #REGa=flags of the door data in #REGix.
 $919B PUSH AF       ; Store #REGaf.
 $919C OR $03        ; Set bit0-1 of the flags of the door; use XOR when
                     ; drawing the background item.
 $919E LD (IX+$05),A ; Set the flags of the door data in #REGix to #REGa.
 $91A1 CALL $9213    ; Display the door.
 $91A4 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the door data in
                     ; #REGix.
 $91A7 XOR $01       ; Toggle the graphic index of the trap door, i.e. from
                     ; #R$C770 to #R$C7F2 and vice-versa.
 $91A9 CALL $9260    ;
 $91AC CALL $9213    ; Display the door.
 $91AF POP AF        ; Restore #REGaf; initial flags of the door.
 $91B0 LD (IX+$05),A ; Set the flags of the door data in #REGix to #REGa.
 $91B3 CALL $9546    ;
 $91B6 CALL $91FE    ; Display the door.
 $91B9 JP $A46E      ; Play the door sound.

; Process Shut Trap Door
;
; Processes a shut trap door. A shut trap door can be randomly opened.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessShutTrapDoor
c$91BC LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $91BF AND A         ; {If #REGa is not zero, then display the door.
 $91C0 JP NZ,$91FE   ; }
 $91C3 JR $91CC      ; Open the shut trap door.

; Process Open Trap Door
;
; Processes an open trap door. An open trap door can be randomly shut.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessOpenTrapDoor
c$91C5 LD A,($5E05)  ; #REGa=(random) contents of #R$5E05.
 $91C8 AND A         ; {If the random value is not zero, then check if the
 $91C9 JP NZ,$9731   ; player is over the open trap door.}
; Toggles a trap door from open to shut and vice-versa.
; .
; This entry point is used by the routine at #R$91BC.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ToggleTrapDoor
*$91CC LD A,(IX+$05) ; #REGa=flags of the door data in #REGix.
 $91CF PUSH AF       ; Store #REGaf.
 $91D0 OR $03        ; Set bit0-1 of the flags of the door; use XOR when
                     ; drawing the background item.
 $91D2 LD (IX+$05),A ; Set the flags of the door data in #REGix to #REGa.
 $91D5 CALL $9213    ; Display the door.
 $91D8 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the door data in
                     ; #REGix.
 $91DB XOR $01       ; Toggle the graphic index of the trap door, i.e. from
                     ; #R$C770 to #R$C7F2 and vice-versa.
 $91DD LD (IX+$00),A ; Set the graphic index in #R$A4BE of the door data in
                     ; #REGix to #REGa.
 $91E0 CALL $9213    ; Display the door.
 $91E3 POP AF        ; Restore #REGaf; initial flags of the door.
 $91E4 LD (IX+$05),A ; Set the flags of the door data in #REGix to #REGa.
 $91E7 CALL $91FE    ; Display the door.
 $91EA JP $A46E      ; Play the door sound.

; Process Big Door
;
; Processes a big door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessBigDoor
c$91ED LD BC,$2020   ; #REGb=$20; interior width (in pixels) of the door.
                     ; #REGc=$20; interior height (in pixels) of the door.
 $91F0 JR $91F5      ; Process the door.

; Process Normal Or Cave Door
;
; Processes a normal door or a cave door. Also processes a secret door.
; .
; Used by the routines at #R$915F and #R$942F.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessNormalOrCaveDoor
c$91F2 LD BC,$1111   ; #REGb=$11; interior width (in pixels) of the door.
                     ; #REGc=$11; interior height (in pixels) of the door.
; Processes the specified door.
; .
; Checks if the player has walked through the door and entered a new screen. If
; the player has not walked through the door, then the door is displayed.
; .
; This entry point is used by the routines at #R$91ED and #R$961B.
; .
; #TABLE(default)
; { I | #REGb  | The interior width (in pixels) of the door. }
; { I | #REGc  | The interior height (in pixels) of the door. }
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessDoor
*$91F5 CALL $90CC    ; Check if the player has walked through the door.
 $91F8 CALL C,$9117  ; If the carry flag is set, then the player has walked
                     ; through the door and entered a new screen.
 $91FB JP $91FE      ; Display the door.

; Display Background Item
;
; Displays the specified background item.
; .
; This entry point is used by the routines at #R$917D, #R$91BC, #R$91C5,
; #R$9244, #R$9252, #R$942F, #R$961B and #R$9731.
; .
; #TABLE(default)
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=DisplayBackgroundItem
c$91FE LD E,(IX+$03) ; #REGe=X coordinate of the background item data in
                     ; #REGix.
 $9201 LD D,(IX+$04) ; #REGd=Y coordinate of the background item data in
                     ; #REGix.
 $9204 DEC D         ; Decrement the Y coordinate of the background item in
                     ; #REGd.
 $9205 LD C,(IX+$00) ; #REGc=graphic index of the background item data in
                     ; #REGix.
 $9208 LD B,(IX+$05) ; #REGb=flags of the background item data in #REGix.
 $920B CALL $9980    ; Colour the background item.
 $920E LD A,($5E14)  ; #REGa=contents of #R$5E14.
 $9211 AND A         ; {If the screen's sprites have been displayed, then we're
 $9212 RET NZ        ; done. We don't need to display the background item.}
; Displays (but does not colour) the specified background item.
; .
; This entry point is used by the routines at #R$8B8A, #R$917D and #R$91C5.
; .
; #TABLE(default)
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=DisplayBackgroundItem1
*$9213 LD E,(IX+$03) ; #REGe=X coordinate of the background item data in
                     ; #REGix.
 $9216 LD D,(IX+$04) ; #REGd=Y coordinate of the background item data in
                     ; #REGix.
 $9219 LD C,(IX+$00) ; #REGc=graphic index of the background item data in
                     ; #REGix.
 $921C LD B,(IX+$05) ; #REGb=flags of the background item data in #REGix.
 $921F JP $9962      ; Draw the background item.

; Check If Door Can Be Unlocked
;
; Checks if the specified locked door can be unlocked.
; .
; Used by the routines at #R$9244 and #R$9252.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=CheckIfDoorCanBeUnlocked
c$9222 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $9225 AND $03       ;
 $9227 LD HL,$925C   ;
 $922A CALL $926C    ;
 $922D LD D,(HL)     ;
 $922E LD E,$81      ;
 $9230 CALL $9273    ;
 $9233 JP NZ,$923F   ;
 $9236 CALL $954D    ;
 $9239 LD BC,$1111   ; #REGb=$11; interior width (in pixels) of the door.
                     ; #REGc=$11; interior height (in pixels) of the door.
 $923C JP $90CC      ; Check if the player has walked through the door.
@label=DoorCannotBeUnlocked
*$923F CALL $9565    ;
 $9242 AND A         ; Clear carry flag!
 $9243 RET           ;

; Process Locked Normal Door
;
; Processes a locked normal door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessLockedNormalDoor
c$9244 CALL $9222    ; Check if the door can be unlocked.
 $9247 JP NC,$91FE   ; If the carry flag is not set, then the door cannot be
                     ; unlocked. Display it.
 $924A LD A,$02      ; #REGa=$02; normal door to be unlocked (#R$A76E).
; Unlocks the specified locked door.
; .
; This entry point is used by the routine at #R$9252.
; .
; #TABLE(default)
; { I | #REGa  | The type of door to be unlocked ($01=cave door (#R$BCCE).
; $02=normal door (#R$A76E)). }
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=UnlockDoor
*$924C CALL $9260    ; Open the door.
 $924F JP $9117      ; The player has unlocked the door and entered a new
                     ; screen.

; Process Locked Cave Door
;
; Processes a locked cave door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessLockedCaveDoor
c$9252 CALL $9222    ; Check if the door can be unlocked.
 $9255 JP NC,$91FE   ; If the carry flag is not set, then the door cannot be
                     ; unlocked. Display it.
 $9258 LD A,$01      ; #REGa=$01; cave door to be unlocked (#R$BCCE).
 $925A JR $924C      ; Unlock the locked cave door.

; Data block at 925C
b$925C DEFB $42,$44,$45,$46

; Open Door
;
; Opens the specified door.
; .
; Used by the routines at #R$917D and #R$9244.
; .
; #TABLE(default)
; { I | #REGa  | The type of door to be opened ($01=cave door (#R$BCCE).
; $02=normal door (#R$A76E)). }
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=OpenDoor
c$9260 PUSH IX       ; {#REGhl=address of the background item's data structure.
 $9262 POP HL        ; }
 $9263 LD (HL),A     ;
 $9264 EX AF,AF'     ;
 $9265 LD A,L        ;
 $9266 XOR $08       ;
 $9268 LD L,A        ;
 $9269 EX AF,AF'     ;
 $926A LD (HL),A     ;
 $926B RET           ;

; Get Lookup Table Entry
;
; Gets a lookup table entry.
; .
; Used by the routines at #R$9222 and #R$A00E.
; .
; #TABLE(default)
; { I | #REGa  | The offset in the lookup table. }
; { I | #REGhl | Start address of the lookup table. }
; { O | #REGhl | Address of the required entry in the lookup table. }
; TABLE#
@label=GetLookupTableEntry
c$926C ADD A,L       ; {#REGl=calculated LSB of the address of the required
 $926D LD L,A        ; entry in the lookup table.}
 $926E LD A,H        ; {#REGh=calculated MSB of the address of the required
 $926F ADC A,$00     ; entry in the lookup table.
 $9271 LD H,A        ; }
 $9272 RET           ;

; Routine at 37491
;
; Used by the routines at #R$8906, #R$8988 and #R$9222.
c$9273 LD B,$03      ;
 $9275 LD HL,$5E32   ;
*$9278 LD A,(HL)     ;
 $9279 CP E          ;
 $927A INC HL        ;
 $927B JR NZ,$9280   ;
 $927D LD A,(HL)     ;
 $927E CP D          ;
 $927F RET Z         ;
*$9280 INC HL        ;
 $9281 INC HL        ;
 $9282 INC HL        ;
 $9283 DJNZ $9278    ;
 $9285 RET           ;

; Routine at 37510
;
; Used by the routines at #R$9117 and #R$9546.
c$9286 PUSH IX       ;
 $9288 POP HL        ;
 $9289 LD A,L        ;
 $928A XOR $08       ;
 $928C LD L,A        ;
 $928D PUSH HL       ;
 $928E POP IX        ;
 $9290 RET           ;

; Display Current Screen Sprites
;
; Displays the current screen's sprites.
; .
; Used by the routine at #R$7E23.
@label=DisplayScreenSprites
c$9291 LD IX,$EA90   ; #REGix=address of #R$EA90.
; #TABLE(default)
; { I | #REGix  | Address of a sprite data stucture. }
; TABLE#
@label=DisplayScreenSpritesLoop
*$9295 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $9298 AND A         ; {If the graphic index of the sprite is zero, then skip.
 $9299 JR Z,$92A6    ; }
 $929B LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $929E CP (IX+$01)   ; Compare the sprite's screen number in #REGix with the
                     ; player's screen number in #R$EA90.
 $92A1 JR NZ,$92A6   ; If the sprite's screen number is not the same as the
                     ; player's screen number, then the sprite is not on the
                     ; current screen. Don't display it.
 $92A3 CALL $9F4A    ; Display the sprite (without mask).
@label=SkipDisplaySprite
*$92A6 LD DE,$0008   ; #REGde=$0008; size (in bytes) of a sprite data
                     ; structure.
 $92A9 ADD IX,DE     ; #REGix=next sprite.
 $92AB PUSH IX       ; {#REGhl=next sprite.
 $92AD POP HL        ; }
 $92AE LD DE,$EE60   ; #REGde=address of #R$EE60.
 $92B1 AND A         ; Clear carry flag!
 $92B2 SBC HL,DE     ; Subtract #REGde from #REGhl; we are checking if the next
                     ; sprite data structure is #R$EE60. If it is then all the
                     ; screen's non nasty sprites have been processed.
 $92B4 JR C,$9295    ; If there is still a non nasty sprite to process, then
                     ; process it.
; #TABLE(default)
; { I | #REGix  | Address of a nasty sprite data stucture. }
; TABLE#
@label=DisplayScreenNastySpritesLoop
*$92B6 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the nasty sprite data
                     ; in #REGix.
 $92B9 AND A         ; {If the graphic index of the nasty sprite is zero, then
 $92BA JR Z,$92C7    ; skip.}
 $92BC LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $92BF CP (IX+$01)   ; Compare the nasty sprite's screen number in #REGix with
                     ; the player's screen number in #R$EA90.
 $92C2 JR NZ,$92C7   ; If the nasty sprite's screen number is not the same as
                     ; the player's screen number, then the nasty sprite is NOT
                     ; on the current screen. Don't display it.
 $92C4 CALL $9F4A    ; Display the nasty sprite (without mask).
@label=SkipDisplayNastySprite
*$92C7 LD DE,$0010   ; #REGde=$0010; size (in bytes) of a nasty sprite data
                     ; structure.
 $92CA ADD IX,DE     ; #REGix=next nasty sprite.
 $92CC PUSH IX       ; {#REGhl=next nasty sprite.
 $92CE POP HL        ; }
 $92CF LD DE,$EEE0   ; #REGde=address of #R$EEE0.
 $92D2 AND A         ; Clear carry flag!
 $92D3 SBC HL,DE     ; Subtract #REGde from #REGhl; we are checking if the next
                     ; sprite data structure is #R$EEE0. If it is then all
                     ; nasty sprites have been processed.
 $92D5 JR C,$92B6    ; If there is still a nasty sprite to process, then
                     ; process it.
 $92D7 RET           ;

; Routine at 37592
;
; Used by the routine at #R$92F5.
c$92D8 LD A,($5E1F)  ;
 $92DB AND $FD       ;
 $92DD LD ($5E1F),A  ;
; This entry point is used by the routines at #R$8C63, #R$92F5, #R$95D7 and
; #R$988B.
*$92E0 LD A,$10      ;
; This entry point is used by the routine at #R$8CB7.
*$92E2 LD ($5E11),A  ;
 $92E5 LD A,(IX+$03) ;
 $92E8 AND $07       ;
 $92EA LD A,$02      ;
 $92EC JR Z,$92EF    ;
 $92EE INC A         ;
*$92EF LD ($5E10),A  ;
 $92F2 JP $A01A      ;

; Routine at 37621
c$92F5 CALL $9FFB    ;
 $92F8 LD A,($5E20)  ; #REGa=contents of #R$5E20.
 $92FB AND A         ; {If a pick up key has not been pressed, then ???
 $92FC JR Z,$92D8    ; }
 $92FE LD A,($5E1F)  ;
 $9301 AND $03       ;
 $9303 JR NZ,$92E0   ;
 $9305 LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
 $9308 DEC A         ;
 $9309 CP $30        ;
 $930B JR NC,$92E0   ;
 $930D CALL $90FB    ;
 $9310 JR NC,$92E0   ;
 $9312 LD A,($5E1F)  ;
 $9315 OR $03        ;
 $9317 LD ($5E1F),A  ;
 $931A CALL $9358    ;
 $931D CALL $934C    ;
 $9320 CALL $9326    ;
 $9323 JP $A13B      ; Display the collected items in the status panel.

; Routine at 37670
;
; Used by the routine at #R$92F5.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
c$9326 LD HL,$5E30     ; #REGhl=address of #R$5E30.
 $9329 PUSH IX         ; {#REGde=REGix.
 $932B POP DE          ; }
 $932C LD (HL),E       ; {Set the address of the sprite data structure in
 $932D INC HL          ; #R$5E30 to #REGde.
 $932E LD (HL),D       ; }
 $932F INC HL          ; #REGhl=address of the graphic index in #R$5E30.
 $9330 LD A,(IX+$00)   ; {Set the graphic index in #R$5E30 to the graphic index
 $9333 LD (HL),A       ; of the sprite data in #REGix.}
 $9334 INC HL          ; #REGhl=address of the colour atttribute in #R$5E30.
 $9335 LD A,(IX+$05)   ; {Set the colour attribute in #R$5E30 to the colour
 $9338 LD (HL),A       ; attribute of the sprite data in #REGix.}
 $9339 CALL $9F56      ; Display the current sprite (with mask).
 $933C LD A,($5E1A)    ;
 $933F LD (IX+$05),A   ;
 $9342 CALL $A01A      ;
 $9345 LD (IX+$00),$00 ;
 $9349 JP $A3BD        ; Play the picked up collectable sound.

; Routine at 37708
;
; Used by the routines at #R$92F5 and #R$93E3.
c$934C LD HL,$5E37   ;
 $934F LD DE,$5E3B   ;
 $9352 LD BC,$0008   ; #REGbc=$0008; size (in bytes) of a sprite data
                     ; structure.
 $9355 LDDR          ;
 $9357 RET           ;

; Routine at 37720
;
; Used by the routines at #R$92F5 and #R$93E3.
c$9358 LD HL,$5E38   ;
 $935B LD E,(HL)     ;
 $935C INC HL        ;
 $935D LD D,(HL)     ;
 $935E INC HL        ;
 $935F LD A,D        ;
 $9360 OR E          ;
 $9361 RET Z         ;
 $9362 PUSH DE       ;
 $9363 LD A,(HL)     ;
 $9364 INC HL        ;
 $9365 LD (DE),A     ;
 $9366 INC DE        ;
 $9367 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $936A LD (DE),A     ;
 $936B INC DE        ;
 $936C LD A,$80      ;
 $936E LD (DE),A     ;
 $936F INC DE        ;
 $9370 LD A,($EA93)  ;
 $9373 LD (DE),A     ;
 $9374 INC DE        ;
 $9375 LD A,($EA94)  ;
 $9378 LD (DE),A     ;
 $9379 INC DE        ;
 $937A LD A,(HL)     ;
 $937B LD (DE),A     ;
 $937C POP DE        ;
 $937D CALL $A3C2    ; Play the dropped collectable sound.
 $9380 PUSH IX       ;
 $9382 PUSH DE       ;
 $9383 POP IX        ;
 $9385 CALL $9F4A    ; Display the sprite (without mask).
 $9388 POP IX        ;
 $938A RET           ;

; Check For Pick Up Key Press
;
; Checks for a pick up (or drop) key press. The Z key is used to pick up (or
; drop) a collectable.
; .
; Used by the routine at #R$7E23.
@label=CheckForPickUpKeyPress
c$938B LD A,$7E      ; #REGa=$7E (keys=SHIFT, Z, X, C, V).
 $938D OUT ($FD),A   ; {Read keyboard port.
 $938F IN A,($FE)    ; }
 $9391 CPL           ; Invert all bits in #REGa. Bits are set to 1 for any key
                     ; that is pressed and 0 for any key that is not pressed.
 $9392 AND $02       ; Mask the Z key.
 $9394 LD ($5E20),A  ; Set the contents of #R$5E20 to #REGa.
 $9397 RET           ;

; Read Cursor Joystick Port
;
; Reads the cursor joytick port.
; .
; #TABLE(default)
; { =h Bit  | =h Description }
; { 0       | 0 if right direction (8 key). }
; { 1       | 0 if left direction (5 key). }
; { 2       | 0 if down direction (6 key). }
; { 3       | 0 if up direction (7 key). }
; { 4       | 0 if fire (0 key). }
; { 5-7     | Undefined. }
; TABLE#
; .
; Used by the routine at #R$93BE.
; .
; #TABLE(default)
; { O | #REGa | The game controller input. }
; TABLE#
@label=ReadCursorJoystickPort
c$9398 LD A,$EF      ; #REGa=$EF (keys=0, 9, 8, 7, 6).
 $939A OUT ($FD),A   ; {Read keyboard port.
 $939C IN A,($FE)    ; }
 $939E LD C,A        ; #REGc=keys read. Bits are set to 0 for any key that is
                     ; pressed and 1 for any key that is not pressed.
 $939F AND $08       ; #REGa=bit3 is 0 if the 7 (up) key is pressed. bit3 is 1
                     ; if the 7 (up) key is not pressed.
 $93A1 LD E,A        ; #REGe=bit3 is 0 if the 7 (up) key is pressed. bit3 is 1
                     ; if the 7 (up) key is not pressed.
 $93A2 LD A,C        ; #REGa=keys read. Bits are set to 0 for any key that is
                     ; pressed and 1 for any key that is not pressed.
 $93A3 RRCA          ; {Rotate right. bit0=key 8. bit1=key 7. bit2=key 6.
 $93A4 RRCA          ; bit3-5=undefined. bit6=key 0. bit7=key 9.}
 $93A5 AND $45       ; #REGa=bit0 is 0 if the 8 (right) key is pressed. bit0 is
                     ; 1 if the 8 (right) key is not pressed. bit2 is 0 if the
                     ; R (up) key is pressed. bit2 is 1 if the 6 (down) key is
                     ; not pressed. bit6 is 0 if the 0 (fire) key is pressed.
                     ; bit6 is 1 if the 0 (fire) key is not pressed.
 $93A7 OR E          ; #REGa=bit0 is 0 if the 8 (right) key is pressed. bit0 is
                     ; 1 if the 8 (right) key is not pressed. bit2 is 0 if the
                     ; R (up) key is pressed. bit2 is 1 if the 6 (down) key is
                     ; not pressed. bit3 is 0 if the 7 (up) key is pressed.
                     ; bit3 is 1 if the 7 (up) key is not pressed. bit6 is 0 if
                     ; the 0 (fire) key is pressed. bit6 is 1 if the 0 (fire)
                     ; key is not pressed.
 $93A8 LD E,A        ; #REGe=bit0 is 0 if the 8 (right) key is pressed. bit0 is
                     ; 1 if the 8 (right) key is not pressed. bit2 is 0 if the
                     ; R (up) key is pressed. bit2 is 1 if the 6 (down) key is
                     ; not pressed. bit3 is 0 if the 7 (up) key is pressed.
                     ; bit3 is 1 if the 7 (up) key is not pressed. bit6 is 0 if
                     ; the 0 (fire) key is pressed. bit6 is 1 if the 0 (fire)
                     ; key is not pressed.
 $93A9 RRCA          ; {Rotate right. bit0=key 6. bit1-3=undefined. bit4=key 0.
 $93AA RRCA          ; bit5=key 9. bit6=key 8. bit7=key 7.}
 $93AB AND $10       ; #REGa=bit4 is 0 if the 0 (fire) key is pressed. bit4 is
                     ; 1 if the 0 (fire) key is not pressed.
 $93AD OR E          ; {#REGa=bit0 is 0 if the 8 (right) key is pressed. bit0
 $93AE AND $1F       ; is 1 if the 8 (right) key is not pressed. bit2 is 0 if
                     ; the R (up) key is pressed. bit2 is 1 if the 6 (down) key
                     ; is not pressed. bit3 is 0 if the 7 (up) key is pressed.
                     ; bit3 is 1 if the 7 (up) key is not pressed. bit4  is 0
                     ; if the 0 (fire) key is pressed. bit4  is 1 if the 0
                     ; (fire) key is not pressed.}
 $93B0 LD E,A        ; #REGe=bit0 is 0 if the 8 (right) key is pressed. bit0 is
                     ; 1 if the 8 (right) key is not pressed. bit2 is 0 if the
                     ; R (up) key is pressed. bit2 is 1 if the 6 (down) key is
                     ; not pressed. bit3 is 0 if the 7 (up) key is pressed.
                     ; bit3 is 1 if the 7 (up) key is not pressed. bit4  is 0
                     ; if the 0 (fire) key is pressed. bit4  is 1 if the 0
                     ; (fire) key is not pressed.
 $93B1 LD A,$F7      ; #REGa=$F7 (keys=1, 2, 3, 4, 5).
 $93B3 OUT ($FD),A   ; {Read keyboard port.
 $93B5 IN A,($FE)    ; }
 $93B7 RRA           ; {Remove the 1, 2 and 3 keys.
 $93B8 RRA           ;
 $93B9 RRA           ; }
 $93BA AND $02       ; #REGa=bit2 is 0 if the 5 (left) key is pressed. bit2 is
                     ; 1 if the 5 (left) key is not pressed.
 $93BC OR E          ; #REGa=bit0 is 0 if the 8 (right) key is pressed. bit0 is
                     ; 1 if the 8 (right) key is not pressed. bit1 is 0 if the
                     ; 5 (left) key is pressed. bit0 is 1 if the 5 (left) key
                     ; is not pressed. bit2 is 0 if the 6 (down) key is
                     ; pressed. bit2 is 1 if the 6 (down) key is not pressed.
                     ; bit3 is 0 if the 7 (up) key is pressed. bit3 is 1 if the
                     ; 7 (up) key is not pressed. bit4 is 0 if the 0 (fire) key
                     ; is pressed. bit4 is 1 if the 0 (fire) key is not
                     ; pressed.
 $93BD RET           ;

; Get Game Controller Input
;
; Gets the game controller input.
; .
; #TABLE(default)
; { =h Bit  | =h Description }
; { 0       | 0 if right direction (W key). }
; { 1       | 0 if left direction (Q key). }
; { 2       | 0 if down direction (E key). }
; { 3       | 0 if up direction (R key). }
; { 4       | 0 if fire (T key). }
; { 5-7     | Undefined. }
; TABLE#
; .
; Used by the routines at #R$80D2, #R$8D77, #R$8DC4 and #R$8E26.
; .
; #TABLE(default)
; { O | #REGa | The game controller input. }
; TABLE#
@label=GetGameControllerInput
c$93BE LD A,($5E00)  ; #REGa=contents of #R$5E00; the game selection flags.
 $93C1 AND $06       ; #REGa=the game controller.
 $93C3 JR Z,$93CD    ; If the game controller is the keyboard, then read the
                     ; keyboard.
 $93C5 CP $04        ; {If the game controller is the cursor joystick, then
 $93C7 JR Z,$9398    ; read the cursor joystick port.}
@label=ReadKempstonJoystickPort
 $93C9 IN A,($1F)    ; Read the Kempston joystick port.
 $93CB CPL           ; Invert all bits in #REGa.
 $93CC RET           ;
@label=ReadKeyboard
*$93CD LD A,$FB      ; #REGa=$FB (keys=Q, W, E, R, T).
 $93CF OUT ($FD),A   ; {Read keyboard port.
 $93D1 IN A,($FE)    ; }
 $93D3 LD C,A        ; #REGc=keys read. Bits are set to 0 for any key that is
                     ; pressed and 1 for any key that is not pressed.
 $93D4 RRA           ; {#REGa=bit0 is 0 if the W (right) key is pressed. bit0
 $93D5 AND $01       ; is 1 if the W (right) key is not pressed.}
 $93D7 LD E,A        ; #REGe=bit0 is 0 if the W (right) key is pressed. bit0 is
                     ; 1 if the W (right) key is not pressed.
 $93D8 LD A,C        ; #REGa=keys read. Bits are set to 0 for any key that is
                     ; pressed and 1 for any key that is not pressed.
 $93D9 RLA           ; {#REGa=bit1 is 0 if the Q (left) key is pressed. bit0 is
 $93DA AND $02       ; 1 if the Q (left) key is not pressed.}
 $93DC OR E          ; {#REGe=bit0 is 0 if the W (right) key is pressed. bit0
 $93DD LD E,A        ; is 1 if the W (right) key is not pressed. bit1 is 0 if
                     ; the Q (left) key is pressed. bit0 is 1 if the Q (left)
                     ; key is not pressed.}
 $93DE LD A,C        ; #REGc=keys read. Bits are set to 0 for any key that is
                     ; pressed and 1 for any key that is not pressed.
 $93DF AND $1C       ; #REGa=bit2 is 0 if the E (down) key is pressed. bit2 is
                     ; 1 if the E (down) key is not pressed. bit3 is 0 if the R
                     ; (up) key is pressed. bit3 is 1 if the R (up) key is not
                     ; pressed. bit4 is 0 if the T (fire) key is pressed. bit4
                     ; is 1 if the T (fire) key is not pressed.
 $93E1 OR E          ; #REGa=bit0 is 0 if the W (right) key is pressed. bit0 is
                     ; 1 if the W (right) key is not pressed. bit1 is 0 if the
                     ; Q (left) key is pressed. bit0 is 1 if the Q (left) key
                     ; is not pressed. bit2 is 0 if the E (down) key is
                     ; pressed. bit2 is 1 if the E (down) key is not pressed.
                     ; bit3 is 0 if the R (up) key is pressed. bit3 is 1 if the
                     ; R (up) key is not pressed. bit4 is 0 if the T (fire) key
                     ; is pressed. bit4 is 1 if the T (fire) key is not
                     ; pressed.
 $93E2 RET           ;

; Routine at 37859
c$93E3 LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
 $93E6 DEC A         ;
 $93E7 CP $30        ;
 $93E9 RET NC        ;
 $93EA LD A,($5E20)  ; #REGa=contents of #R$5E20.
 $93ED AND A         ; {If a pick up key has not been pressed, then ???
 $93EE JR Z,$9417    ; }
 $93F0 LD A,($5E1F)  ;
 $93F3 AND $03       ;
 $93F5 JR NZ,$940E   ;
 $93F7 OR $02        ;
 $93F9 LD ($5E1F),A  ;
 $93FC CALL $9358    ;
 $93FF CALL $934C    ;
 $9402 LD HL,$0000   ;
 $9405 LD ($5E30),HL ;
 $9408 LD ($5E32),HL ;
 $940B CALL $A13B    ; Display the collected items in the status panel.
*$940E LD A,($5E1F)  ;
 $9411 AND $FE       ;
 $9413 LD ($5E1F),A  ;
 $9416 RET           ;
*$9417 LD A,($5E1F)  ;
 $941A AND $FD       ;
 $941C LD ($5E1F),A  ;
 $941F JR $940E      ;

; Process Barrel
;
; Processes a barrel. A serf can pass through the barrel as a secret door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessBarrel
c$9421 LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
 $9424 SUB $21       ; Subtract the 1st serf graphic index from #REGa. A serf
                     ; can pass through the barrel as a secret door.
 $9426 JR $9433      ; Check if the player can walk through the secret door.

; Process Bookcase
;
; Processes a bookcase. A wizard can pass through the bookcase as a secret
; door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessBookcase
c$9428 LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
 $942B SUB $11       ; Subtract the 1st wizard graphic index from #REGa. A
                     ; wizard can pass through the bookcase as a secret door.
 $942D JR $9433      ; Check if the player can walk through the secret door.

; Process clock
;
; Processes a clock. A knight can pass through the clock as a secret door.
; .
; #TABLE(default)
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=ProcessClock
c$942F LD A,($EA90)  ; #REGa=graphic index in #R$A4BE of the player in #R$EA90.
 $9432 DEC A         ; Subtract the 1st knight graphic index from #REGa. A
                     ; knight can pass through the clock as a secret door.
; This entry point is pass throughd by the routines at #R$9421 and #R$9428.
; .
; #TABLE(default)
; { I | #REGa  | Calculated index of the player's character. }
; { I | #REGix | Address of a door data structure. }
; TABLE#
@label=CheckSecretDoor
*$9433 CP $10        ; {If the player's character cannot pass through the
 $9435 JR NC,$943D   ; secret door, then the secret door is shut.}
 $9437 CALL $954D    ;
 $943A JP $91F2      ; Process the secret door.
@label=SecretDoorShut
*$943D CALL $9565    ;
 $9440 JP $91FE      ; Display the door

; Set Player Initial Sprite
;
; Sets the player's initial sprite.
; .
; Used by the routines at #R$7D9A and #R$8D45.
; .
; #TABLE(default)
; { I | #REGix | Address of a sprite data structure. }
; TABLE#
@label=SetPlayerInitialSprite
c$9443 LD A,($5E00)  ; #REGa=contents of #R$5E00.
 $9446 RLCA          ; {#REGa=graphic index in #R$A4BE of the selected player
 $9447 AND $30       ; sprite ($08=#R$AEA0, $18=#R$B920, $28=#R$B6A8).
 $9449 ADD A,$08     ; }
 $944B LD ($9488),A  ; Set the graphic index in #R$9481 to #REGa.
 $944E LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $9451 LD ($9482),A  ; Set the current screen in #R$9481 to #REGa.
 $9454 LD HL,$9481   ; #REGhl=address of #R$9481.
 $9457 LD DE,$EA90   ; #REGde=address of #R$EA90.
 $945A LD BC,$0008   ; #REGbc=$0008; size (in bytes) of a sprite data
                     ; structure.
 $945D LDIR          ; Copy #REGhl to #REGde, i.e copy the initialise player
                     ; sprite from #R$9481 to #R$EA90.
 $945F LD A,$68      ; {Set the Y coordinate in #R$5E3C to #REGa; $68.
 $9461 LD ($5E3C),A  ; }
 $9464 LD A,($5E21)  ; #REGa=contents of #R$5E21; current player's lives.
 $9467 CP $03        ; {If the current player has no more lives, then don't
 $9469 JR Z,$9476    ; display a player sprite.}
 $946B PUSH IX       ; Store #REGix.
 $946D LD IX,$EA90   ; #REGix=address of #R$EA90.
 $9471 CALL $9F4A    ; Display the sprite (without mask).
 $9474 POP IX        ; Restore #REGix.
@label=SetFullPlayerHealth
*$9476 LD A,$F0      ; {Set the health of the player in #R$5E28 to #REGa; $F0.
 $9478 LD ($5E28),A  ; }
 $947B CALL $8B8A    ; Display the chicken (in the status panel).
 $947E JP $A2CE      ; Display the player lives (in the status panel).

; Player Initial Sprite Data
;
; Holds the player's initial sprite data.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A4BE. }
; { $01         | Screen                | Screen number. }
; { $02         |                       | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Colour Atttribute     | Colour attribute. }
; { $06         |                       | ??? }
; { $07         | Graphic Index         | Graphic index in #R$A4BE. }
; TABLE#
@label=PlayerInitialSpriteData
b$9481 DEFB $66,$00,$00,$60,$68,$47,$FF,$00

; Check Pause Game
;
; Checks for a pause key press. If a pause key (SPACE, SYM) is pressed then the
; game will pause until a pause key is pressed again.
; .
; Used by the routine at #R$7E23.
@label=CheckPauseGame
c$9489 DI            ; Disable maskable interrupts (stop keyboard scan).
 $948A LD A,$7E      ; #REGa=$7E (keys=SPACE, SYM, M, N, B).
 $948C OUT ($FD),A   ; {Read keyboard port.
 $948E IN A,($FE)    ; }
 $9490 BIT 0,A       ; {If the SPACE or SYM key has not been pressed, then
 $9492 RET NZ        ; we're done.}
 $9493 CPL           ; Invert all bits in #REGa. Bits are set to 1 for any key
                     ; that is pressed and 0 for any key that is not pressed.
 $9494 AND $1E       ; {If another key, as well as the SPACE or SYM key, has
 $9496 RET NZ        ; been pressed, then we're done.}
@label=WaitForPauseKeyReleaseLoop
*$9497 LD A,$7E      ; #REGa=$7E (keys=SPACE, SYM, M, N, B).
 $9499 OUT ($FD),A   ; {Read keyboard port.
 $949B IN A,($FE)    ; }
 $949D BIT 0,A       ; {Loop if a SPACE or SYM key has been pressed; it has not
 $949F JR Z,$9497    ; yet been released.}
@label=WaitForPauseKeyPressLoop
*$94A1 LD A,$7E      ; #REGa=$7E (keys=SPACE, SYM, M, N, B).
 $94A3 OUT ($FD),A   ; {Read keyboard port.
 $94A5 IN A,($FE)    ; }
 $94A7 BIT 0,A       ; {Loop if a SPACE or SYM key has not been pressed.
 $94A9 JR NZ,$94A1   ; }
@label=WaitForPauseKeyReleaseLoop1
*$94AB LD A,$7E      ; #REGa=$7E (keys=SPACE, SYM, M, N, B).
 $94AD OUT ($FD),A   ; {Read keyboard port.
 $94AF IN A,($FE)    ; }
 $94B1 BIT 0,A       ; {Loop if a SPACE or SYM key has been pressed; it has not
 $94B3 JR Z,$94AB    ; yet been released.}
 $94B5 RET           ;

; Set ACG Key Part Locations
;
; Sets the random screen number locations of each part of the ACG key.
; .
; Used by the routine at #R$7D9A.
@label=SetACGKeyPartLocations
c$94B6 LD A,($5C78)  ; {#REGc=the LSB of FRAMES.
 $94B9 LD C,A        ; }
 $94BA LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $94BD ADD A,C       ; {$00<=#REGa<=$07.
 $94BE AND $07       ; }
 $94C0 LD C,A        ; #REGc=#REGa; $00<=#REGc<=$07.
 $94C1 ADD A,A       ; {Multiply #REGa by 3. #REGa=$00, $03, $06, $09, $0C,
 $94C2 ADD A,C       ; $0F, $12 or $15.}
 $94C3 LD L,A        ; {#REGhl=offset in #R$94DD of the screen number of the
 $94C4 LD H,$00      ; left part of the ACG key.}
 $94C6 LD BC,$94DD   ; {#REGhl=address in #R$94DD of the screen numbers of the
 $94C9 ADD HL,BC     ; left part of the ACG key.}
 $94CA EX DE,HL      ; #REGde=address in #R$94DD of the screen numbers of the
                     ; left part of the ACG key.
 $94CB LD HL,$6026   ; #REGhl=address in #R$600D of the screen number of the
                     ; left part of the ACG key.
 $94CE LD BC,$0008   ; #REGbc=$0008; size (in bytes) of a sprite data
                     ; structure.
 $94D1 LD A,$03      ; #REGa=$03; there are 3 ACG key parts.
; #TABLE(default)
; { I | #REGa  | The number of ACG key parts to locate. }
; { I | #REGbc | $0008; size (in bytes) of a sprite data structure. }
; { I | #REGde | Address in #R$94DD of the screen number of a part of the ACG
; key. }
; { I | #REGhl | Address in #R$600D of the screen number of a part of the ACG
; key. }
; TABLE#
@label=SetACGKeyPartLocationsLoop
*$94D3 EX AF,AF'     ; #REGa'=number of ACG key parts to locate.
 $94D4 LD A,(DE)     ; #REGa=screen number in #R$94DD of an ACG key part.
 $94D5 LD (HL),A     ; Set the screen number of the ACG key part in #R$600D to
                     ; #REGa.
 $94D6 ADD HL,BC     ; #REGhl=address in #R$600D of the screen number of the
                     ; next part of the ACG key.
 $94D7 INC DE        ; #REGde=next address in #R$94DD of the screen number of
                     ; the next part of the ACG key. }
 $94D8 EX AF,AF'     ; #REGa=number of ACG key parts to locate.
 $94D9 DEC A         ; Decrement #REGa; one less ACG key part to locate.
 $94DA JR NZ,$94D3   ; Loop until all parts of the ACG key have been randomly
                     ; located.
 $94DC RET           ;

; ACG Key Part Location Table
;
; Screen numbers each part of the ACG key can be randomly located at.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | ACG Key Left Screen   | Screen number of the left part of the
; ACG key. }
; { $01         | ACG Key Middle Screen | Screen number of the middle part of
; the ACG key. }
; { $02         | ACG Key Right Screen  | Screen number of the right part of
; the ACG key. }
; TABLE#
@label=ACGKeyPartLocationTable
b$94DD DEFB $81,$45,$7C ; $00.
 $94E0 DEFB $85,$49,$2B ; $03.
 $94E3 DEFB $6A,$3B,$7C ; $06.
 $94E6 DEFB $69,$71,$2B ; $09.
 $94E9 DEFB $67,$85,$7C ; $0C.
 $94EC DEFB $68,$7F,$2B ; $0F.
 $94EF DEFB $4D,$73,$7C ; $12.
 $94F2 DEFB $17,$10,$2B ; $15.

; Shut Random Doors
;
; Randomly shuts any open doors. Because a door that connects two screens is
; represented by a door in each screen, when a door is shut the door must be
; shut for both screens.
; .
; Note that connected doors (i.e the door between two screens) are consecutive
; in #R$EEE0.
; .
; Used by the routine at #R$7D9A.
@label=ShutRandomDoors
c$94F5 LD A,($5E12)  ; {#REGl=(random) contents of #R$5E12.
 $94F8 LD L,A        ; }
 $94F9 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $94FC AND $0F       ; {$10<=#REGa<=$1F.
 $94FE OR $10        ; }
 $9500 LD H,A        ; #REGhl=random address; $1000<=#REGhl<=$1FFF.
 $9501 EXX           ; #REGhl'=random address; $1000<=#REGhl'<=$1FFF.
 $9502 LD HL,$EEE0   ; #REGhl=address of the first background item in #R$EEE0.
 $9505 LD DE,$EEE8   ; #REGde=address of the second background item in #R$EEE0.
 $9508 LD BC,$0010   ; #REGbc=$0010; double the size (in bytes) of a sprite
                     ; data structure (connected doors are consecutive).
; #TABLE(default)
; { I | #REGbc  | $0010; double the size (in bytes) of a sprite data structure
; (connected doors are consecutive). }
; { I | #REGde  | Address in #R$EEE0 of the graphic index of the second
; background item. }
; { I | #REGhl  | Address in #R$EEE0 of the graphic index of the first
; background item. }
; { I | #REGhl' | Random address; $1000<=#REGhl'<=$1FFF. }
; TABLE#
@label=ShutRandomDoorsLoop
*$950B EXX           ; #REGbc'=$0010; double the size (in bytes) of a sprite
                     ; data structure (connected doors are consecutive).
                     ; #REGde'=address in #R$EEE0 of the graphic index of the
                     ; second background item. #REGhl=random address;
                     ; $1000<=#REGhl<=$1FFF. #REGhl'=address in #R$EEE0 of the
                     ; graphic index of the first background item.
 $950C LD A,(HL)     ; #REGa=contents of random address in #REGhl; a random
                     ; byte.
 $950D INC HL        ; #REGhl=next random address; $1000<=#REGhl<=$1FFF.
 $950E EXX           ; #REGbc=$0010; double the size (in bytes) of a sprite
                     ; data structure (connected doors are consecutive).
                     ; #REGde=address in #R$EEE0 of the graphic index of the
                     ; second background item. #REGhl=address in #R$EEE0 of the
                     ; graphic index of the first background item.
                     ; #REGhl'=random address; $1000<=#REGhl'<=$1FFF.
 $950F CP $70        ; {If the random byte in #REGa is >=$70, then move to the
 $9511 JR NC,$951F   ; next two background items.}
 $9513 LD A,(DE)     ; #REGa=graphic index of the second background item in
                     ; #REGde.
 $9514 CP (HL)       ; {If the graphic index of the first and second background
 $9515 JR NZ,$951F   ; item's don't match, then they are not doors, so move to
                     ; the next two background items.}
 $9517 CP $01        ; {If the graphic index is #R$BCCE, then shut the cave
 $9519 JR Z,$9526    ; door.}
 $951B CP $02        ; {If the graphic index is #R$A76E, then shut the normal
 $951D JR Z,$9542    ; door.}
@label=NextBackgroundItems
*$951F ADD HL,BC     ; #REGhl=address in #R$EEE0 of the graphic index of the
                     ; next first background item.
 $9520 EX DE,HL      ; #REGde=address in #R$EEE0 of the graphic index of the
                     ; next first background item. #REGhl=address in #R$EEE0 of
                     ; the graphic index of the second background item.
 $9521 ADD HL,BC     ; #REGhl=address in #R$EEE0 of the graphic index of the
                     ; next second background item.
 $9522 RET C         ; If we have processed all the background items then we
                     ; are done.
 $9523 EX DE,HL      ; #REGde=address in #R$EEE0 of the graphic index of the
                     ; next second background item. #REGhl=address in #R$EEE0
                     ; of the graphic index of the next first background item.
 $9524 JR $950B      ; Loop.
@label=ShutCaveDoor
*$9526 LD A,$22      ; #REGa=$22; graphic index is #R$CAE4.
@label=ShutDoor
*$9528 LD (DE),A     ; Set the graphic index of the second background item
                     ; (which is a door) in #REGde to #REGa.
 $9529 LD (HL),A     ; Set the graphic index of the first background item
                     ; (which is a door) in #REGhl to #REGa.
 $952A PUSH DE       ; Store #REGde.
 $952B INC DE        ; {#REGde=address of the flags of the second background
 $952C INC DE        ; item.
 $952D INC DE        ;
 $952E INC DE        ;
 $952F INC DE        ; }
 $9530 LD A,(DE)     ; #REGa=flags of the second background item in #REGde.
 $9531 OR $08        ; The door is closed.
 $9533 LD (DE),A     ; Set the flags of the second background item in #REGde to
                     ; #REGa.
 $9534 POP DE        ; Restore #REGde.
 $9535 PUSH HL       ; Store #REGhl.
 $9536 INC HL        ; {#REGhl=address of the flags of the first background
 $9537 INC HL        ; item.
 $9538 INC HL        ;
 $9539 INC HL        ;
 $953A INC HL        ; }
 $953B LD A,(HL)     ; #REGa=flags of the first background item in #REGhl.
 $953C OR $08        ; The door is closed.
 $953E LD (HL),A     ; Set the flags of the first background item in #REGhl to
                     ; #REGa.
 $953F POP HL        ; Restore #REGhl.
 $9540 JR $951F      ; Both connected doors are now shut. Next two background
                     ; items.
@label=ShutNormalDoor
*$9542 LD A,$20      ; #REGa=$20; graphic index is #R$CA82.
 $9544 JR $9528      ; Shut the door.

; Routine at 38214
;
; Used by the routine at #R$917D.
c$9546 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $9549 AND $01       ;
 $954B JR Z,$9565    ;
; This entry point is used by the routines at #R$9222, #R$942F and #R$961B.
*$954D LD A,(IX+$05) ;
 $9550 AND $F7       ;
 $9552 LD (IX+$05),A ;
 $9555 PUSH IX       ;
 $9557 CALL $9286    ;
 $955A LD A,(IX+$05) ;
 $955D AND $F7       ;
 $955F LD (IX+$05),A ;
 $9562 POP IX        ;
 $9564 RET           ;
; This entry point is used by the routines at #R$9222, #R$942F and #R$961B.
*$9565 LD A,(IX+$05) ;
 $9568 OR $08        ;
 $956A LD (IX+$05),A ;
 $956D PUSH IX       ;
 $956F CALL $9286    ;
 $9572 LD A,(IX+$05) ;
 $9575 OR $08        ;
 $9577 LD (IX+$05),A ;
 $957A POP IX        ;
 $957C RET           ;

; Routine at 38269
;
; Used by the routine at #R$8D77.
c$957D PUSH DE       ;
 $957E LD B,$00      ;
 $9580 LD HL,($5E1D) ;
 $9583 INC L         ;
 $9584 INC H         ;
 $9585 LD E,(IX+$03) ;
 $9588 LD D,(IX+$04) ;
 $958B LD A,E        ;
 $958C SUB $58       ;
 $958E JP P,$9593    ;
 $9591 NEG           ;
*$9593 CP L          ;
 $9594 JR C,$9597    ;
 $9596 INC B         ;
*$9597 LD A,D        ;
 $9598 SUB $68       ;
 $959A JP P,$959F    ;
 $959D NEG           ;
*$959F CP H          ;
 $95A0 JR C,$95A3    ;
 $95A2 INC B         ;
*$95A3 LD A,B        ;
 $95A4 LD ($5E2D),A  ;
 $95A7 POP DE        ;
 $95A8 RET           ;

; Routine at 38313
;
; Used by the routine at #R$8D45.
c$95A9 LD HL,$EAE8   ;
 $95AC LD DE,$0008   ;
 $95AF LD B,$04      ;
*$95B1 LD A,(HL)     ;
 $95B2 AND A         ;
 $95B3 JR Z,$95B9    ;
 $95B5 ADD HL,DE     ;
 $95B6 DJNZ $95B1    ;
 $95B8 RET           ;
*$95B9 LD A,$45      ;
 $95BB LD ($EA95),A  ;
 $95BE PUSH HL       ;
 $95BF LD (HL),$8F   ;
 $95C1 EX DE,HL      ;
 $95C2 INC DE        ;
 $95C3 LD HL,$EA91   ; #REGa=player's screen number in #R$EA90.
 $95C6 LD BC,$0007   ;
 $95C9 LDIR          ; Copy #REGhl to #REGde, i.e copy the
 $95CB POP HL        ;
; This entry point is used by the routine at #R$96EC.
*$95CC PUSH IX       ;
 $95CE PUSH HL       ;
 $95CF POP IX        ;
 $95D1 CALL $9F4A    ; Display the sprite (without mask).
 $95D4 POP IX        ;
 $95D6 RET           ;

; Routine at 38359
c$95D7 JP $92E0      ;

; Check Time
;
; Checks the current time and, if a second or more has elapsed, then increments
; the game time.
; .
; Used by the routine at #R$7EC5.
@label=CheckTime
c$95DA LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $95DD CP $32        ; {the LSB of FRAMES is incremented every 20ms. If less
 $95DF RET C         ; than a second has elapsed since the last check, then we
                     ; are done.}
 $95E0 SUB $32       ; {Remove a second and set any remaining milliseconds in
 $95E2 LD ($5C78),A  ; the LSB of FRAMES.}
 $95E5 LD HL,$5E3F   ; #REGhl=address of #R$5E3F.
 $95E8 LD A,(HL)     ; #REGa=the number of seconds.
 $95E9 INC A         ; Increment the number of seconds.
 $95EA DAA           ; Decimal adjust #REGa (BCD encode).
 $95EB LD (HL),A     ; Set the number of seconds in #R$5E3F to #REGa.
 $95EC CP $60        ; {If 60 seconds have not elapsed, then display the time
 $95EE JR NZ,$9604   ; in the status panel.}
 $95F0 LD (HL),$00   ; Reset the number of seconds in #R$5E3F.
 $95F2 DEC HL        ; #REGhl=address of #R$5E3E.
 $95F3 LD A,(HL)     ; #REGa=the number of minutes.
 $95F4 INC A         ; Increment the number of minutes.
 $95F5 DAA           ; Decimal adjust #REGa (BCD encode).
 $95F6 LD (HL),A     ; Set the number of minutes in #R$5E3E to #REGa.
 $95F7 CP $60        ; {If 60 minutes have not elapsed, then display the time
 $95F9 JR NZ,$9604   ; in the status panel.}
 $95FB LD (HL),$00   ; Reset the number of minutes in #R$5E3E.
 $95FD DEC HL        ; #REGhl=address of #R$5E3D.
 $95FE LD A,(HL)     ; #REGa=the number of hours.
 $95FF INC A         ; Increment the number of hours.
 $9600 DAA           ; Decimal adjust #REGa (BCD encode).
 $9601 AND $0F       ; The maximum number of hours is limited to 9.
 $9603 LD (HL),A     ; Set the number of hours in #R$5E3D to #REGa.
; Display the time in the status panel.
@label=DisplayTimeInStatusPanel
*$9604 LD HL,$40C8   ; #REGhl=(Y,X) position of the time in the status panel
                     ; (Y=64,X=200).
; Display the time.
; .
; This entry point is used by the routine at #R$9641.
; .
; #TABLE(default)
; { I | #REGhl | (Y,X) position to display the time at. }
; TABLE#
@label=DisplayTime
*$9607 CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $960A LD DE,$5E3D   ; #REGde=address of #R$5E3D.
 $960D LD B,$02      ; #REGb=$02; the number of hours is 1 BCD value (0-9) and
                     ; the number of minutes is 1 BCD value (00-59).
 $960F CALL $A1C9    ; Display the number of hours/minutes.
 $9612 LD DE,$5E3F   ; #REGde=address of #R$5E3F.
 $9615 INC HL        ; #REGhl=next screen pixel address to display the number
                     ; of seconds at.
 $9616 LD B,$01      ; #REGb=$01; the number of seconds is 1 BCD value (00-59).
 $9618 JP $A1BF      ; Display the number of seconds.

; Display ACG Exit Door
;
; Displays the ACG Exit Door.
@label=DisplayACGExitDoor
c$961B LD HL,$5E32   ;
 $961E LD DE,$0004   ;
 $9621 LD A,(HL)     ;
 $9622 CP $8C        ;
 $9624 JR NZ,$963B   ;
 $9626 ADD HL,DE     ;
 $9627 LD A,(HL)     ;
 $9628 CP $8D        ;
 $962A JR NZ,$963B   ;
 $962C ADD HL,DE     ;
 $962D LD A,(HL)     ;
 $962E CP $8E        ;
 $9630 JR NZ,$963B   ;
 $9632 CALL $954D    ;
 $9635 LD BC,$3020   ;
 $9638 JP $91F5      ;
*$963B CALL $9565    ;
 $963E JP $91FE      ;

; Display Game Statistics
;
; Displays the game statistics when a game is over or has been successfully
; completed.
; .
; Used by the routines at #R$8C35 and #R$96EC.
@label=DisplayGameStatistics
c$9641 CALL $96C9    ; Calculate the percentage of the game that was completed.
 $9644 LD HL,$4040   ; #REGhl=screen coordinates to display the "time" text at
                     ; (Y=64,X=64).
 $9647 LD DE,$967F   ; #REGde=address of #R$967F.
 $964A CALL $A1F3    ; Display the "time" text.
 $964D LD HL,$5040   ; #REGhl=screen coordinates to display the "score" text at
                     ; (Y=80,X=64).
 $9650 LD DE,$968F   ; #REGde=address of #R$968F.
 $9653 CALL $A1F3    ; Display the "score" text.
 $9656 LD HL,$6040   ; #REGhl=screen coordinates to display the "percentage"
                     ; text at (Y=96,X=64).
 $9659 LD DE,$969F   ; #REGde=address of #R$969F.
 $965C CALL $A1F3    ; Display the "percentage" text.
 $965F LD HL,$BFCC   ; {Set #R$5E01 to the first decimal digit (0 character) in
 $9662 LD ($5E01),HL ; #R$BF4C.}
 $9665 LD HL,$4080   ; #REGhl=screen coordinates to display the time at
                     ; (Y=64,X=128).
 $9668 CALL $9607    ; Display the time.
 $966B LD HL,$5080   ; #REGhl=screen coordinates to display the score at
                     ; (Y=80,X=128).
 $966E CALL $A1B7    ; Display the score.
 $9671 LD HL,$6080   ; #REGhl=screen coordinates to display the percentage at
                     ; (Y=96,X=128).
 $9674 CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $9677 LD DE,$5E54   ; #REGde=address of #R$5E54.
 $967A LD B,$01      ; #REGb=$01; the percentage is 1 BCD value (00-99).
 $967C JP $A1BF      ; Display the percentage.

; Time Text
@label=TimeText
t$967F DEFB $45           ; Colour attribute; bright cyan/black.
 $9680 DEFM "TIME       " ; Message text.
 $968B DEFB $23,$20,$20   ; Message text (:SPACESPACE).
 $968E DEFB $A0           ; Message terminator (SPACE).

; Score Text
@label=ScoreText
t$968F DEFB $45              ; Colour attribute; bright cyan/black.
 $9690 DEFM "SCORE         " ; Message text.
 $969E DEFB $A0              ; Message terminator (SPACE).

; Percentage Text
@label=PercentageText
t$969F DEFB $45              ; Colour attribute; bright cyan/black.
 $96A0 DEFM "$             " ; Message text.
 $96AE DEFB $A0              ; Message terminator (SPACE).

; Set Screen Visited Flag
;
; Set the screen visited flag for the specified screen.
; .
; 149 screens can be visited. Each screen is represented by a single bit. The
; bit is 0 if the screen has not been visited, and 1 if the screen has been
; visited. 19 (149 / 8) bytes are required to store the screen visited flags.
; .
; Used by the routine at #R$9117.
; .
; #TABLE(default)
; { I | #REGa  | The screen number. }
; TABLE#
@label=SetScreenVisitedFlag
c$96AF LD C,A        ; #REGc=the screen number.
 $96B0 SRL C         ; {#REGbc=calculated offset to the byte which contains the
 $96B2 SRL C         ; screen visited flag for the screen.
 $96B4 SRL C         ;
 $96B6 LD B,$00      ; }
 $96B8 LD HL,$5E40   ; #REGhl=address of #R$5E40.
 $96BB ADD HL,BC     ; #REGhl=address of the byte which contains the screen
                     ; visited flag for the screen.
 $96BC RLCA          ; {#REGa=calculated bit to set.
 $96BD RLCA          ;
 $96BE RLCA          ;
 $96BF AND $38       ; }
 $96C1 OR $C6        ; Set the calculated bit in #REGhl.
 $96C3 LD ($96C7),A  ; Modify the code at $96C7 to set the operand in #REGa.
 $96C6 SET 0,(HL)    ; Set the screen visited flag (bit) for the screen in
                     ; #REGhl.
 $96C8 RET           ;

; Calculate Game Percentage Completed
;
; Calculates the percentage of the game that was completed.
; .
; The percentage of the game completed is based on the number of screens
; visited. 149 screens can be visited. For every 3 screens that have been
; visited the percentage of the game completed is increased by 2 giving a
; maximum percentage of 98% (2 * 149 / 3). Once the percentage of the game
; completed has been calculated an additinal 1% is added.
; .
; The minimum percentage of the game that can be completed is 1%. The maximum
; percentage of the game that can be completed is 99%.
; .
; Used by the routine at #R$9641.
@label=CalculateGamePercentageCompleted
c$96C9 LD HL,$5E40   ; #REGhl=address of #R$5E40.
 $96CC LD BC,$0813   ; #REGb=$08; number of bits in a byte. #REGc=$13; 149
                     ; screens can be visited, stored in $13 bytes.
 $96CF LD D,$03      ; #REGd=$03; number of screens that must be visited before
                     ; increasing the percentage of the game completed by $02.
 $96D1 XOR A         ; Clear #REGa; the percentage of the game completed.
; #TABLE(default)
; { I | #REGa  | The percentage of the game completed. }
; { I | #REGb  | The number of bits in the screens visited byte to check. }
; { I | #REGc  | The number of screens to check. }
; { I | #REGhl | Address of a screens visited byte in #R$5E40. }
; TABLE#
@label=CheckScreensVisitedFlagsLoop
*$96D2 PUSH BC       ; Store #REGbc.
 $96D3 LD E,(HL)     ; #REGe=a screens visited byte in #R$5E40.
 $96D4 INC HL        ; #REGhl=address of the next screens visited byte in
                     ; #R$5E40.
@label=CheckScreensVisitedByte
*$96D5 RR E          ; Right rotate the screens visited byte.
 $96D7 JR NC,$96E1   ; If the bit is not set, then skip.
 $96D9 DEC D         ; Decrement #REGd; the number of screens visited
                     ; countdown.
 $96DA JR NZ,$96E1   ; If the number of screens visited countdown is not zero,
                     ; then skip.
 $96DC LD D,$03      ; #REGd=$03; number of screens that must be visited before
                     ; increasing the percentage of the game completed by $02.
 $96DE ADD A,$02     ; Increase the percentage of the game completed by $02.
 $96E0 DAA           ; Decimal adjust #REGa (BCD encode).
@label=NextScreenVisitedFlags
*$96E1 DJNZ $96D5    ; Loop until all bits in the screens visited byte have
                     ; been checked.
 $96E3 POP BC        ; Restore #REGbc.
 $96E4 DEC C         ; Decrement #REGc.
 $96E5 JR NZ,$96D2   ; Loop until all screens visited flags have been checked.
 $96E7 INC A         ; 01<=#REGa<=99.
 $96E8 LD ($5E54),A  ; Set the percentage of the game completed in #R$5E54 to
                     ; #REGa.
 $96EB RET           ;

; Display Game Completed Screen
;
; Displays the game completed screen when the game has been successfully
; completed.
; .
; Used by the routine at #R$7E23.
@label=DisplayGameCompletedScreen
c$96EC LD HL,$EA90   ; #REGhl=address of #R$EA90.
 $96EF CALL $95CC    ; ???
 $96F2 LD HL,$BE4C   ; {Set #R$5E01 to 256 bytes lower than #R$BF4C.
 $96F5 LD ($5E01),HL ; }
 $96F8 LD HL,$2040   ; #REGhl=screen coordinates to display the
                     ; "congratulations" text at (Y=32,X=64).
 $96FB LD DE,$9710   ; #REGde=address of #R$9710.
 $96FE CALL $A1F3    ; Display the "congratulations" text.
 $9701 LD HL,$3040   ; #REGhl=screen coordinates to display the "you have
                     ; escaped" text at (Y=48,X=64).
 $9704 LD DE,$9720   ; #REGde=address of #R$9720.
 $9707 CALL $A1F3    ; Display the "you have escaped" text.
 $970A CALL $9641    ; Display the game statistics.
 $970D JP $8C4A      ; Game over.

; Congratulations Text
@label=CongratulationsText
t$9710 DEFB $47              ; Colour attribute; bright white/black.
 $9711 DEFM "CONGRATULATION" ; Message text.
 $971F DEFB $D3              ; Message terminator (S).

; You Have Escaped Text
@label=YouHaveEscapedText
t$9720 DEFB $47               ; Colour attribute; bright white/black.
 $9721 DEFM "YOU HAVE ESCAPE" ; Message text.
 $9730 DEFB $C4               ; Message terminator (D).

; Check Player Over Open Trap Door
;
; Checks if the player is over an open trap door.
;
; Used by the routine at #R$91C5.
@label=CheckPlayerOverOpenTrapDoor
c$9731 LD BC,$1818   ; #REGb=$18; interior width (in pixels) of the door.
                     ; C=$18; interior height of the door.
 $9734 CALL $90CC    ; Check if the player has fallen through the trap door.
 $9737 JP NC,$91FE   ; If the carry flag is not set, then the player has not
                     ; fallen through the trap door. Display it.
 $973A CALL $8093    ; Clear the screen playing area.
 $973D LD A,$96      ;
 $973F PUSH IX       ;
 $9741 CALL $9BF1    ;
 $9744 POP IX        ;
 $9746 LD B,$80      ;
*$9748 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $974B LD C,A        ;
*$974C PUSH BC       ;
 $974D LD A,B        ;
 $974E CPL           ;
 $974F LD B,A        ;
 $9750 CALL $A3A8    ; Beep.
 $9753 POP BC        ;
 $9754 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $9757 CP C          ;
 $9758 JR Z,$974C    ;
 $975A AND $07       ;
 $975C LD A,$00      ;
 $975E JR NZ,$9762   ;
 $9760 LD A,$47      ;
*$9762 LD L,A        ;
 $9763 LD H,A        ;
 $9764 LD ($596B),HL ;
 $9767 LD ($598B),HL ;
 $976A PUSH BC       ;
 $976B CALL $9774    ;
 $976E POP BC        ;
 $976F DJNZ $9748    ;
 $9771 JP $9117      ; The player has entered a new screen.

; Routine at 38772
;
; Used by the routine at #R$9731.
c$9774 LD BC,$170B   ;
 $9777 LD HL,$5AE0   ;
 $977A LD DE,$0020   ;
*$977D PUSH HL       ;
 $977E AND A         ;
 $977F SBC HL,DE     ;
 $9781 INC L         ;
 $9782 LD A,(HL)     ;
 $9783 POP HL        ;
 $9784 PUSH BC       ;
*$9785 LD (HL),A     ;
 $9786 INC L         ;
 $9787 DJNZ $9785    ;
 $9789 POP BC        ;
 $978A PUSH BC       ;
*$978B LD (HL),A     ;
 $978C AND A         ;
 $978D SBC HL,DE     ;
 $978F DJNZ $978B    ;
 $9791 POP BC        ;
 $9792 PUSH BC       ;
*$9793 LD (HL),A     ;
 $9794 DEC L         ;
 $9795 DJNZ $9793    ;
 $9797 POP BC        ;
 $9798 PUSH BC       ;
*$9799 LD (HL),A     ;
 $979A ADD HL,DE     ;
 $979B DJNZ $9799    ;
 $979D LD (HL),A     ;
 $979E AND A         ;
 $979F SBC HL,DE     ;
 $97A1 INC L         ;
 $97A2 POP BC        ;
 $97A3 DEC B         ;
 $97A4 DEC B         ;
 $97A5 DEC C         ;
 $97A6 JR NZ,$977D   ;
 $97A8 RET           ;

; Screen Type $0C Geometry Data
;
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
@label=ScreenType$0CGeometryData
b$97A9 DEFB $5C,$63,$63,$63,$63,$5C,$5C,$5C
 $97B1 DEFB $54,$6B,$6B,$6B,$6B,$54,$54,$54
 $97B9 DEFB $4C,$73,$73,$73,$73,$4C,$4C,$4C
 $97C1 DEFB $44,$7B,$7B,$7B,$7B,$44,$44,$44
 $97C9 DEFB $3C,$83,$83,$83,$83,$3C,$3C,$3C
 $97D1 DEFB $34,$8B,$8B,$8B,$8B,$34,$34,$34
 $97D9 DEFB $2C,$93,$93,$93,$93,$2C,$2C,$2C
 $97E1 DEFB $24,$9B,$9B,$9B,$9B,$24,$24,$24
 $97E9 DEFB $1C,$A3,$A3,$A3,$A3,$1C,$1C,$1C
 $97F1 DEFB $14,$AB,$AB,$AB,$AB,$14,$14,$14
 $97F9 DEFB $0C,$B3,$B3,$B3,$B3,$0C,$0C,$0C
 $9801 DEFB $04,$BB,$BB,$BB,$BB,$04,$04,$04
 $9809 DEFB $00,$01,$03,$FF
 $980D DEFB $02,$01,$03,$FF
 $9811 DEFB $04,$05,$07,$FF
 $9815 DEFB $06,$05,$07,$FF
 $9819 DEFB $08,$09,$0B,$FF
 $981D DEFB $0A,$09,$0B,$FF
 $9821 DEFB $0C,$0D,$0F,$FF
 $9825 DEFB $0E,$0D,$0F,$FF
 $9829 DEFB $10,$11,$13,$FF
 $982D DEFB $12,$11,$13,$FF
 $9831 DEFB $14,$15,$17,$FF
 $9835 DEFB $16,$15,$17,$FF
 $9839 DEFB $18,$19,$1B,$FF
 $983D DEFB $1A,$19,$1B,$FF
 $9841 DEFB $1C,$1D,$1F,$FF
 $9845 DEFB $1E,$1D,$1F,$FF
 $9849 DEFB $20,$21,$23,$FF
 $984D DEFB $22,$21,$23,$FF
 $9851 DEFB $24,$25,$27,$FF
 $9855 DEFB $26,$25,$27,$FF
 $9859 DEFB $28,$29,$2B,$FF
 $985D DEFB $2A,$29,$2B,$FF
 $9861 DEFB $2C,$2D,$2F,$FF
 $9865 DEFB $2E,$2D,$2F,$FF
 $9869 DEFB $FF

; Routine at 39018
;
; Used by the routine at #R$9117.
c$986A LD A,(IX+$05) ;
 $986D RLCA          ;
 $986E RLCA          ;
 $986F RLCA          ;
 $9870 AND $06       ;
 $9872 LD C,A        ;
 $9873 LD B,$00      ;
 $9875 LD HL,$9883   ;
 $9878 ADD HL,BC     ;
 $9879 LD A,(HL)     ;
 $987A INC HL        ;
 $987B LD ($EA96),A  ;
 $987E LD A,(HL)     ;
 $987F LD ($EA97),A  ;
 $9882 RET           ;

; Data block at 39043
b$9883 DEFB $00,$20,$E0,$00,$00,$E0,$20,$00

; Routine at 39051
c$988B CALL $9FFB    ;
 $988E CALL $90FB    ;
 $9891 JR C,$98B1    ;
*$9893 LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $9896 CPL           ;
 $9897 AND $03       ;
 $9899 JR NZ,$989E   ;
 $989B INC (IX+$06)  ;
*$989E LD A,(IX+$06) ;
 $98A1 AND $03       ;
 $98A3 LD C,A        ;
 $98A4 LD B,$00      ;
 $98A6 LD HL,$98C4   ;
 $98A9 ADD HL,BC     ;
 $98AA LD A,(HL)     ;
 $98AB LD (IX+$05),A ;
 $98AE JP $92E0      ;
*$98B1 LD A,($5E28)  ; #REGa=contents of #R$5E28.
 $98B4 DEC A         ; Decrement the health of the player.
 $98B5 LD ($5E28),A  ; Set the health of the player in #R$5E28 to #REGa.
 $98B8 JP Z,$98C8    ;
 $98BB CALL $8B8A    ; Display the chicken (in the status panel).
 $98BE CALL $A3E5    ;
 $98C1 JP $9893      ;

; Data block at 98C4
b$98C4 DEFB $42,$43,$46,$43

; Routine at 98C8
;
; Used by the routine at #R$988B.
c$98C8 CALL $9F56      ;
 $98CB LD (IX+$00),$00 ;
 $98CF JP $8EA0        ;

; Set Coloured Key Locations
;
; Sets the random screen number locations of each coloured key.
; .
; Used by the routine at #R$7D9A.
@label=SetColouredKeyLocations
c$98D2 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $98D5 LD HL,$990C   ; #REGhl=address of #R$990C.
 $98D8 CALL $9904    ; Get the green key's screen number location.
 $98DB LD ($603E),A  ; Set the screen number of the green key in #R$603D to
                     ; #REGa.
 $98DE LD A,($5C78)  ; {#REGc=the LSB of FRAMES.
 $98E1 LD C,A        ; }
 $98E2 LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $98E5 ADD A,C       ;
 $98E6 LD HL,$9914   ; #REGhl=address of #R$9914.
 $98E9 CALL $9904    ; Get the red key's screen number location.
 $98EC LD ($6046),A  ; Set the screen number of the red key in #R$6045 to
                     ; #REGa.
 $98EF LD ($640E),A  ; Set the screen number of the mummy in #R$640D to #REGa
                     ; (the mummy is located in the same screen as the red
                     ; key).
 $98F2 LD A,($5C79)  ; {#REGc=the MSB of FRAMES.
 $98F5 LD C,A        ; }
 $98F6 LD A,($5E13)  ; #REGa=(random) MSB of #R$5E12.
 $98F9 ADD A,C       ;
 $98FA LD HL,$991C   ; #REGhl=address of #R$991C.
 $98FD CALL $9904    ; Get the cyan key's screen number location.
 $9900 LD ($604E),A  ; Set the screen number of the cyan key in #R$604D to
                     ; #REGa.
 $9903 RET           ;

; Get Coloured Key Screen Number
;
; Gets the screen number of a coloured key (green, red or cyan) from the
; specified location table.
; .
; Used by the routine at #R$98D2.
; .
; #TABLE(default)
; { I | #REGa  | The offset in the coloured key's location table. }
; { I | #REGhl | Address of the coloured key's location table; either #R$990C,
; #R$9914 or #R$991C. }
; { O | #REGa  | The screen number of the coloured key. }
; TABLE#
@label=GetColouredKeyScreenNumber
c$9904 AND $07       ; {$00<=#REGc<=$07.
 $9906 LD C,A        ; }
 $9907 LD B,$00      ; $0000<=#REGbc<=$0007; offset in the coloured key's
                     ; location table.
 $9909 ADD HL,BC     ; #REGhl=address in the coloured key's location table of
                     ; the screen number of the coloured key.
 $990A LD A,(HL)     ; #REGa=screen number of the coloured key.
 $990B RET           ;

; Green Key Location Table
;
; Screen numbers the green key can be randomly located at.
@label=GreenKeyLocationTable
b$990C DEFB $05,$06,$07,$6D,$25,$24,$23,$22

; Red Key Location Table
;
; Screen numbers the red key can be randomly located at.
; .
; Note that the mummy is located in the same screen as the red key.
@label=RedKeyLocationTable
b$9914 DEFB $17,$13,$09,$0D,$89,$87,$80,$85

; Cyan Key Location Table
;
; Screen numbers the cyan key can be randomly located at.
@label=CyanKeyLocationTable
b$991C DEFB $53,$8F,$41,$94,$33,$91,$39,$4C

; Routine at 39204
;
; Used by the routine at #R$7E23.
c$9924 LD A,($5E12)  ; #REGa=(random) contents of #R$5E12.
 $9927 LD C,A        ;
 $9928 LD A,($5E13)  ;
 $992B AND $01       ;
 $992D OR C          ;
 $992E RET NZ        ;
 $992F LD HL,($5E55) ;
 $9932 LD DE,$0008   ;
 $9935 ADD HL,DE     ;
 $9936 LD ($5E55),HL ;
 $9939 PUSH HL       ;
 $993A POP IX        ;
 $993C LD DE,$EDD8   ;
 $993F AND A         ;
 $9940 SBC HL,DE     ;
 $9942 JR NC,$995B   ;
 $9944 LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
 $9947 CP (IX+$01)   ;
 $994A RET Z         ;
 $994B LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $994E AND A         ;
 $994F RET NZ        ;
 $9950 LD A,($5C78)  ; #REGa=the LSB of FRAMES.
 $9953 AND $07       ;
 $9955 ADD A,$50     ;
 $9957 LD (IX+$00),A ;
 $995A RET           ;
*$995B LD HL,$EB58   ;
 $995E LD ($5E55),HL ;
 $9961 RET           ;

; Draw Background Item
;
; Draws the specified background item.
; .
; Used by the routine at #R$91F2.
; .
; #TABLE(default)
; { I | #REGb  | Flags of the background item. }
; { I | #REGc  | Graphic index of the background item in #R$A600. }
; { I | #REGde | (Y,X) position of the background item. }
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=DrawBackgroundItem
c$9962 LD HL,$9970   ; #REGhl=address of #R$9970.
; Looks up and jumps to the specified background item's jump routine to either
; draw or colour the background item.
; .
; This entry point is used by the routine at #R$9980.
; .
; #TABLE(default)
; { I | #REGb  | Flags of the background item. }
; { I | #REGc  | Graphic index of the background item in #R$A600. }
; { I | #REGde | (Y,X) position of the background item. }
; { I | #REGhl | Start address of the jump routine table (either #R$9970 or
; #R$9985). }
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=LookupAndJumpToBackgroundItemRoutine
*$9965 PUSH BC       ; Store #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9966 LD A,B        ; #REGa=flags of the background item.
 $9967 RLCA          ; {#REGc=jump table index of the background item in the
 $9968 RLCA          ; jump routine table.
 $9969 RLCA          ;
 $996A AND $07       ;
 $996C LD C,A        ; }
 $996D JP $7E85      ; Lookup and jump to the background item's jump routine to
                     ; either draw or colour the background item.

; Draw Background Item Jump Routine Table
@label=DrawBackgroundItemJumpRoutineTable
w$9970 DEFW $99C9
 $9972 DEFW $99E5
 $9974 DEFW $9A0A
 $9976 DEFW $9A50
 $9978 DEFW $9ACB
 $997A DEFW $9AEF
 $997C DEFW $9B14
 $997E DEFW $9B5D

; Colour Background Item
;
; Colours the specified background item.
; .
; Used by the routine at #R$91F2.
; .
; #TABLE(default)
; { I | #REGb  | Flags of the background item. }
; { I | #REGc  | Graphic index of the background item in #R$A600. }
; { I | #REGde | (Y,X) position of the background item. }
; { I | #REGix | Address of the background item's data structure. }
; TABLE#
@label=ColourBackgroundItem
c$9980 LD HL,$9985   ; #REGhl=address of #R$9985.
 $9983 JR $9965      ; Lookup and jump to the jump routine to colour the
                     ; background item.

; Colour Background Item Jump Routine Table
@label=ColourBackgroundItemJumpRoutineTable
w$9985 DEFW $9D25
 $9987 DEFW $9D47
 $9989 DEFW $9D6F
 $998B DEFW $9DA0
 $998D DEFW $9DCE
 $998F DEFW $9DF8
 $9991 DEFW $9E21
 $9993 DEFW $9E55

; Get Background Item Graphic Data
;
; Gets the specified background item's graphic data.
; .
; Used by the routines at #R$99C9, #R$99E5, #R$9A0A, #R$9A50, #R$9ACB, #R$9AEF,
; #R$9B14 and #R$9B5D.
; .
; #TABLE(default)
; { I | #REGc  | Graphic index of the background item (starting from $01) in
; #R$A600. }
; { I | #REGde | (Y,X) position of the background item. }
; { I | #REGix | Address of the background item's data structure. }
; { O | #REGb  | The width (in bytes) of the background item's graphic. }
; { O | #REGc  | The height (in pixels) of the background item's graphic. }
; { O | #REGde | Address of the background item's graphic data. }
; { O | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=GetBackgroundItemGraphicData
c$9995 LD HL,$A600   ; #REGhl=address of #R$A600.
 $9998 DEC C         ; {#REGbc=calculated offset in #R$A600 of the background
 $9999 LD B,$00      ; item's graphic.
 $999B SLA C         ;
 $999D RL B          ; }
 $999F ADD HL,BC     ; #REGhl=address in #R$A600 of the background item's
                     ; graphic.
 $99A0 LD A,(HL)     ; #REGa=LSB of the address of the background item's
                     ; graphic in #R$A600.
 $99A1 INC HL        ; {#REGh=MSB of the address of the background item's
 $99A2 LD H,(HL)     ; graphic in #R$A600.}
 $99A3 LD L,A        ; #REGhl=address of the background item's graphic in
                     ; #R$A600.
 $99A4 EX DE,HL      ; #REGde=address of the width (in bytes) of the background
                     ; item's graphic. #REGhl=(Y,X) position of the background
                     ; item.
 $99A5 CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $99A8 LD A,(DE)     ; {#REGb=width (in bytes) of the background item's
 $99A9 LD B,A        ; graphic.}
 $99AA INC DE        ; #REGde=address of the height (in pixels) of the
                     ; background item's graphic.
 $99AB LD A,(DE)     ; {#REGc=height (in pixels) of the background item's
 $99AC LD C,A        ; graphic.}
 $99AD INC DE        ; #REGde=address of the background item's graphic data.
 $99AE RET           ;

; Get Background Item Attribute Data
;
; Gets the specified background item's attribute data.
; .
; Used by the routines at #R$9D25, #R$9D47, #R$9D6F, #R$9DA0, #R$9DCE, #R$9DF8,
; #R$9E21 and #R$9E55.
; .
; #TABLE(default)
; { I | #REGc  | Graphic index of the background item (starting from $01) in
; #R$A64E. }
; { I | #REGde | (Y,X) position of the background item. }
; { I | #REGix | Address of the background item's data structure. }
; { O | #REGb  | The width (in bytes) of the background item's attributes. }
; { O | #REGc  | The height (in bytes) of the background item's attributes. }
; { O | #REGde | Address of the background item's attribute data. }
; { O | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=GetBackgroundItemAttributeData
c$99AF LD HL,$A64E   ; #REGhl=address of #R$A64E.
 $99B2 DEC C         ; {#REGbc=calculated offset in #R$A64E of the background
 $99B3 LD B,$00      ; item's attributes.
 $99B5 SLA C         ;
 $99B7 RL B          ; }
 $99B9 ADD HL,BC     ; #REGhl=address in #R$A64E of the background item's
                     ; attributes.
 $99BA LD A,(HL)     ; #REGa=LSB of the address of the background item's
                     ; attributes in #R$A64E.
 $99BB INC HL        ; {#REGh=MSB of the address of the background item's
 $99BC LD H,(HL)     ; attributes in #R$A64E.}
 $99BD LD L,A        ; #REGhl=address of the background item's attributes in
                     ; #R$A64E.
 $99BE EX DE,HL      ; #REGde=address of the width (in bytes) of the background
                     ; item's attributes. #REGhl=(Y,X) position of the
                     ; background item.
 $99BF CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $99C2 LD A,(DE)     ; {#REGb=width (in bytes) of the background item's
 $99C3 LD B,A        ; attributes.}
 $99C4 INC DE        ; #REGde=address of the height (in bytes) of the
                     ; background item's attributes.
 $99C5 LD A,(DE)     ; {#REGc=height (in bytes) of the background item's
 $99C6 LD C,A        ; attributes.}
 $99C7 INC DE        ; #REGde=address of the background item's attributes data.
 $99C8 RET           ;

; Draw Normal Background Item
;
; Draws a background item that is orientated normally. The background item is
; drawn from its bottom-left graphic data to its top-right graphic data (left
; to right and bottom to top).
; .
; The example below is of a #R$CA82 drawn normally.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorNormal)
; }
; TABLE#
@label=DrawNormalBackgroundItem
c$99C9 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $99CA CALL $9D19    ; Get opcode modifier.
 $99CD LD ($99D7),A  ; Modify the code at $99D7 to set the opcode in #REGa.
 $99D0 CALL $9995    ; Get the background item's graphic data.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item to draw. }
; { I | #REGc  | The height (in pixels) of the background item to draw. }
; { I | #REGde | Address of the background item's graphic data. }
; { I | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=DrawNormalBackgroundItemLoop
*$99D3 PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $99D4 PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=DrawNormalBackgroundItemLineLoop
*$99D5 LD A,(DE)     ; #REGa=1x8 glyph line of the background item to draw.
 $99D6 INC DE        ; #REGde=next address of the background item's 1x8 glyph
                     ; line; we draw left to right.
 $99D7 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $99D8 LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $99D9 INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $99DA DJNZ $99D5    ; Loop until the line of the background item has been
                     ; drawn.
 $99DC POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $99DD CALL $9F03    ; Calculate the previous line of the background item.
 $99E0 POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $99E1 DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $99E2 JR NZ,$99D3   ; Loop until the background item has been drawn.
 $99E4 RET           ;

; Draw Flip Horizontal Background Item
;
; Draws a background item that is flipped horizontally. The background item is
; drawn from its bottom-right graphic data to its top-left graphic data (right
; to left and bottom to top).
; .
; The example below is of a #R$CA82 drawn flipped horizontally.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,3;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorFlipHorz)
; }
; TABLE#
@label=DrawFlipHorzBackgroundItem
c$99E5 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $99E6 CALL $9D19    ; Get opcode modifier.
 $99E9 LD ($99F9),A  ; Modify the code at $99F9 to set the opcode in #REGa.
 $99EC CALL $9995    ; Get the background item's graphic data.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item to draw. }
; { I | #REGc  | The height (in pixels) of the background item to draw. }
; { I | #REGde | Address of the background item's graphic data. }
; { I | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=DrawFlipHorzBackgroundItemLoop
*$99EF PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $99F0 PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
 $99F1 CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
@label=DrawFlipHorzBackgroundItemLineLoop
*$99F4 DEC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $99F5 LD A,(DE)     ; #REGa=1x8 glyph line of the background item to draw.
 $99F6 CALL $9A92    ; Flip the 1x8 glyph line in #REGa.
 $99F9 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $99FA LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $99FB INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $99FC DJNZ $99F4    ; Loop until the line of the background item has been
                     ; drawn.
 $99FE POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $99FF CALL $9F03    ; Calculate the previous line of the background item.
 $9A02 POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9A03 CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
 $9A06 DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9A07 JR NZ,$99EF   ; Loop until the background item has been drawn.
 $9A09 RET           ;

; Draw Rotated Right 90 Background Item
;
; Draws a background item that is rotated right by 90 degrees. The background
; item is drawn from its bottom-right graphic data to its top-left draw graphic
; (bottom to top and right to left).
; .
; As the background item has been rotated right by 90 degrees:
; .
; #TABLE
; { The height (in pixels) of the background item is used to draw each column.
; }
; { The width (in bytes) of the background item is used to draw each glyph
; line. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated right by 90 degrees.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2,1;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorRight90)
; }
; TABLE#
@label=DrawRight90BackgroundItem
c$9A0A POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9A0B CALL $9D19    ; Get opcode modifier.
 $9A0E LD ($9A36),A  ; Modify the code at $9A36 to set the opcode in #REGa.
 $9A11 CALL $9995    ; Get the background item's graphic data.
 $9A14 LD A,B        ; #REGa=width (in bytes) of the background item.
 $9A15 EXX           ; #REGb'=width (in bytes) of the background item.
 $9A16 LD L,$01      ; #REGl=$01; rotation bit mask.
 $9A18 LD B,A        ; #REGb=width (in bytes) of the background item.
 $9A19 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc'=height (in pixels) of the
                     ; background item to draw. #REGl'=$01; rotation bit mask.
 $9A1A CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
 $9A1D DEC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item to draw. }
; { I | #REGc  | The height (in pixels) of the background item to draw. }
; { I | #REGde | Address of the background item's graphic data. }
; { I | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=DrawRight90BackgroundItemLoop
*$9A1E PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9A1F PUSH DE       ; Store #REGde; address of the background item's graphic
                     ; data.
 $9A20 PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=DrawRight90BackgroundItemLineLoop
*$9A21 LD A,(DE)     ; #REGa=1x8 glyph line of the background item.
 $9A22 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A23 AND L         ; {If the 1x8 glyph line of the background item does not
 $9A24 JR Z,$9A27    ; have the rotation bit mask set, then skip.}
 $9A26 SCF           ; Set the carry flag.
@label=SkipDrawRight90BackgroundItemSetCarry
*$9A27 RL H          ; Rotate carry into #REGh. #REGh will hold the rotated 1x8
                     ; glyph line.
 $9A29 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A2A CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
 $9A2D DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9A2E LD A,C        ; #REGa=height (in pixels) of the background item to draw
 $9A2F AND $07       ; {Loop until the rotated 1x8 glyph line of the background
 $9A31 JR NZ,$9A21   ; item to be drawn is in #REGh.}
 $9A33 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A34 LD A,H        ; #REGa=1x8 glyph line of the background item to draw.
 $9A35 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A36 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $9A37 LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $9A38 INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $9A39 LD A,C        ; #REGa=height (in pixels) of the background item to draw.
 $9A3A AND A         ; {Loop until the line of the background item has been
 $9A3B JR NZ,$9A21   ; drawn.}
 $9A3D POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $9A3E CALL $9F03    ; Calculate the previous line of the background item.
 $9A41 POP DE        ; Restore #REGde; initial address of the background item's
                     ; pixel data.
 $9A42 POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9A43 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A44 RLC L         ; #REGl=next rotation bit mask (rotate left).
 $9A46 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A47 JR NC,$9A1E   ; Loop until the row of the background item has been
                     ; drawn.
 $9A49 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A4A DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to draw.
 $9A4B EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A4C RET Z         ;
 $9A4D DEC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $9A4E JR $9A1E      ; Loop.

; Draw Rotated Right 90 Flip Vertical Background Item
;
; Draws a background item that is rotated right by 90 degrees and flipped
; vertically. The background item is drawn from its bottom-left graphic data to
; its top-right graphic data (bottom to top and left to right).
; .
; As the background item has been rotated right by 90 degrees:
; .
; #TABLE
; { The height (in pixels) of the background item is used to draw each column.
; }
; { The width (in bytes) of the background item is used to draw each glyph
; line. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated right by 90 degrees and
; flipped vertically.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,0,3;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorRight90FlipVert)
; }
; TABLE#
@label=DrawRight90FlipVertBackgroundItem
c$9A50 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9A51 CALL $9D19    ; Get opcode modifier.
 $9A54 LD ($9A78),A  ; Modify the code at $9A78 to set the opcode in #REGa.
 $9A57 CALL $9995    ; Get the background item's graphic data.
 $9A5A LD A,B        ; #REGa=width (in bytes) of the background item.
 $9A5B EXX           ; #REGb'=width (in bytes) of the background item.
 $9A5C LD B,A        ; #REGl=$80; rotation bit mask.
 $9A5D LD L,$80      ; #REGb=width (in bytes) of the background item.
 $9A5F EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc'=height (in pixels) of the
                     ; background item to draw. #REGl'=$80; rotation bit mask.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item to draw. }
; { I | #REGc  | The height (in pixels) of the background item to draw. }
; { I | #REGde | Address of the background item's graphic data. }
; { I | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=DrawRight90FlipVertBackgroundItemLoop
*$9A60 PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9A61 PUSH DE       ; Store #REGde; address of the background item's graphic
                     ; data.
 $9A62 PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=DrawRight90FlipVertBackgroundItemLineLoop
*$9A63 LD A,(DE)     ; #REGa=1x8 glyph line of the background item.
 $9A64 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A65 AND L         ; {If the 1x8 glyph line of the background item does not
 $9A66 JR Z,$9A69    ; have the rotation bit mask set, then skip.}
 $9A68 SCF           ; Set the carry flag.
@label=SkipDrawRight90FlipVertBackgroundItemSetCarry
*$9A69 RL H          ; Rotate carry into #REGh. #REGh will hold the rotated 1x8
                     ; glyph line.
 $9A6B EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A6C CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
 $9A6F DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9A70 LD A,C        ; #REGa=height (in pixels) of the background item to draw
 $9A71 AND $07       ; {Loop until the rotated 1x8 glyph line of the background
 $9A73 JR NZ,$9A63   ; item to be drawn is in #REGh.}
 $9A75 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A76 LD A,H        ; #REGa=1x8 glyph line of the background item to draw.
 $9A77 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A78 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $9A79 LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $9A7A INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $9A7B LD A,C        ; #REGa=height (in pixels) of the background item to draw.
 $9A7C AND A         ; {Loop until the line of the background item has been
 $9A7D JR NZ,$9A63   ; drawn.}
 $9A7F POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $9A80 CALL $9F03    ; Calculate the previous line of the background item.
 $9A83 POP DE        ; Restore #REGde; initial address of the background item's
                     ; pixel data.
 $9A84 POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9A85 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A86 RRC L         ; #REGl=next rotation bit mask (rotate right).
 $9A88 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A89 JR NC,$9A60   ; Loop until the row of the background item has been
                     ; drawn.
 $9A8B EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9A8C DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to draw.
 $9A8D EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9A8E RET Z         ;
 $9A8F INC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $9A90 JR $9A60      ; Loop.

; Flip A
;
; Flips the byte in #REGa, e.g. 11001100 to 00110011.
; .
; Used by the routines at #R$99C9 and #R$9AEF.
; .
; #TABLE(default)
; { I | #REGa  | The byte to flip. }
; { O | #REGa  | The flipped byte. }
; TABLE#
@label=FlipA
c$9A92 PUSH BC       ; Store #REGbc.
 $9A93 LD B,$08      ; #REGb=$08; loop count.
@label=FlipALoop
*$9A95 RLA           ; {Rotate bit7 in #REGa into #REGc.
 $9A96 RR C          ; }
 $9A98 DJNZ $9A95    ; Loop until finished.
 $9A9A LD A,C        ; #REGa=flipped byte.
 $9A9B POP BC        ; Restore #REGbc.
 $9A9C RET           ;

; Add Width To Background Item Attribute Data
;
; Adds the width (in bytes) of the background item's attributes to the address
; of the background item's attribute data in #REGde.
; .
; Used by the routines at #R$99C9, #R$9A0A, #R$9A50, #R$9AEF, #R$9D6F, #R$9DA0
; and #R$9DF8.
; .
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item's attributes. }
; { I | #REGde | Initial address of the background item's current attribute
; data. }
; { O | #REGde | Initial address plus width (in bytes) of the background item's
; attribute data. }
; TABLE#
@label=AddWidthToBackgroundItemAttributeData
c$9A9D LD A,B        ; #REGa=width (in bytes) of the background item's
                     ; attributes.
 $9A9E ADD A,E       ; Add the LSB of the initial address of the background
                     ; item's attributes to the width (in bytes) of the
                     ; background item's attributes.
 $9A9F LD E,A        ; #REGe=LSB of the calculated address of the background
                     ; item's attributes.
 $9AA0 LD A,D        ; #REGa=MSB of the initial address of the background
                     ; item's attributes.
 $9AA1 ADC A,$00     ; #REGa=MSB of the calculated address of the background
                     ; item's attributes.
 $9AA3 LD D,A        ; #REGde=initial address plus width (in bytes) of the
                     ; background item's attribute data.
 $9AA4 RET           ;

; Subtract Width From Background Item Attribute Data
;
; Subtracts the width (in bytes) of the background item's attributes from the
; address of the background item's attribute data in #REGde.
; .
; Used by the routines at #R$9ACB, #R$9B5D, #R$9DCE and #R$9E55.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item's attributes. }
; { I | #REGde | Initial address of the background item's current attribute
; data. }
; { O | #REGde | Initial address minus width (in bytes) of the background
; item's attribute data. }
; TABLE#
@label=SubtractWidthFromBackgroundItemAttributeData
c$9AA5 LD A,E        ; #REGa=LSB of the initial address of the background
                     ; item's attributes.
 $9AA6 SUB B         ; Subtract the width (in character columns) of the
                     ; background item attributes from the LSB of the initial
                     ; address of the background item's attributes.
 $9AA7 LD E,A        ; #REGe=LSB of the calculated address of the background
                     ; item's attributes.
 $9AA8 LD A,D        ; #REGa=MSB of the initial address of the background
                     ; item's attributes.
 $9AA9 SBC A,$00     ; #REGa=MSB of the calculated address of the background
                     ; item's attributes.
 $9AAB LD D,A        ; #REGde=initial address minus width (in bytes) of the
                     ; background item's attribute data.
 $9AAC RET           ;

; Multiply DE With A
;
; Multiplies #REGde with #REGa, returning the product in #REGhl.
; .
; Used by the routines at #R$8B8A and #R$9ABA.
; .
; #TABLE(default)
; { I | #REGa  | The first factor. }
; { I | #REGde | The second factor. }
; { O | #REGhl | The product of the multiplication. }
; TABLE#
@label=MultiplyDEWithA
c$9AAD LD HL,$0000   ; #REGhl=$0000; will hold the product of #REGa x #REGde.
 $9AB0 LD B,$08      ; #REGb=$08; loop count.
@label=MultiplyDEWithALoop
*$9AB2 ADD HL,HL     ; Double #REGhl.
 $9AB3 RLCA          ; Rotate #REGa to the left (moving bit7 to bit0 and carry
                     ; flag).
 $9AB4 JR NC,$9AB7   ; If there is no carry, then skip.
 $9AB6 ADD HL,DE     ; Add #REGde to #REGhl.
@label=SkipAddDEToHL
*$9AB7 DJNZ $9AB2    ; Loop until finished.
 $9AB9 RET           ;

; Get Background Item Data Last Line
;
; Get the address of the last line of the specifed background item's graphic,
; or attribute, data.
; .
; Used by the routines at #R$9ACB, #R$9AEF, #R$9B5D, #R$9DCE, #R$9DF8 and
; #R$9E55.
; .
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item. }
; { I | #REGc  | The height (in bytes) of the background item. }
; { I | #REGde | Address of the background item's graphic or attribute, data. }
; { O | #REGde | Address of the last line of the background item's graphic or
; attribute, data. }
; TABLE#
@label=GetBackgroundItemDataLastLine
c$9ABA PUSH HL       ; Store #REGhl.
 $9ABB PUSH DE       ; Store #REGde.
 $9ABC LD A,B        ; #REGa=width (in bytes) of the background item.
 $9ABD LD E,C        ; #REGe=height (in bytes) of the background item.
 $9ABE DEC E         ; Decrement #REGe; we want the last line of the background
                     ; item's graphic or attribute, data.
 $9ABF LD D,$00      ; #REGde=height (in bytes) minus 1 of the background item.
 $9AC1 PUSH BC       ; Store #REGbc.
 $9AC2 CALL $9AAD    ; Calculate the offset to the last line of the background
                     ; item's graphic or attribute, data.
 $9AC5 POP BC        ; Restore #REGbc.
 $9AC6 POP DE        ; Restore #REGde.
 $9AC7 ADD HL,DE     ; #REGhl=calculated address of the last line of the
                     ; background item's graphic or attribute, data.
 $9AC8 EX DE,HL      ; #REGde=address of the last line of the background item's
                     ; graphic or attribute, data.
 $9AC9 POP HL        ; Restore #REGhl.
 $9ACA RET           ;

; Draw Flip Vertical Background Item
;
; Draws a background item that is flipped vertically. The background item is
; drawn from its top-left graphic data to its bottom-right graphic data (left
; to right and top to bottom).
; .
; The example below is of a #R$CA82 drawn flipped vertically.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,0;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorFlipVert)
; }
; TABLE#
@label=DrawFlipVertBackgroundItem
c$9ACB POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9ACC CALL $9D19    ; Get opcode modifier.
 $9ACF LD ($9ADD),A  ; Modify the code at $9ADD to set the opcode in #REGa.
 $9AD2 CALL $9995    ; Get the background item's graphic data.
 $9AD5 CALL $9ABA    ; Get the last line of the background item's graphic data;
                     ; its top-left graphic data.
@label=DrawFlipVertBackgroundItemLoop
*$9AD8 PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9AD9 PUSH DE       ; Store #REGde; address of the background item's graphic
                     ; data.
 $9ADA PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=DrawFlipVertBackgroundItemLineLoop
*$9ADB LD A,(DE)     ; #REGa=1x8 glyph line of the background item.
 $9ADC INC DE        ; #REGde=next address of the background item's 1x8 glyph
                     ; line; we draw left to right.
 $9ADD NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $9ADE LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $9ADF INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $9AE0 DJNZ $9ADB    ; Loop until the line of the background item has been
                     ; drawn.
 $9AE2 POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $9AE3 CALL $9F03    ; Calculate the previous line of the background item.
 $9AE6 POP DE        ; Restore #REGde; initial address of the background item's
                     ; pixel data.
 $9AE7 POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9AE8 CALL $9AA5    ; Subtract the width (in bytes) of the background item
                     ; from the background item's graphic data in #REGde.
 $9AEB DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9AEC JR NZ,$9AD8   ; Loop until the background item has been drawn.
 $9AEE RET           ;

; Draw Rotated 180 Background Item
;
; Draws a background item that is rotated by 180 degrees. The background item
; is drawn from its top-right graphic data to its bottom-left graphic data
; (right to left and top to bottom).
; .
; The example below is of a #R$CA82 drawn rotated by 180 degrees.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2,2;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoor180)
; }
; TABLE#
@label=Draw180BackgroundItem
c$9AEF POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9AF0 CALL $9D19    ; Get opcode modifier.
 $9AF3 LD ($9B06),A  ; Modify the code at $9B06 to set the opcode in #REGa.
 $9AF6 CALL $9995    ; Get the background item's graphic data.
 $9AF9 CALL $9ABA    ; Get the last line of the background item's graphic data;
                     ; its top-left graphic data.
 $9AFC CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
@label=Draw180BackgroundItemLoop
*$9AFF PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9B00 PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=Draw180BackgroundItemLineLoop
*$9B01 DEC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $9B02 LD A,(DE)     ; #REGa=1x8 glyph line of the background item.
 $9B03 CALL $9A92    ; Flip the 1x8 glyph line in #REGa.
 $9B06 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $9B07 LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $9B08 INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $9B09 DJNZ $9B01    ; Loop until the line of the background item has been
                     ; drawn.
 $9B0B POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $9B0C CALL $9F03    ; Calculate the previous line of the background item.
 $9B0F POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9B10 DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9B11 JR NZ,$9AFF   ; Loop until the background item has been drawn.
 $9B13 RET           ;

; Draw Rotated Left 90 Flip Vertical Background Item
;
; Draws a background item that is rotated left by 90 degrees and flipped
; vertically. The background item is drawn from its top-right graphic data to
; its bottom-left graphic data (top to bottom and right to left).
; .
; As the background item has been rotated left by 90 degrees:
; .
; #TABLE
; { The height (in pixels) of the background item is used to draw each column.
; }
; { The width (in bytes) of the background item is used to draw each row. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated left by 90 degrees and
; flipped vertically.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,0,1;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorLeft90FlipVert)
; }
; TABLE#
@label=DrawLeft90FlipVertBackgroundItem
c$9B14 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9B15 CALL $9D19    ; Get opcode modifier.
 $9B18 LD ($9B43),A  ; Modify the code at $9B43 to set the opcode in #REGa.
 $9B1B CALL $9995    ; Get the background item's graphic data.
 $9B1E LD A,B        ; #REGa=width (in bytes) of the background item.
 $9B1F EXX           ; #REGb'=width (in bytes) of the background item.
 $9B20 LD B,A        ; #REGb=width (in bytes) of the background item.
 $9B21 LD L,$01      ; #REGl=$80; rotation bit mask.
 $9B23 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc'=height (in pixels) of the
                     ; background item to draw. #REGl'=$80; rotation bit mask.
 $9B24 CALL $9A9D    ; Add the width (in bytes) of the background item to the
                     ; background item's graphic data in #REGde.
 $9B27 DEC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $9B28 CALL $9ABA    ; Get the last line of the background item's graphic data;
                     ; its top-left graphic data.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item to draw. }
; { I | #REGc  | The height (in pixels) of the background item to draw. }
; { I | #REGde | Address of the background item's graphic data. }
; { I | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=DrawLeft90FlipVertBackgroundItemLoop
*$9B2B PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9B2C PUSH DE       ; Store #REGde; address of the background item's graphic
                     ; data.
 $9B2D PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=DrawLeft90FlipVertBackgroundItemLineLoop
*$9B2E LD A,(DE)     ; #REGa=1x8 glyph line of the background item.
 $9B2F EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B30 AND L         ; {If the 1x8 glyph line of the background item does not
 $9B31 JR Z,$9B34    ; have the rotation bit mask set, then skip.}
 $9B33 SCF           ; Set the carry flag.
*$9B34 RL H          ; Rotate carry into #REGh. #REGh will hold the rotated 1x8
                     ; glyph line.
 $9B36 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B37 CALL $9AA5    ; Subtract the width (in bytes) of the background item
                     ; from the background item's graphic data in #REGde.
 $9B3A DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9B3B LD A,C        ; #REGa=height (in pixels) of the background item to draw
 $9B3C AND $07       ; {Loop until the rotated 1x8 glyph line of the background
 $9B3E JR NZ,$9B2E   ; item to be drawn is in #REGh.}
 $9B40 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B41 LD A,H        ; #REGa=1x8 glyph line of the background item to draw.
 $9B42 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B43 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $9B44 LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $9B45 INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $9B46 LD A,C        ; #REGa=height (in pixels) of the background item to draw.
 $9B47 AND A         ; {Loop until the line of the background item has been
 $9B48 JR NZ,$9B2E   ; drawn.}
 $9B4A POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $9B4B CALL $9F03    ; Calculate the previous line of the background item.
 $9B4E POP DE        ; Restore #REGde; initial address of the background item's
                     ; pixel data.
 $9B4F POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9B50 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B51 RLC L         ; #REGl=next rotation bit mask (rotate left).
 $9B53 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B54 JR NC,$9B2B   ; Loop until the row of the background item has been
                     ; drawn.
 $9B56 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B57 DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to draw.
 $9B58 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B59 RET Z         ;
 $9B5A DEC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $9B5B JR $9B2B      ; Loop.

; Draw Rotated Left 90 Background Item
;
; Draws a background item that is rotated left by 90 degrees. The background
; item is drawn from its top-left graphic data to its bottom-right draw
; attribute (top to bottom and left to right).
; .
; As the background item has been rotated left by 90 degrees:
; .
; #TABLE
; { The height (in pixels) of the background item is used to draw each column.
; }
; { The width (in bytes) of the background item is used to draw each row. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated left by 90 degrees.
; .
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2,3;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoorLeft90)
; }
; TABLE#
@label=DrawLeft90BackgroundItem
c$9B5D POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A600.
 $9B5E CALL $9D19    ; Get opcode modifier.
 $9B61 LD ($9B88),A  ; Modify the code at $9B88 to set the opcode in #REGa.
 $9B64 CALL $9995    ; Get the background item's graphic data.
 $9B67 LD A,B        ; #REGa=width (in bytes) of the background item.
 $9B68 EXX           ; #REGb'=width (in bytes) of the background item.
 $9B69 LD B,A        ; #REGb=width (in bytes) of the background item.
 $9B6A LD L,$80      ; #REGl=$80; rotation bit mask.
 $9B6C EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc'=height (in pixels) of the
                     ; background item to draw. #REGl'=$80; rotation bit mask.
 $9B6D CALL $9ABA    ; Get the last line of the background item's graphic data;
                     ; its top-left graphic data.
; #TABLE(default)
; { I | #REGb  | The width (in bytes) of the background item to draw. }
; { I | #REGc  | The height (in pixels) of the background item to draw. }
; { I | #REGde | Address of the background item's graphic data. }
; { I | #REGhl | Screen pixel address to draw the background item at. }
; TABLE#
@label=DrawLeft90BackgroundItemLoop
*$9B70 PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9B71 PUSH DE       ; Store #REGde; address of the background item's graphic
                     ; data.
 $9B72 PUSH HL       ; Store #REGhl; screen pixel address to draw the
                     ; background item at.
@label=DrawLeft90BackgroundItemLineLoop
*$9B73 LD A,(DE)     ; #REGa=1x8 glyph line of the background item.
 $9B74 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B75 AND L         ; {If the 1x8 glyph line of the background item does not
 $9B76 JR Z,$9B79    ; have the rotation bit mask set, then skip.}
 $9B78 SCF           ; Set the carry flag.Set the carry flag.
@label=SkipDrawLeft90BackgroundItemSetCarry
*$9B79 RL H          ; Rotate carry into #REGh. #REGh will hold the rotated 1x8
                     ; glyph line.
 $9B7B EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B7C CALL $9AA5    ; Subtract the width (in bytes) of the background item
                     ; from the background item's graphic data in #REGde.
 $9B7F DEC C         ; Decrement #REGc; height (in pixels) of the background
                     ; item to draw.
 $9B80 LD A,C        ; #REGa=height (in pixels) of the background item to draw
 $9B81 AND $07       ; {Loop until the rotated 1x8 glyph line of the background
 $9B83 JR NZ,$9B73   ; item to be drawn is in #REGh.}
 $9B85 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B86 LD A,H        ; #REGa=1x8 glyph line of the background item to draw.
 $9B87 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B88 NOP           ; Self-modified code. Either NOP, OR (HL) or XOR (HL).
 $9B89 LD (HL),A     ; Set screen pixels in #REGhl to #REGa; set the 1x8 glyph
                     ; line of the background item.
 $9B8A INC L         ; #REGhl=next screen pixel address to set the next 1x8
                     ; glyph line of the background item.
 $9B8B LD A,C        ; #REGa=height (in pixels) of the background item to draw.
 $9B8C AND A         ; {Loop until the line of the background item has been
 $9B8D JR NZ,$9B73   ; drawn.}
 $9B8F POP HL        ; #REGhl=initial screen pixel address to draw the
                     ; background item at.
 $9B90 CALL $9F03    ; Calculate the previous line of the background item.
 $9B93 POP DE        ; Restore #REGde; initial address of the background item's
                     ; pixel data.
 $9B94 POP BC        ; Restore #REGbc. #REGb=width (in bytes) of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw.
 $9B95 EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B96 RRC L         ; #REGl=next rotation bit mask (rotate right).
 $9B98 EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B99 JR NC,$9B70   ; Loop until the row of the background item has been
                     ; drawn.
 $9B9B EXX           ; #REGb=number of character columns of the background item
                     ; to draw. #REGb'=width (in bytes) of the background item.
                     ; #REGc'=height (in pixels) of the background item to
                     ; draw. #REGl=rotation bit mask.
 $9B9C DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to draw.
 $9B9D EXX           ; #REGb=width (in bytes) of the background item.
                     ; #REGb'=number of character columns of the background
                     ; item to draw. #REGc=height (in pixels) of the background
                     ; item to draw. #REGl'=rotation bit mask.
 $9B9E RET Z         ;
 $9B9F INC DE        ; #REGde=previous address of the background item's 1x8
                     ; glyph data; we draw from right to left.
 $9BA0 JR $9B70      ; Loop.

; Calculate Screen Pixel Address
;
; Calculates the screen pixel address for a specified (Y,X) position.
; .
; #TABLE(default)
; { =h High Byte | =h Low Byte }
; { 0 1 0 T T L L L | Cr Cr Cr Cc Cc Cc Cc Cc }
; TABLE#
; .
; Top three bits (010) of the high byte don't change.
; .
; T - These two bits refer to which third of the screen is being addressed:
; 00=top, 01=middle, 10=bottom.
; .
; L - These three bits indicate which line is being addressed: from 0-7.
; .
; Cr - These three bits indicate which character row is being addressed: from
; 0-7.
; .
; Cc - These five bits refer to which character column is being addressed: from
; 0-31.
; .
; Used by the routines at #R$7D8A, #R$8B8A, #R$95DA, #R$9641, #R$9995, #R$9C61,
; #R$9F80, #R$9F9F, #R$A185, #R$A19C, #R$A1F3 and #R$A219.
; .
; #TABLE(default)
; { I | #REGhl | (Y,X) position. }
; { O | #REGhl | Calculated screen pixel address for the (Y,X) position. }
; TABLE#
@label=CalculateScreenPixelAddress
c$9BA2 LD A,L        ; #REGa=X coordinate.
 $9BA3 RRCA          ; {Calculate the character column.
 $9BA4 RRCA          ;
 $9BA5 RRCA          ;
 $9BA6 AND $1F       ; }
 $9BA8 LD L,A        ; #REGl=character column.
 $9BA9 LD A,H        ; #REGa=Y coordinate.
 $9BAA RLCA          ; {Calculate the character row.
 $9BAB RLCA          ;
 $9BAC AND $E0       ; }
 $9BAE OR L          ; #REGa=character row | character column.
 $9BAF LD L,A        ; #REGl=low byte of screen pixel address.
 $9BB0 LD A,H        ; #REGa=Y coordinate.
 $9BB1 AND $07       ; Calculate the line being addressed.
 $9BB3 EX AF,AF'     ; #REGa'=line being addressed.
 $9BB4 LD A,H        ; #REGa=Y coordinate.
 $9BB5 RRCA          ; {Calculate the third of the screen being addressed.
 $9BB6 RRCA          ;
 $9BB7 RRCA          ;
 $9BB8 AND $18       ; }
 $9BBA OR $40        ; #REGa=third of the screen being addressed | fixed top 3
                     ; bits (010).
 $9BBC LD H,A        ;
 $9BBD EX AF,AF'     ; #REGa=line being addressed.
 $9BBE OR H          ; #REGa=high byte of screen pixel address.
 $9BBF LD H,A        ; #REGh=high byte of screen pixel address.
 $9BC0 RET           ;

i$9BC1

; Calculate Screen Attribute Address
;
; Calculate the screen attribute address for a specified (Y,X) position.
; .
; #TABLE(default)
; { =h High Byte | =h Low Byte }
; { 0 1 0 1 1 0 Cr Cr | Cr Cr Cr Cc Cc Cc Cc Cc }
; TABLE#
; .
; top six bits (010110) of the high byte don't change.
; .
; Cr - These five bits indicate which character row is being addressed: from
; 0-23.
; .
; Cc - These five bits refer to which character column is being addressed: from
; 0-31.
; .
; Used by the routines at #R$7D8A, #R$8C8C, #R$99AF, #R$A00E, #R$A1F3 and
; #R$A240.
; .
; #TABLE(default)
; { I | #REGhl | (Y,X) position. }
; { O | #REGhl | Calculated screen attribute address for the (Y,X) position. }
; TABLE#
@label=CalculateScreenAttributeAddress
c$9BD2 PUSH BC       ; Store #REGbc.
 $9BD3 LD A,L        ; #REGa=X coordinate.
 $9BD4 RRCA          ; {Calculate the character column.
 $9BD5 RRCA          ;
 $9BD6 RRCA          ;
 $9BD7 AND $1F       ; }
 $9BD9 LD L,A        ; #REGl=character column.
 $9BDA LD A,H        ; #REGa=Y coordinate.
 $9BDB RLCA          ; {Calculate the bottom 3 bits of the character row.
 $9BDC RLCA          ; }
 $9BDD LD C,A        ;
 $9BDE AND $E0       ; #REGa=bottom 3 bits of the character row.
 $9BE0 OR L          ; #REGa=bottom 3 bits of the character row | character
                     ; column.
 $9BE1 LD L,A        ; #REGl=low byte of screen attribute address.
 $9BE2 LD A,C        ; {Mask the top 2 bits of the character row.
 $9BE3 AND $03       ; }
 $9BE5 OR $58        ; #REGa=top 2 bits of the character row | fixed top 6 bits
                     ; (010110).
 $9BE7 LD H,A        ; #REGh=high byte of screen attribute address.
 $9BE8 POP BC        ; Restore #REGbc.
 $9BE9 RET           ;

; Draw Screen
;
; Draws the current screen.
; .
; Used by the routine at #R$9117.
@label=DrawScreen
c$9BEA XOR A         ; {Clear #R$5E14.
 $9BEB LD ($5E14),A  ; }
 $9BEE LD A,($EA91)  ; #REGa=player's screen number in #R$EA90.
; Draws the specified screen.
; .
; This entry point is used by the routine at #R$9731.
; .
; #TABLE(default)
; { I | #REGa  | The screen number. }
; TABLE#
@label=DrawScreen1
*$9BF1 LD BC,$A854   ; #REGbc=address of #R$A854.
 $9BF4 LD L,A        ; {#REGhl=offset in #R$A854 of the current screen.
 $9BF5 LD H,$00      ;
 $9BF7 ADD HL,HL     ; }
 $9BF8 ADD HL,BC     ; #REGhl=address in #R$A854 of the current screen.
 $9BF9 LD A,(HL)     ; #REGa=colour attribute in #R$A854 of the current screen.
 $9BFA INC HL        ; #REGhl=address in #R$A854 of the current screen's screen
                     ; type.
 $9BFB LD ($5E1A),A  ; Set the colour attribute in #R$5E1A to #REGa.
 $9BFE EXX           ; #REGhl'=address in #R$A854 of the current screen's
                     ; screen type.
 $9BFF LD HL,$5800   ; #REGhl=start of screen attributes memory.
 $9C02 LD BC,$1818   ; #REGb=$18; the screen playing area is $18 character
                     ; columns wide. #REGc=$18; the screen playing area is $18
                     ; character rows high.
 $9C05 LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
 $9C08 CALL $809A    ; Set the colour of the screen playing area.
 $9C0B EXX           ; #REGhl=address in #R$A854 of the current screen's screen
                     ; type.
 $9C0C LD L,(HL)     ; {#REGhl=current screen's screen type.
 $9C0D LD H,$00      ; }
 $9C0F ADD HL,HL     ; {#REGhl=calculated offset from #R$A982 of the screen
 $9C10 LD C,L        ; data for drawing the current screen.
 $9C11 LD B,H        ;
 $9C12 ADD HL,HL     ;
 $9C13 ADD HL,BC     ; }
 $9C14 LD BC,$A982   ; {#REGhl=address of the screen data for drawing the
 $9C17 ADD HL,BC     ; current screen.}
 $9C18 LD A,(HL)     ; #REGa=interior width (in pixels) of the current screen.
 $9C19 INC HL        ; #REGhl=address of the interior height (in pixels) of the
                     ; current screen.
 $9C1A LD ($5E1D),A  ; Set the current screen's interior width in #R$5E1D to
                     ; #REGa.
 $9C1D LD A,(HL)     ; #REGa=interior height (in pixels) of the current screen.
 $9C1E INC HL        ; #REGhl=address of the LSB of the address of the point
                     ; data of the current screen.
 $9C1F LD ($5E1E),A  ; Set the current screen's interior height in #R$5E1D to
                     ; #REGa.
 $9C22 LD E,(HL)     ; {#REGde=address of the point data of the current screen.
 $9C23 INC HL        ;
 $9C24 LD D,(HL)     ; }
 $9C25 INC HL        ; #REGhl=address of the LSB of the address of the lineTo
                     ; data of the current screen.
 $9C26 LD A,(HL)     ; {#REGhl=address of the lineTo data of the current
 $9C27 INC HL        ; screen.
 $9C28 LD H,(HL)     ;
 $9C29 LD L,A        ; }
 $9C2A PUSH DE       ; {#REGix=address of the point data of the current screen.
 $9C2B POP IX        ; }
 $9C2D PUSH BC       ; Store #REGbc; address of #R$A982.
; #TABLE(default)
; { I | #REGhl | Address of the lineTo data (start point) of the current
; screen. }
; { I | #REGix | Address of the point data of the current screen. }
; TABLE#
@label=StartPointLoop
*$9C2E POP BC        ; Restore #REGbc.
 $9C2F LD A,(HL)     ; #REGa=index to the start point data of the current
                     ; screen in #REGhl.
 $9C30 INC HL        ; #REGhl=next address of the lineTo data of the current
                     ; screen.
 $9C31 CP $FF        ; {If the next index to the point data is $FF, then we're
 $9C33 RET Z         ; done.}
 $9C34 SLA A         ; Double #REGa. #REGa=the index to the Y coordinate of the
                     ; start point.
 $9C36 LD ($9C3F),A  ; Modify the code at $9C3F to set the index to the Y
                     ; coordinate of the start point in #REGa.
 $9C39 INC A         ; Increment #REGa. #REGa=the index to the X coordinate of
                     ; the start point.
 $9C3A LD ($9C42),A  ; Modify the code at $9C42 to set the index to the X
                     ; coordinate of the start point in #REGa.
 $9C3D LD C,(IX+$00) ; {#REGbc=(Y,X) position of the start point.
 $9C40 LD B,(IX+$00) ; }
; #TABLE(default)
; { I | #REGbc | The (Y,X) position of the start point. }
; { I | #REGhl | Address of the lineTo data (end point) of the current screen.
; }
; { I | #REGix | Address of the point data of the current screen. }
; TABLE#
@label=DrawToEndPointLoop
*$9C43 PUSH BC       ; Store #REGbc; (Y,X) position of the start point.
 $9C44 LD A,(HL)     ; #REGa=index to the end point data of the current screen
                     ; in #REGhl.
 $9C45 INC HL        ; #REGhl=next address of the lineTo data of the current
                     ; screen.
 $9C46 CP $FF        ; {If the next index to the point data is $FF, then we are
 $9C48 JR Z,$9C2E    ; finished drawing from the start point.}
 $9C4A SLA A         ; Double #REGa. #REGa=the index to the Y coordinate of the
                     ; end point.
 $9C4C LD ($9C55),A  ; Modify the code at $9C55 to set the index to the Y
                     ; coordinate of the end point in #REGa.
 $9C4F INC A         ; Increment #REGa. #REGa=the index to the X coordinate of
                     ; the end point.
 $9C50 LD ($9C58),A  ; Modify the code at $9C58 to set the index to the X
                     ; coordinate of the end point in #REGa.
 $9C53 LD E,(IX+$00) ; {#REGde=(Y,X) position of the end point.
 $9C56 LD D,(IX+$00) ; }
 $9C59 PUSH HL       ; Store #REGhl; next address of the lineTo data (end
                     ; point) of the current screen.
 $9C5A CALL $9C79    ; Draw from the start point to the end point.
 $9C5D POP HL        ; Restore #REGhl; next address of the lineTo data (end
                     ; point) of the current screen.
 $9C5E POP BC        ; Restore #REGbc; (Y,X) position of the start point.
 $9C5F JR $9C43      ; Loop until we've drawn from the start point to all end
                     ; points.

; Plot Point
;
; Sets a single point at a specified (Y,X) position.
; .
; Used by the routine at #R$9C79.
; .
; #TABLE(default)
; { I | #REGhl | The (Y,X) position of the point to set. }
; TABLE#
@label=PlotPoint
c$9C61 LD A,L        ; #REGa=X coordinate of the point to set.
 $9C62 AND $07       ; {#REGb=required number of right bit shifts to set the
 $9C64 INC A         ; point at the X coordinate.
 $9C65 LD B,A        ; }
 $9C66 XOR A         ; Clear #REGa.
 $9C67 SCF           ; Set the carry flag.
; #TABLE(default)
; { I | #REGb | The required number of right bit shifts to set the point at the
; X coordinate. }
; TABLE#
@label=SetXCoordinateBitLoop
*$9C68 RRA           ; 9-bit rotate #REGa to the right.
 $9C69 DJNZ $9C68    ; Loop until we've performed the required number of right
                     ; bit shifts to set the point at the X coordinate.
 $9C6B PUSH HL       ; Store #REGhl; (Y,X) position of the point to set.
 $9C6C PUSH AF       ; Store #REGa; byte representing the point to set.
 $9C6D EX AF,AF'     ; #REGa= ???. #REGa'=byte representing the point to set.
 $9C6E PUSH AF       ; Store #REGa; ???
 $9C6F CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $9C72 POP AF        ; Restore #REGa; ???
 $9C73 EX AF,AF'     ; #REGa=byte representing the point to set. #REGa'=???.
 $9C74 POP AF        ; Restore #REGa; byte representing the point to set.
 $9C75 OR (HL)       ; {Set the point by ORing the byte representing the point
 $9C76 LD (HL),A     ; in #REGa with the current byte at the screen pixel
                     ; address to draw the line at.}
 $9C77 POP HL        ; Restore #REGhl; (Y,X) position of the point to draw the
                     ; line at.
 $9C78 RET           ;

; Draw Line From Start Point To End Point
;
; Draws a line from a specified start point to a specified end point, using
; Bresenham's Line Drawing Algorithm.
; .
; Used by the routine at #R$9BEA.
; .
; #TABLE(default)
; { I | #REGbc | The (Y,X) position of the start point. }
; { I | #REGde | The (Y,X) position of the end point. }
; TABLE#
@label=DrawLineFromStartPointToEndPoint
c$9C79 LD H,B        ; {#REGhl=(Y,X) position of the start point.
 $9C7A LD L,C        ; }
 $9C7B LD C,$00      ; #REGc=$00; clear drawing flags.
 $9C7D LD A,H        ; #REGa=Y coordinate of the start point.
 $9C7E SUB D         ; Subtract the Y coordinate of the end point from the Y
                     ; coordinate of the start point in #REGa.
 $9C7F JR NC,$9C85   ; If the Y coordinate of the end point is less than or
                     ; equal to the Y coordinate of the start point, then skip.
 $9C81 NEG           ; #REGa=absolute vertical distance between the Y
                     ; coordinate of the start point and the Y coordinate of
                     ; the end point.
 $9C83 SET 0,C       ; Set bit0 in #REGc; the Y coordinate of the end point is
                     ; greater than the Y coordinate of the start point.
@label=SkipAbsVerticalDistance
*$9C85 LD B,A        ; #REGb=delta Y; absolute vertical distance between the
                     ; start point and the end point.
 $9C86 LD A,L        ; #REGa=X coordinate of the start point.
 $9C87 SUB E         ; Subtract the X coordinate of the end point from the X
                     ; coordinate of the start point in #REGa.
 $9C88 JR NC,$9C8E   ; If the X coordinate of the end point is less than or
                     ; equal to the X coordinate of the start point, then skip.
 $9C8A NEG           ; #REGa=absolute horizontal distance between the X
                     ; coordinate of the start point and the X coordinate of
                     ; the end point.
 $9C8C SET 1,C       ; Set bit1 in #REGc; the X coordinate of the end point is
                     ; greater than the X coordinate of the start point.
@label=SkipAbsHorizontalDistance
*$9C8E CP B          ; Compare delta Y in #REGb with delta X in #REGa.
 $9C8F EX AF,AF'     ; #REGa'=delta X.
 $9C90 LD A,C        ; {Set the line drawing flags in #R$5E24 to #REGa.
 $9C91 LD ($5E24),A  ; }
 $9C94 EX AF,AF'     ; #REGa=delta X. #REGa'=line drawing flags.
 $9C95 JP C,$9CD6    ; If delta X < delta Y, then jump.
 $9C98 LD ($5E23),A  ; Set the line drawing maximum delta in #R$5E23 to delta
                     ; X.
 $9C9B PUSH DE       ; Store #REGde; (Y,X) position of the end point.
 $9C9C PUSH HL       ; Store #REGhl; (Y,X) position of the start point.
 $9C9D LD E,A        ; #REGe=delta X; maximum delta.
 $9C9E LD D,$00      ; #REGd=$00.
 $9CA0 LD L,D        ; #REGl=$00.
 $9CA1 LD H,B        ; #REGh=delta Y; minimum delta.
 $9CA2 CALL $A379    ; Calculate the initial decision variable.
 $9CA5 LD A,($5E24)  ; #REGa=contents of #R$5E24.
 $9CA8 BIT 0,A       ; {If bit0 is set, then the Y coordinate of the end point
 $9CAA JR NZ,$9CAF   ; is greater than the Y coordinate of the start point.}
 $9CAC CALL $A39E    ; Negate the calculated decision variable; the slope is
                     ; negative.
@label=SkipNegateDecisionVariable1
*$9CAF LD A,($5E24)  ; #REGa=contents of #R$5E24.
 $9CB2 BIT 1,A       ; {If bit1 is set, then the X coordinate of the end point
 $9CB4 LD C,$01      ; is greater than the X coordinate of the start point.
 $9CB6 JR NZ,$9CBA   ; #REGc=$01; the X coordinate should be incremented as the
                     ; line is drawn.}
 $9CB8 LD C,$FF      ; The X coordinate of the end point is less than or equal
                     ; to the X coordinate of the start point. #REGc=$FF; the X
                     ; coordinate should be decremented as the line is drawn.
@label=SkipNegateIncrement1
*$9CBA EX DE,HL      ; #REGde=decision variable.
 $9CBB POP HL        ; Restore #REGhl; (Y,X) position of the start point.
 $9CBC LD A,($5E23)  ; #REGa=contents of #R$5E23.
 $9CBF INC A         ; Increment #REGa; number of X coordinate
                     ; increments/decrements required to draw the line.
 $9CC0 LD B,A        ; #REGb=number of X coordinate increments/decrements
                     ; required to draw the line.
 $9CC1 LD A,E        ; {#REGa'=LSB of the decision variable.
 $9CC2 EX AF,AF'     ; }
; #TABLE(default)
; { I | #REGa' | The LSB of the decision variable. }
; { I | #REGb  | The number of X coordinate increments/decrements required to
; draw the line. }
; { I | #REGc  | The X coordinate increment ($01) or decrement ($FF). }
; { I | #REGde | The decision variable. }
; { I | #REGhl | The (Y,X) position of the point to plot. }
; TABLE#
@label=DrawLineWithNegativeSlope
*$9CC3 PUSH BC       ; Store #REGbc; #REGb=number of X coordinate
                     ; increments/decrements required to draw the line. #REGc=X
                     ; coordinate increment ($01) or decrement ($FF).
 $9CC4 CALL $9C61    ; Plot the point.
 $9CC7 LD A,L        ; #REGa=X coordinate of the plotted point.
 $9CC8 EX AF,AF'     ; #REGa=LSB of the decision variable. #REGa'=X coordinate
                     ; of the plotted point.
 $9CC9 LD L,A        ; #REGl=LSB of the decision variable.
 $9CCA ADD HL,DE     ; #REGl=calculated next decision variable. Instead of
                     ; calculating the value of the decision variable at each
                     ; decision point, we use incremental computation to
                     ; calculate how it differs from the previous decision
                     ; variable.
 $9CCB LD A,L        ; #REGa=next decision variable.
 $9CCC EX AF,AF'     ; #REGa=X coordinate of the plotted point. #REGa'=next
                     ; decision variable.
 $9CCD POP BC        ; Restore #REGbc. #REGb=number of X coordinate
                     ; increments/decrements required to draw the line. #REGc=X
                     ; coordinate increment ($01) or decrement ($FF).
 $9CCE ADD A,C       ; #REGa=X coordinate of the next point to plot.
 $9CCF LD L,A        ; #REGhl=(Y,X) position of the next point to plot.
 $9CD0 DJNZ $9CC3    ; Loop until the line has been plotted.
 $9CD2 POP HL        ; Restore #REGhl; (Y,X) position of the end point.
 $9CD3 JP $9C61      ; Plot the end point.
@label=DeltaXLessThanDeltaY
*$9CD6 EX AF,AF'     ; #REGa=line drawing flags. #REGa'=delta X.
 $9CD7 LD A,B        ; {Set the line drawing maximum delta in #R$5E23 to delta
 $9CD8 LD ($5E23),A  ; Y.}
 $9CDB EX AF,AF'     ; #REGa=delta X. #REGa'=line drawing flags.
 $9CDC PUSH DE       ; Store #REGde; (Y,X) position of the end point.
 $9CDD PUSH HL       ; Store #REGhl; (Y,X) position of the start point.
 $9CDE LD E,B        ; #REGe=delta Y; maximum delta.
 $9CDF LD D,$00      ; #REGd=$00.
 $9CE1 LD L,D        ; #REGl=$00.
 $9CE2 LD H,A        ; #REGh=delta X; minimum delta.
 $9CE3 CALL $A379    ; Calculate the initial decision variable.
 $9CE6 LD A,($5E24)  ; #REGa=contents of #R$5E24.
 $9CE9 BIT 1,A       ; {If bit1 is set, then the X coordinate of the end point
 $9CEB JR NZ,$9CF0   ; is greater than the X coordinate of the start point.}
 $9CED CALL $A39E    ; Negate the calculated decision variable; the slope is
                     ; negative.
@label=SkipNegateDecisionVariable2
*$9CF0 LD A,($5E24)  ; #REGa=contents of #R$5E24.
 $9CF3 BIT 0,A       ; {If bit0 is set, then the Y coordinate of the end point
 $9CF5 LD C,$01      ; is greater than the Y coordinate of the start point.
 $9CF7 JR NZ,$9CFB   ; #REGc=$01; the Y coordinate should be incremented as the
                     ; line is drawn.}
 $9CF9 LD C,$FF      ; The Y coordinate of the end point is less than or equal
                     ; to the Y coordinate of the start point. #REGc=$FF; the Y
                     ; coordinate should be decremented as the line is drawn.
@label=SkipNegateIncrement2
*$9CFB EX DE,HL      ; #REGde=decision variable.
 $9CFC POP HL        ; Restore #REGhl; (Y,X) position of the start point.
 $9CFD LD A,($5E23)  ; #REGa=contents of #R$5E23.
 $9D00 INC A         ; Increment #REGa; number of Y coordinate
                     ; increments/decrements required to draw the line.
 $9D01 LD B,A        ; #REGb=number of X coordinate increments/decrements
                     ; required to draw the line.
 $9D02 LD A,E        ; {#REGa'=LSB of the decision variable.
 $9D03 EX AF,AF'     ; }
; #TABLE(default)
; { I | #REGa' | The LSB of the decision variable. }
; { I | #REGb  | The number of Y coordinate increments/decrements required to
; draw the line. }
; { I | #REGc  | The Y coordinate increment ($01) or decrement ($FF). }
; { I | #REGde | The decision variable. }
; { I | #REGhl | The (Y,X) position of the point to plot. }
; TABLE#
@label=DrawLineWithPositiveSlope
*$9D04 PUSH BC       ; Store #REGbc; #REGb=number of Y coordinate
                     ; increments/decrements required to draw the line. #REGc=Y
                     ; coordinate increment ($01) or decrement ($FF).
 $9D05 CALL $9C61    ; Plot the point.
 $9D08 LD A,H        ; #REGa=Y coordinate of the plotted point.
 $9D09 EX AF,AF'     ; #REGa=LSB of the decision variable. #REGa'=Y coordinate
                     ; of the plotted point.
 $9D0A LD H,L        ; #REGh=X coordinate of the plotted point.
 $9D0B LD L,A        ; #REGl=LSB of the decision variable.
 $9D0C ADD HL,DE     ; #REGl=calculated next decision variable. Instead of
                     ; calculating the value of the decision variable at each
                     ; decision point, we use incremental computation to
                     ; calculate how it differs from the previous decision
                     ; variable.
 $9D0D LD A,L        ; #REGa=next decision variable.
 $9D0E LD L,H        ; #REGl=X coordinate of the next point to plot.
 $9D0F EX AF,AF'     ; #REGa=Y coordinate of the plotted point. #REGa'=next
                     ; decision variable.
 $9D10 POP BC        ; Restore #REGbc. #REGb=number of Y coordinate
                     ; increments/decrements required to draw the line. #REGc=Y
                     ; coordinate increment ($01) or decrement ($FF).
 $9D11 ADD A,C       ; #REGa=Y coordinate of the next point to plot.
 $9D12 LD H,A        ; #REGhl=(Y,X) position of the next point to plot.
 $9D13 DJNZ $9D04    ; Loop until the line has been plotted.
 $9D15 POP HL        ; Restore #REGhl; (Y,X) position of the end point.
 $9D16 JP $9C61      ; Plot the end point.

; Get Opcode Modifier
;
; Gets an opcode modifier when drawing a background item. The opcode modifier
; is controlled by bit0-1 of the background item's flags.
; .
; #TABLE(default)
; { =h Value | =h Opcode }
; { $00 | NOP }
; { $01 | OR (HL) }
; { $02 | XOR (HL) }
; { $03 | XOR (HL) }
; TABLE#
; .
; Used by the routines at #R$99C9, #R$9A0A, #R$9A50, #R$9ACB, #R$9AEF and
; #R$9B5D.
; .
; #TABLE(default)
; { I | #REGb | Flags of the background item. }
; { O | #REGa | The opcode modifier ($00=NOP, $AE=XOR (HL), $B6=OR (HL). }
; TABLE#
@label=GetOpcodeModifier
c$9D19 LD A,B        ; #REGa=flags of the background item.
 $9D1A AND $03       ; {If bit0-1 of the background item's flags is $00, then
 $9D1C RET Z         ; #REGa=$00; NOP.}
 $9D1D CP $01        ; {If bit0-1 of the background item's flags is $02 or $03,
 $9D1F LD A,$AE      ; then #REGa=$AE; XOR (HL).
 $9D21 RET NZ        ; }
 $9D22 ADD A,$08     ; #REGa=$B6; OR (HL).
 $9D24 RET           ;

; Colour Normal Background Item
;
; Colours a background item that is orientated normally. The background item is
; coloured from its bottom-left colour attribute to its top-right colour
; attribute (left to right and bottom to top).
; .
; The example below is of a #R$CA82 drawn normally.
; .
; #UDGTABLE
; { #UDG$9D25(ShutNormalDoorNormal) }
; TABLE#
@label=ColourNormalBackgroundItem
c$9D25 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9D26 CALL $99AF    ; Get the background item's attribute data.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourNormalBackgroundItemLoop
*$9D29 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9D2A PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourNormalBackgroundItemRowLoop
*$9D2B LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9D2C INC DE        ; #REGde=next address of the background item's attribute
                     ; data; we colour left to right.
 $9D2D AND A         ; {If the background item attribute is black/black, then
 $9D2E JR Z,$9D38    ; don't colour it.}
 $9D30 CP $FF        ; {If the background item attribute is not to be set to
 $9D32 JR NZ,$9D37   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9D34 LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetNormalBackgroundItemToScreenColour
*$9D37 LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetNormalBackgroundItemColour
*$9D38 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9D39 DJNZ $9D2B    ; Loop until the row of the background item has been
                     ; coloured.
 $9D3B POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9D3C LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9D3F AND A         ; Clear carry flag!
 $9D40 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9D42 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9D43 DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9D44 JR NZ,$9D29   ; Loop until the background item has been coloured.
 $9D46 RET           ;

; Colour Flip Horizontal Background Item
;
; Colours a background item that is flipped horizontally. The background item
; is coloured from its bottom-right colour attribute to its top-left colour
; attribute (right to left and bottom to top).
; .
; The example below is of a #R$CA82 drawn flipped horizontally.
; .
; #UDGTABLE
; { #UDG$9D47(ShutNormalDoorFlipHorz) }
; TABLE#
@label=ColourFlipHorzBackgroundItem
c$9D47 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9D48 CALL $99AF    ; Get the background item's attribute data.
 $9D4B DEC DE        ; #REGde=address of the height (in bytes) of the
                     ; background item's attribute data.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourFlipHorzBackgroundItemLoop
*$9D4C CALL $9A9D    ; Add the width (in character columns) of the background
                     ; item to the background item's attribute data in #REGde.
 $9D4F PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9D50 PUSH DE       ; Store #REGde; address of the background item's attribute
                     ; data.
 $9D51 PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourFlipHorzBackgroundItemRowLoop
*$9D52 LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9D53 DEC DE        ; #REGde=previous address of the background item's
                     ; attribute data; we colour from right to left.
 $9D54 AND A         ; {If the background item attribute is black/black, then
 $9D55 JR Z,$9D5F    ; don't colour it.}
 $9D57 CP $FF        ; {If the background item attribute is not to be set to
 $9D59 JR NZ,$9D5E   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9D5B LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetFlipHorzBackgroundItemToScreenColour
*$9D5E LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetFlipHorzBackgroundItemColour
*$9D5F INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9D60 DJNZ $9D52    ; Loop until the row of the background item has been
                     ; coloured.
 $9D62 POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9D63 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9D66 AND A         ; Clear carry flag!
 $9D67 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9D69 POP DE        ; Restore #REGde; initial address of the background item's
                     ; attribute data.
 $9D6A POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9D6B DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9D6C JR NZ,$9D4C   ; Loop until the background item has been coloured.
 $9D6E RET           ;

; Colour Rotated Right 90 Background Item
;
; Colours a background item that is rotated right by 90 degrees. The background
; item is coloured from its bottom-right colour attribute to its top-left
; colour attribute (bottom to top and right to left).
; .
; As the background item has been rotated right by 90 degrees:
; .
; #TABLE
; { The height (in character rows) of the background item is used to colour
; each column. }
; { The width (in character columns) of the background item is used to colour
; each row. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated right by 90 degrees.
; .
; #UDGTABLE
; { #UDG$9D6F(ShutNormalDoorRight90) }
; TABLE#
@label=ColourRight90BackgroundItem
c$9D6F POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9D70 CALL $99AF    ; Get the background item's attribute data.
 $9D73 LD A,B        ; #REGa=width (in character columns) of the background
                     ; item.
 $9D74 EXX           ; #REGb'=width (in character columns) of the background
                     ; item.
 $9D75 LD B,A        ; #REGb=width (in character columns) of the background
                     ; item.
 $9D76 EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9D77 CALL $9A9D    ; Add the width (in character columns) of the background
                     ; item to the background item's attribute data in #REGde.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGb' | The number of character columns of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourRight90BackgroundItemLoop
*$9D7A DEC DE        ; #REGde=previous address of the background item's
                     ; attribute data; we colour from right to left.
 $9D7B PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9D7C PUSH DE       ; Store #REGde; address of the background item's attribute
                     ; data.
 $9D7D PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourRight90BackgroundItemRowLoop
*$9D7E LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9D7F AND A         ; {If the background item attribute is black/black, then
 $9D80 JR Z,$9D8A    ; don't colour it.}
 $9D82 CP $FF        ; {If the background item attribute is not to be set to
 $9D84 JR NZ,$9D89   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9D86 LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetRight90BackgroundItemToScreenColour
*$9D89 LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetRight90BackgroundItemColour
*$9D8A CALL $9A9D    ; Add the width (in character columns) of the background
                     ; item to the background item's attribute data in #REGde.
 $9D8D INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9D8E DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9D8F JR NZ,$9D7E   ; Loop until the row of the background item has been
                     ; coloured.
 $9D91 POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9D92 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9D95 AND A         ; Clear carry flag!
 $9D96 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9D98 POP DE        ; Restore #REGde; initial address of the background item's
                     ; attribute data.
 $9D99 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9D9A EXX           ; #REGb=number of character columns of the background item
                     ; to colour. #REGb'=width (in character columns) of the
                     ; background item.
 $9D9B DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to colour.
 $9D9C EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9D9D JR NZ,$9D7A   ; Loop until the background item has been coloured.
 $9D9F RET           ;

; Colour Rotated Right 90 Flip Vertical Background Item
;
; Colours a background item that is rotated right by 90 degrees and flipped
; vertically. The background item is coloured from its bottom-left colour
; attribute to its top-right colour attribute (bottom to top and left to
; right).
; .
; As the background item has been rotated right by 90 degrees:
; .
; #TABLE
; { The height (in character rows) of the background item is used to colour
; each column. }
; { The width (in character columns) of the background item is used to colour
; each row. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated right by 90 degrees and
; flipped vertically.
; .
; #UDGTABLE
; { #UDG$9DA0(ShutNormalDoorRight90FlipVert) }
; TABLE#
@label=ColourRight90FlipVertBackgroundItem
c$9DA0 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9DA1 CALL $99AF    ; Get the background item's attribute data.
 $9DA4 LD A,B        ; #REGa=width (in character columns) of the background
                     ; item.
 $9DA5 EXX           ; #REGb'=width (in character columns) of the background
                     ; item.
 $9DA6 LD B,A        ; #REGb=width (in character columns) of the background
                     ; item.
 $9DA7 EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGb' | The number of character columns of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourRight90FlipVertBackgroundItemLoop
*$9DA8 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9DA9 PUSH DE       ; Store #REGde; address of the background item's attribute
                     ; data.
 $9DAA PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourRight90FlipVertBackgroundItemRowLoop
*$9DAB LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9DAC AND A         ; {If the background item attribute is black/black, then
 $9DAD JR Z,$9DB7    ; don't colour it.}
 $9DAF CP $FF        ; {If the background item attribute is not to be set to
 $9DB1 JR NZ,$9DB6   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9DB3 LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetRight90FlipVertBackgroundItemToScreenColour
*$9DB6 LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetRight90FlipVertBackgroundItemColour
*$9DB7 CALL $9A9D    ; Add the width (in character columns) of the background
                     ; item to the background item's attribute data in #REGde.
 $9DBA INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9DBB DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9DBC JR NZ,$9DAB   ; Loop until the row of the background item has been
                     ; coloured.
 $9DBE POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9DBF LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9DC2 AND A         ; Clear carry flag!
 $9DC3 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9DC5 POP DE        ; Restore #REGde; initial address of the background item's
                     ; attribute data.
 $9DC6 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9DC7 INC DE        ; #REGde=next address of the background item's attribute
                     ; data; we colour left to right.
 $9DC8 EXX           ; #REGb=number of character columns of the background item
                     ; to colour. #REGb'=width (in character columns) of the
                     ; background item.
 $9DC9 DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to colour.
 $9DCA EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9DCB JR NZ,$9DA8   ; Loop until the background item has been coloured.
 $9DCD RET           ;

; Colour Flip Vertical Background Item
;
; Colours a background item that is flipped vertically. The background item is
; coloured from its top-left colour attribute to its bottom-right colour
; attribute (left to right and top to bottom).
; .
; The example below is of a #R$CA82 drawn flipped vertically.
; .
; #UDGTABLE
; { #UDG$9DCE(ShutNormalDoorFlipVert) }
; TABLE#
@label=ColourFlipVertBackgroundItem
c$9DCE POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9DCF CALL $99AF    ; Get the background item's attribute data.
 $9DD2 CALL $9ABA    ; Get the last row of the background item's attribute
                     ; data; its top-left colour attribute.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourFlipVertBackgroundItemLoop
*$9DD5 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9DD6 PUSH DE       ; Store #REGde; address of the background item's attribute
                     ; data.
 $9DD7 PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourFlipVertBackgroundItemRowLoop
*$9DD8 LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9DD9 INC DE        ; #REGde=next address of the background item's attribute
                     ; data; we colour left to right.
 $9DDA AND A         ; {If the background item attribute is black/black, then
 $9DDB JR Z,$9DE5    ; don't colour it.}
 $9DDD CP $FF        ; {If the background item attribute is not to be set to
 $9DDF JR NZ,$9DE4   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9DE1 LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetFlipVertBackgroundItemToScreenColour
*$9DE4 LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetFlipVertBackgroundItemColour
*$9DE5 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9DE6 DJNZ $9DD8    ; Loop until the row of the background item has been
                     ; coloured.
 $9DE8 POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9DE9 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9DEC AND A         ; Clear carry flag!
 $9DED SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9DEF POP DE        ; Restore #REGde; initial address of the background item's
                     ; attribute data.
 $9DF0 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9DF1 CALL $9AA5    ; Subtract the width (in character columns) of the
                     ; background item from the background item's attribute
                     ; data in #REGde; we colour left to right.
 $9DF4 DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9DF5 JR NZ,$9DD5   ; Loop until the background item has been coloured.
 $9DF7 RET           ;

; Colour Rotated 180 Background Item
;
; Colours a background item that is rotated by 180 degrees. The background item
; is coloured from its top-right colour attribute to its bottom-left colour
; attribute (right to left and top to bottom).
; .
; The example below is of a #R$CA82 drawn rotated by 180 degrees.
; .
; #UDGTABLE
; { #UDG$9DF8(ShutNormalDoor180) }
; TABLE#
@label=Colour180BackgroundItem
c$9DF8 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9DF9 CALL $99AF    ; Get the background item's attribute data.
 $9DFC CALL $9ABA    ; Get the last row of the background item's attribute
                     ; data; its top-left colour attribute.
 $9DFF CALL $9A9D    ; Add the width (in character columns) of the background
                     ; item to the background item's attribute data in #REGde.
 $9E02 DEC DE        ; #REGde=address of the last byte of the background item's
                     ; attribute data; it's top-right colour attribute.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=Colour180BackgroundItemLoop
*$9E03 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9E04 PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=Colour180BackgroundItemRowLoop
*$9E05 LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9E06 DEC DE        ; #REGde=previous address of the background item's
                     ; attribute data; we colour from right to left.
 $9E07 AND A         ; {If the background item attribute is black/black, then
 $9E08 JR Z,$9E12    ; don't colour it.}
 $9E0A CP $FF        ; {If the background item attribute is not to be set to
 $9E0C JR NZ,$9E11   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9E0E LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSet180BackgroundItemToScreenColour
*$9E11 LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSet180BackgroundItemColour
*$9E12 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9E13 DJNZ $9E05    ; Loop until the row of the background item has been
                     ; coloured.
 $9E15 POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9E16 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9E19 AND A         ; Clear carry flag!
 $9E1A SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9E1C POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9E1D DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9E1E JR NZ,$9E03   ; Loop until the background item has been coloured.
 $9E20 RET           ;

; Colour Rotated Left 90 Flip Vertical Background Item
;
; Colours a background item that is rotated left by 90 degrees and flipped
; vertically. The background item is coloured from its top-right colour
; attribute to its bottom-left colour attribute (top to bottom and right to
; left).
; .
; As the background item has been rotated left by 90 degrees:
; .
; #TABLE
; { The height (in character rows) of the background item is used to colour
; each column. }
; { The width (in character columns) of the background item is used to colour
; each row. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated left by 90 degrees and
; flipped vertically.
; .
; #UDGTABLE
; { #UDG$C9E21(ShutNormalDoorLeft90FlipVert) }
; TABLE#
@label=ColourLeft90FlipVertBackgroundItem
c$9E21 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9E22 CALL $99AF    ; Get the background item's attribute data.
 $9E25 LD A,B        ; #REGa=width (in character columns) of the background
                     ; item.
 $9E26 EXX           ; #REGb'=width (in character columns) of the background
                     ; item.
 $9E27 LD B,A        ; #REGb=width (in character columns) of the background
                     ; item.
 $9E28 EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9E29 CALL $9ABA    ; Get the last row of the background item's attribute
                     ; data; its top-left colour attribute.
 $9E2C CALL $9A9D    ; Add the width (in character columns) of the background
                     ; item to the background item's attribute data in #REGde.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourLeft90FlipVertBackgroundItemLoop
*$9E2F DEC DE        ; #REGde=address of the last right-hand byte of the
                     ; background item's attribute data.
 $9E30 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9E31 PUSH DE       ; Store #REGde; address of the background item's attribute
                     ; data.
 $9E32 PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourLeft90FlipVertBackgroundItemRowLoop
*$9E33 LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9E34 AND A         ; {If the background item attribute is black/black, then
 $9E35 JR Z,$9E3F    ; don't colour it.}
 $9E37 CP $FF        ; {If the background item attribute is not to be set to
 $9E39 JR NZ,$9E3E   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9E3B LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetLeft90FlipVertBackgroundItemToScreenColour
*$9E3E LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetLeft90FlipVertBackgroundItemColour
*$9E3F CALL $9AA5    ; Subtract the width (in character columns) of the
                     ; background item from the background item's attribute
                     ; data in #REGde; we colour top to bottom.
 $9E42 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9E43 DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9E44 JR NZ,$9E33   ; Loop until the row of the background item has been
                     ; coloured.
 $9E46 POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9E47 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9E4A AND A         ; Clear carry flag!
 $9E4B SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9E4D POP DE        ; Restore #REGde; initial address of the background item's
                     ; attribute data.
 $9E4E POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9E4F EXX           ; #REGb=number of character columns of the background item
                     ; to colour. #REGb'=width (in character columns) of the
                     ; background item.
 $9E50 DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to colour.
 $9E51 EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9E52 JR NZ,$9E2F   ; Loop until the background item has been coloured.
 $9E54 RET           ;

; Colour Rotated Left 90 Background Item
;
; Colours a background item that is rotated left by 90 degrees. The background
; item is coloured from its top-left colour attribute to its bottom-right
; colour attribute (top to bottom and left to right).
; .
; As the background item has been rotated left by 90 degrees:
; .
; #TABLE
; { The height (in character rows) of the background item is used to colour
; each column. }
; { The width (in character columns) of the background item is used to colour
; each row. }
; TABLE#
; .
; The example below is of a #R$CA82 drawn rotated left by 90 degrees.
; .
; #UDGTABLE
; { #UDG$9E55(ShutNormalDoorLeft90) }
; TABLE#
@label=ColourLeft90BackgroundItem
c$9E55 POP BC        ; Restore #REGbc. #REGb=flags of the background item.
                     ; #REGc=graphic index of the background item in #R$A64E.
 $9E56 CALL $99AF    ; Get the background item's attribute data.
 $9E59 LD A,B        ; #REGa=width (in character columns) of the background
                     ; item.
 $9E5A EXX           ; #REGb'=width (in character columns) of the background
                     ; item.
 $9E5B LD B,A        ; #REGb=width (in character columns) of the background
                     ; item.
 $9E5C EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9E5D CALL $9ABA    ; Get the last row of the background item's attribute
                     ; data; its top-left colour attribute.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the background item to
; colour. }
; { I | #REGb' | The number of character columns of the background item to
; colour. }
; { I | #REGc  | The height (in character rows) of the background item to
; colour. }
; { I | #REGde | Address of the background item's attribute data. }
; { I | #REGhl | Screen attribute address to colour the background item at. }
; TABLE#
@label=ColourLeft90BackgroundItemLoop
*$9E60 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; background item to colour. #REGc=height (in character
                     ; rows) of the background item to colour.
 $9E61 PUSH DE       ; Store #REGde; address of the background item's attribute
                     ; data.
 $9E62 PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; background item at.
@label=ColourLeft90BackgroundItemRowLoop
*$9E63 LD A,(DE)     ; #REGa=colour attribute of the background item.
 $9E64 AND A         ; {If the background item attribute is black/black, then
 $9E65 JR Z,$9E6F    ; don't colour it.}
 $9E67 CP $FF        ; {If the background item attribute is not to be set to
 $9E69 JR NZ,$9E6E   ; the current colour attribute (i.e the colour of the
                     ; screen), then skip.}
 $9E6B LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
@label=SkipSetLeft90BackgroundItemToScreenColour
*$9E6E LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set the colour
                     ; attribute of the background item.
@label=SkipSetLeft90BackgroundItemColour
*$9E6F CALL $9AA5    ; Subtract the width (in character columns) of the
                     ; background item from the background item's attribute
                     ; data in #REGde; we colour top to bottom.
 $9E72 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the background item.
 $9E73 DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; background item to colour.
 $9E74 JR NZ,$9E63   ; Loop until the row of the background item has been
                     ; coloured.
 $9E76 POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; background item at.
 $9E77 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $9E7A AND A         ; Clear carry flag!
 $9E7B SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $9E7D POP DE        ; Restore #REGde; initial address of the background item's
                     ; attribute data.
 $9E7E POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the background item to colour. #REGc=height (in
                     ; character rows) of the background item to colour.
 $9E7F INC DE        ; #REGde=next address of the background item's attribute
                     ; data; we colour left to right.
 $9E80 EXX           ; #REGb=number of character columns of the background item
                     ; to colour. #REGb'=width (in character columns) of the
                     ; background item.
 $9E81 DEC B         ; Decrement #REGb; number of character columns of the
                     ; background item to colour.
 $9E82 EXX           ; #REGb=width (in character columns) of the background
                     ; item. #REGb'=number of character columns of the
                     ; background item to colour.
 $9E83 JR NZ,$9E60   ; Loop until the background item has been coloured.
 $9E85 RET           ;

; Get Current Sprite Previous Graphic Address
;
; Gets the address of the current sprite's previous graphic using the graphic
; index in #R$5E15.
; .
; Used by the routine at #R$9F80.
; .
; #TABLE(default)
; { I | #R$5E15 | The previous graphic index in #R$A4BE of the sprite. }
; TABLE#
@label=GetCurrentSpritePreviousGraphicAddress
c$9E86 LD A,($5E15)  ; #REGa=contents of #R$5E15; the graphic index in #R$A4BE
                     ; of the current sprite's previous graphic.
; Gets the address of a sprite's graphic.
; .
; This entry point is used by the routines at #R$8CB7, #R$8D45, #R$8E26 and
; #R$9E96.
; .
; #TABLE(default)
; { I | #REGa  | Graphic index of the sprite (starting from $01) in #R$A4BE. }
; { O | #REGde | Address of the sprite's graphic. }
; TABLE#
@label=GetSpriteGraphicAddress
*$9E89 DEC A         ; {#REGl=index in #R$A4BE of the sprite's graphic.
 $9E8A LD L,A        ; }
 $9E8B LD H,$00      ; {#REGhl=offset in #R$A4BE of the sprite's graphic
 $9E8D ADD HL,HL     ; }
 $9E8E LD BC,$A4BE   ; {#REGhl=address in #R$A4BE of the sprite's graphic.
 $9E91 ADD HL,BC     ; }
 $9E92 LD E,(HL)     ; {#REGde=address of the sprite's graphic.
 $9E93 INC HL        ;
 $9E94 LD D,(HL)     ; }
 $9E95 RET           ;

; Get Current Sprite Graphic Address
;
; Gets the address of the current sprite's current graphic using the sprite
; data in #REGix.
; .
; Used by the routine at #R$9F9F.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; { O | #REGde | Address of the sprite's graphic. }
; TABLE#
@label=GetCurrentSpriteGraphicAddress
c$9E96 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $9E99 JR $9E89      ; Get the address of the current sprite's graphic.

; Draw Sprite
;
; Draws a sprite. A sprite is drawn from bottom to top!
; .
; Used by the routines at #R$9F4A, #R$9F56 and #R$9FCA.
; .
; #TABLE(default)
; { I | #REGc   | The number of lines of the sprite mask to draw. }
; { I | #REGc'  | The number of lines of the sprite to draw. }
; { I | #REGde  | Address of the sprite mask glyph data. }
; { I | #REGde' | Address of the sprite glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite mask at. }
; { I | #REGhl' | Screen pixel address to draw the sprite at. }
; TABLE#
@label=DrawSprite
c$9E9B LD A,C        ; #REGa=number of lines of the sprite mask to draw.
 $9E9C AND A         ; {Jump if there is no line of the sprite mask to draw.
 $9E9D JR Z,$9EAF    ; }
 $9E9F DEC C         ; Decrement #REGc; there is one less line of the sprite
                     ; mask to draw.
 $9EA0 CALL $9EDC    ; Draw the sprite mask glyph line.
 $9EA3 EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite data in the #REGbc, #REGde and #REGhl main
                     ; registers. The sprite mask data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9EA4 LD A,C        ; #REGa=number of lines of the sprite to draw.
 $9EA5 AND A         ; {Jump if there is no line of the sprite to draw.
 $9EA6 JR Z,$9EAC    ; }
; #TABLE(default)
; { I | #REGc   | The number of lines of the sprite to draw. }
; { I | #REGc'  | The number of lines of the sprite mask to draw. }
; { I | #REGde  | Address of the sprite glyph data. }
; { I | #REGde' | Address of the sprite mask glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite at. }
; { I | #REGhl' | Screen pixel address to draw the sprite mask at. }
; TABLE#
@label=DrawSpriteLineLoop
*$9EA8 DEC C         ; Decrement #REGc; there is one less line of the sprite to
                     ; draw.
 $9EA9 CALL $9F21    ; Draw the sprite glyph line.
; #TABLE(default)
; { I | #REGc   | The number of lines of the sprite to draw. }
; { I | #REGc'  | The number of lines of the sprite mask to draw. }
; { I | #REGde  | Address of the sprite glyph data. }
; { I | #REGde' | Address of the sprite mask glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite at. }
; { I | #REGhl' | Screen pixel address to draw the sprite mask at. }
; TABLE#
@label=NoSpriteLineToDraw
*$9EAC EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite mask data in the #REGbc, #REGde and #REGhl
                     ; main registers. The sprite data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9EAD JR $9E9B      ; Draw the remaining lines of the sprite mask and/or the
                     ; sprite.
; #TABLE(default)
; { I | #REGc   | The number of lines of the sprite mask to draw. }
; { I | #REGc'  | The number of lines of the sprite to draw. }
; { I | #REGde  | Address of the sprite mask glyph data. }
; { I | #REGde' | Address of the sprite glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite mask at. }
; { I | #REGhl' | Screen pixel address to draw the sprite at. }
; TABLE#
@label=NoSpriteMaskLineToDraw
*$9EAF EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite data in the #REGbc, #REGde and #REGhl main
                     ; registers. The sprite mask data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9EB0 LD A,C        ; #REGa=number of lines of the sprite to draw.
 $9EB1 AND A         ; {Jump if there is at least one line of the sprite to
 $9EB2 JR NZ,$9EA8   ; draw.}
; This entry point is used by the routine at #R$9FCA.
; .
; #TABLE(default)
; { I | #REGc   | The number of lines of the sprite to draw. }
; { I | #REGc'  | The number of lines of the sprite mask to draw. }
; { I | #REGde  | Address of the sprite glyph data. }
; { I | #REGde' | Address of the sprite mask glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite at. }
; { I | #REGhl' | Screen pixel address to draw the sprite mask at. }
; TABLE#
@label=DrawSprite1
*$9EB4 EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite mask data in the #REGbc, #REGde and #REGhl
                     ; main registers. The sprite data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
; This entry point is used by the routine at #R$9FCA.
; .
; #TABLE(default)
; { I | #REGc   | The number of lines of the sprite mask to draw. }
; { I | #REGc'  | The number of lines of the sprite to draw. }
; { I | #REGde  | Address of the sprite mask glyph data. }
; { I | #REGde' | Address of the sprite glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite mask at. }
; { I | #REGhl' | Screen pixel address to draw the sprite at. }
; TABLE#
; .
; #TABLE(default)
; { I | #R$5E18 | The number of lines of the sprite mask to draw. }
; { I | #R$5E19 | The number of lines of the sprite to draw. }
; { O | #R$5E18 | Set to $00; no remaining lines of the sprite mask to draw. }
; TABLE#
@label=DrawSprite2
*$9EB5 LD A,($5E18)  ; {#REGc=contents of #R$5E18; number of lines of the
 $9EB8 LD C,A        ; sprite mask to draw.}
 $9EB9 LD A,($5E19)  ; #REGa=contents of #R$5E19; number of lines of the sprite
                     ; to draw.
 $9EBC OR C          ; {If all the sprite mask and sprite lines have been
 $9EBD RET Z         ; drawn, then we're done.}
 $9EBE XOR A         ; {Clear #R$5E18; there will be no remaining lines of the
 $9EBF LD ($5E18),A  ; sprite mask to draw.}
 $9EC2 EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite data in the #REGbc, #REGde and #REGhl main
                     ; registers. The sprite mask data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9EC3 LD A,($5E19)  ; {#REGc=contents of #R$5E19; number of lines of the
 $9EC6 LD C,A        ; sprite to draw.}
 $9EC7 XOR A         ; Clear #REGa; there will be no remaining lines of the
                     ; sprite to draw.
; This entry point is used by the routine at #R$9FCA.
; .
; #TABLE(default)
; { I | #REGa   | The number of remaining lines of the sprite to draw. }
; { I | #REGc   | The number of lines of the sprite to draw. }
; { I | #REGc'  | The number of lines of the sprite mask to draw. }
; { I | #REGde  | Address of the sprite glyph data. }
; { I | #REGde' | Address of the sprite mask glyph data. }
; { I | #REGhl  | Screen pixel address to draw the sprite at. }
; { I | #REGhl' | Screen pixel address to draw the sprite mask at. }
; TABLE#
; .
; #TABLE(default)
; { O | #R$5E19 | Set to the number of remaining lines of the sprite to draw. }
; TABLE#
@label=DrawSprite3
*$9EC8 LD ($5E19),A  ; Set #R$5E19 to #REGa; number of remaining lines of the
                     ; sprite to draw.
 $9ECB EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite mask data in the #REGbc, #REGde and #REGhl
                     ; main registers. The sprite data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9ECC JR $9E9B      ; Draw the sprite.

; Draw Stationary Sprite Mask Glyph Line
;
; Draws a stationary single sprite mask glyph line. 1 or more bytes are used to
; represent the 1x8 pixels of the sprite mask glyph line. It is expected that
; the sprite is 2 bytes wide, and 2 bytes represent the 1x8 pixels of the
; single sprite mask glyph line to draw.
; .
; Used by the routine at #R$9EDC.
; .
; #TABLE(default)
; { I | #REGde  | Address of the sprite mask's next glyph line. }
; { I | #REGhl  | The 2 bytes of the sprite mask glyph line to draw. }
; { O | #REGde  | Screen pixel address the sprite mask glyph line was drawn at.
; }
; { O | #REGhl  | Screen pixel address to draw the sprite mask's next glyph
; line at. }
; TABLE#
@label=DrawStationarySpriteMaskGlyphLine
c$9ECE EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=the 2 bytes of the
                     ; sprite mask glyph line to draw. #REGhl=address of the
                     ; sprite mask's next glyph line.
 $9ECF EX (SP),HL    ; Exchange contents of #REGsp and #REGhl. (#REGsp)=address
                     ; of the sprite mask's next glyph line. #REGhl=screen
                     ; pixel address to draw the sprite mask glyph line at.
 $9ED0 LD A,D        ; #REGa=1st byte representing the 1x8 pixels of the sprite
                     ; mask glyph line to draw.
 $9ED1 XOR (HL)      ; {Draw the 1st byte of the sprite mask glyph line by
 $9ED2 LD (HL),A     ; XORing all its bits with the current byte at the screen
                     ; pixel address to draw the sprite mask glyph line at.}
 $9ED3 INC L         ; #REGhl=next screen pixel address to draw the sprite mask
                     ; glyph line at.
 $9ED4 LD A,E        ; #REGa=2nd byte representing the 1x8 pixels of the sprite
                     ; mask glyph line to draw.
 $9ED5 XOR (HL)      ; {Draw the 2nd byte of the sprite mask glyph line by
 $9ED6 LD (HL),A     ; XORing all its bits with the current byte at the screen
                     ; pixel address to draw the sprite mask glyph line at.}
 $9ED7 POP DE        ; Restore #REGde; screen pixel address the sprite mask
                     ; glyph line was drawn at.
 $9ED8 DEC L         ; #REGhl=original screen pixel address to draw the sprite
                     ; mask glyph line at.
 $9ED9 JP $9F03      ; A sprite is drawn from bottom to top, so calculate the
                     ; previous line, i.e. the line to draw the sprite mask's
                     ; next glyph line at.

; Draw Sprite Mask Glyph Line
;
; Draws a single sprite mask glyph line. 1 or more bytes are used to represent
; the 1x8 pixels of the sprite mask glyph line. It is expected that the sprite
; is 2 bytes wide, and 2 bytes represent the 1x8 pixels of the single sprite
; mask glyph line to draw.
; .
; Note that, depending on the X coordinate of the sprite, the relative jump at
; #R$9EE4 is modified in #R$9F83, as follows:
; .
; #TABLE
; { =h X  | =h Jump }
; { $00   | #R$9ECE }
; { $01   | #R$9EE6 }
; { $02   | #R$9EE8 }
; { $03   | #R$9EEA }
; { $04   | #R$9EEC }
; { $05   | #R$9EEE }
; { $06   | #R$9EF0 }
; { $07   | #R$9EF2 }
; { $08   | #R$9ECE }
; { $09   | #R$9EE6 }
; { $0A   | #R$9EE8 }
; { $0B   | #R$9EEA }
; { $0C   | #R$9EEC }
; { $0D   | #R$9EEE }
; { $0E   | #R$9EF0 }
; { $0F   | #R$9EF2 }
; TABLE#
; .
; Used by the routine at #R$9E9B.
; .
; #TABLE(default)
; { I | #REGde  | Address of the sprite mask glyph line to draw. }
; { I | #REGhl  | Screen pixel address to draw the sprite mask glyph line at. }
; TABLE#
@label=DrawSpriteMaskGlyphLine
c$9EDC EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=screen pixel address
                     ; to draw the sprite mask glyph line at. #REGhl=address of
                     ; the sprite mask glyph line to draw.
 $9EDD PUSH DE       ; Store #REGde; screen pixel address to draw the sprite
                     ; mask glyph line at.
 $9EDE LD D,(HL)     ; #REGd=1st byte of the sprite mask glyph line to draw.
 $9EDF INC HL        ; #REGhl=next address of the sprite mask glyph line to
                     ; draw.
 $9EE0 LD E,(HL)     ; #REGe=2nd byte of the sprite mask glyph line to draw.
 $9EE1 INC HL        ; #REGhl=address of the sprite mask's next glyph line.
 $9EE2 EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=address + 2 bytes of
                     ; the sprite mask's next glyph line. #REGhl=2 bytes of the
                     ; sprite mask glyph line to draw.
 $9EE3 XOR A         ; Clear #REGa.
@label=DrawSpriteMaskGlyphLineJump
*$9EE4 JR $9EE4      ; Self modifing code.

; Shift Left And Draw Sprite Mask Glyph Line
;
; Shifts left and draws a single sprite mask glyph line. 1 or more bytes are
; used to represent the 1x8 pixels of the sprite mask glyph line. It is
; expected that the sprite is 2 bytes wide, and (as the sprite mask is shifted
; left) 3 bytes represent the 1x8 pixels of the single sprite mask glyph line
; to draw.
; .
; Used by the routine at #R$9EDC.
; .
; #TABLE(default)
; { I | #REGde  | Address of the sprite mask's next glyph line. }
; { I | #REGhl  | The 2 bytes of the sprite mask glyph line to draw. }
; { O | #REGde  | Screen pixel address the sprite mask glyph line was drawn at.
; }
; { O | #REGhl  | Screen pixel address the sprite mask glyph line was drawn at.
; }
; TABLE#
@label=ShiftLeftAndDrawSpriteMaskGlyphLine
c$9EE6 ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EE7 ADC A,A       ; overflow into #REGa.}
@label=ShiftLeftAndDrawSpriteMaskGlyphLine6
 $9EE8 ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EE9 ADC A,A       ; overflow into #REGa.}
@label=ShiftLeftAndDrawSpriteMaskGlyphLine5
 $9EEA ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EEB ADC A,A       ; overflow into #REGa.}
@label=ShiftLeftAndDrawSpriteMaskGlyphLine4
 $9EEC ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EED ADC A,A       ; overflow into #REGa.}
@label=ShiftLeftAndDrawSpriteMaskGlyphLine3
 $9EEE ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EEF ADC A,A       ; overflow into #REGa.}
@label=ShiftLeftAndDrawSpriteMaskGlyphLine2
 $9EF0 ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EF1 ADC A,A       ; overflow into #REGa.}
@label=ShiftLeftAndDrawSpriteMaskGlyphLine1
 $9EF2 ADD HL,HL     ; {Shift the sprite mask glyph line left, adding any
 $9EF3 ADC A,A       ; overflow into #REGa.}
; The sprite mask glyph line is in #REGa#REGh#REGl.
 $9EF4 EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=2nd and 3rd bytes of
                     ; the sprite mask glyph line to draw. #REGhl=address of
                     ; the sprite mask's next glyph line.
 $9EF5 EX (SP),HL    ; Exchange contents of #REGsp and #REGhl. (#REGsp)=address
                     ; of the sprite mask's next glyph line. #REGhl=screen
                     ; pixel address to draw the sprite mask glyph line at.
 $9EF6 XOR (HL)      ; {Draw the 1st byte of the sprite mask glyph line in
 $9EF7 LD (HL),A     ; #REGa by XORing all its bits with the current byte at
                     ; the screen pixel address to draw the sprite mask glyph
                     ; line at.}
 $9EF8 INC L         ; #REGhl=next screen pixel address to draw the sprite mask
                     ; glyph line at.
; The sprite (or sprite mask) glyph line is in #REGd#REGe.
; .
; This entry point is used by the routine at #R$9F2B.
; .
; #TABLE(default)
; { I | #REGde  | 2 bytes of the sprite (or sprite mask) glyph line to draw. }
; { I | #REGhl  | Screen pixel address to draw the sprite (or sprite mask)
; glyph line at. }
; { O | #REGde  | Screen pixel address the sprite (or sprite mask) glyph line
; was drawn at. }
; { O | #REGhl  | Screen pixel address the sprite (or sprite mask) glyph line
; was drawn at. }
; TABLE#
@label=DrawSpriteGlyphLineInDE
*$9EF9 LD A,D        ; #REGa=1st byte of the sprite (or sprite mask) glyph line
                     ; to draw.
 $9EFA XOR (HL)      ; {Draw the 1st byte of the sprite (or sprite mask) glyph
 $9EFB LD (HL),A     ; line in #REGa by XORing all its bits with the current
                     ; byte at the screen pixel address to draw the sprite (or
                     ; sprite mask) glyph line at.}
 $9EFC INC L         ; #REGhl=next screen pixel address to draw the sprite (or
                     ; sprite mask) glyph line at.
 $9EFD LD A,E        ; #REGa=2nd byte of the sprite (or sprite mask) glyph line
                     ; to draw.
 $9EFE XOR (HL)      ; {Draw the 2nd byte of the sprite (or sprite mask) glyph
 $9EFF LD (HL),A     ; line in #REGa by XORing all its bits with the current
                     ; byte at the screen pixel address to draw the sprite (or
                     ; sprite mask) glyph line at.}
 $9F00 POP DE        ; Restore #REGde; screen pixel address the sprite (or
                     ; sprite mask) glyph line was drawn at.
 $9F01 DEC L         ; {#REGhl=original screen pixel address to draw the sprite
 $9F02 DEC L         ; (or sprite mask) glyph line at.}

; Calculate Previous Line
;
; Calculates the screen pixel address of the previous line of the specified
; screen pixel address.
; .
; This entry point is used by the routines at #R$99C9, #R$9A0A, #R$9A50,
; #R$9ACB, #R$9AEF, #R$9B5D, #R$9ECE, #R$9F13 and #R$A185.
; .
; #TABLE(default)
; { =h High Byte | =h Low Byte }
; { 0 1 0 T T L L L | Cr Cr Cr Cc Cc Cc Cc Cc }
; TABLE#
; .
; Top three bits (010) of the high byte don't change.
; .
; T - These two bits refer to which third of the screen is being addressed:
; 00=top, 01=middle, 10=bottom.
; .
; L - These three bits indicate which line is being addressed: from 0-7.
; .
; Cr - These three bits indicate which character row is being addressed: from
; 0-7.
; .
; Cc - These five bits refer to which character column is being addressed: from
; 0-31.
; .
; #TABLE(default)
; { I | #REGhl | Screen pixel address. }
; { O | #REGhl | Calculated screen pixel address of the previous line. }
; TABLE#
@label=CalculatePreviousLine
c$9F03 DEC H         ; Decrement #REGh to calculate the screen pixel address of
                     ; previous line.
 $9F04 LD A,H        ; {If the calculated screen pixel address does not
 $9F05 CPL           ; represent line 7 (i.e. the previous line is still in the
 $9F06 AND $07       ; same character row), then we're done.
 $9F08 RET NZ        ; }
 $9F09 LD A,L        ; {#REGhl=calculated screen pixel address of the previous
 $9F0A SUB $20       ; line in the previous character row.
 $9F0C LD L,A        ; }
 $9F0D RET C         ; If the calculated screen pixel address represents a line
                     ; in the previous third of the screen, then we're done.
 $9F0E LD A,H        ; {#REGhl=calculated screen pixel address of the previous
 $9F0F ADD A,$08     ; line in the previous character row (in the same third of
 $9F11 LD H,A        ; screen).}
 $9F12 RET           ;

; Draw Stationary Sprite Glyph Line
;
; Draws a stationary single sprite glyph line. 1 or more bytes are used to
; represent the 1x8 pixels of the sprite glyph line. It is expected that the
; sprite is 2 bytes wide, and 2 bytes represent the 1x8 pixels of the single
; sprite glyph line to draw.
; .
; Used by the routine at #R$9F21.
; .
; #TABLE(default)
; { I | #REGde  | Address of the sprite's next glyph line. }
; { I | #REGhl  | The 2 bytes of the sprite glyph line to draw. }
; { O | #REGde  | Screen pixel address the sprite glyph line was drawn at. }
; { O | #REGhl  | Screen pixel address to draw the sprite's next glyph line at.
; }
; TABLE#
@label=DrawStationarySpriteGlyphLine
c$9F13 EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=the 2 bytes of the
                     ; sprite glyph line to draw. #REGhl=address of the
                     ; sprite's next glyph line.
 $9F14 EX (SP),HL    ; Exchange contents of #REGsp and #REGhl. (#REGsp)=address
                     ; of the sprite's next glyph line. #REGhl=screen pixel
                     ; address to draw the sprite glyph line at.
 $9F15 LD A,D        ; #REGa=1st byte representing the 1x8 pixels of the sprite
                     ; glyph line to draw.
 $9F16 XOR (HL)      ; {Draw the 1st byte of the sprite glyph line by XORing
 $9F17 LD (HL),A     ; all its bits with the current byte at the screen pixel
                     ; address to draw the sprite glyph line at.}
 $9F18 INC L         ; #REGhl=next screen pixel address to draw the sprite
                     ; glyph line at.
 $9F19 LD A,E        ; #REGa=2nd byte representing the 1x8 pixels of the sprite
                     ; glyph line to draw.
 $9F1A XOR (HL)      ; {Draw the 2nd byte of the sprite glyph line by XORing
 $9F1B LD (HL),A     ; all its bits with the current byte at the screen pixel
                     ; address to draw the sprite glyph line at.}
 $9F1C POP DE        ; Restore #REGde; screen pixel address the sprite glyph
                     ; line was drawn at.
 $9F1D DEC L         ; #REGhl=original screen pixel address to draw the sprite
                     ; glyph line at.
 $9F1E JP $9F03      ; A sprite is drawn from bottom to top, so calculate the
                     ; previous line, i.e. the line to draw the sprite's next
                     ; glyph line at.

; Draw Sprite Glyph Line
;
; Draws a single sprite glyph line. 1 or more bytes are used to represent the
; 1x8 pixels of the sprite glyph line. It is expected that the sprite is 2
; bytes wide, and 2 bytes represent the 1x8 pixels of the single sprite glyph
; line to draw.
; .
; Note that, depending on the X coordinate of the sprite, the relative jump at
; #R$9F29 is modified in #R$9FA2, as follows:
; .
; #TABLE
; { =h X  | =h Jump }
; { $00   | #R$9F13 }
; { $01   | #R$9F2B }
; { $02   | #R$9F2D }
; { $03   | #R$9F2F }
; { $04   | #R$9F31 }
; { $05   | #R$9F33 }
; { $06   | #R$9F35 }
; { $07   | #R$9F37 }
; { $08   | #R$9F13 }
; { $09   | #R$9F2B }
; { $0A   | #R$9F2D }
; { $0B   | #R$9F2F }
; { $0C   | #R$9F31 }
; { $0D   | #R$9F33 }
; { $0E   | #R$9F35 }
; { $0F   | #R$9F37 }
; TABLE#
; .
; Used by the routine at #R$9E9B.
; .
; #TABLE(default)
; { I | #REGde  | Address of the sprite glyph line to draw. }
; { I | #REGhl  | Screen pixel address to draw the sprite glyph line at. }
; { O | #REGde  | Address + 2 bytes of the sprite's next glyph line. }
; TABLE#
@label=DrawSpriteGlyphLine
c$9F21 EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=screen pixel address
                     ; to draw the sprite glyph line at. #REGhl=address of the
                     ; sprite glyph line to draw.
 $9F22 PUSH DE       ; Store #REGde; screen pixel address to draw the sprite
                     ; glyph line at.
 $9F23 LD D,(HL)     ; #REGd=1st byte of the sprite glyph line to draw.
 $9F24 INC HL        ; #REGhl=next address of the sprite glyph line to draw.
 $9F25 LD E,(HL)     ; #REGe=2nd byte of the sprite glyph line to draw.
 $9F26 INC HL        ; #REGhl=address of the sprite's next glyph line.
 $9F27 EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=address + 2 bytes of
                     ; the sprite's next glyph line. #REGhl=2 bytes of the
                     ; sprite glyph line to draw.
 $9F28 XOR A         ; Clear #REGa.
@label=DrawSpriteGlyphLineJump
*$9F29 JR $9F29      ; Self modifing code.

; Shift Left And Draw Sprite Glyph Line
;
; Shifts left and draws a single sprite glyph line. 1 or more bytes are used to
; represent the 1x8 pixels of the sprite glyph line. It is expected that the
; sprite is 2 bytes wide, and (as the sprite is shifted left) 3 bytes represent
; the 1x8 pixels of the single sprite glyph line to draw.
; .
; Used by the routine at #R$9F21.
; .
; #TABLE(default)
; { I | #REGde  | Address of the sprite's next glyph line. }
; { I | #REGhl  | The 2 bytes of the sprite glyph line to draw. }
; { O | #REGde  | Screen pixel address the sprite glyph line was drawn at. }
; { O | #REGhl  | Screen pixel address to draw the sprite's next glyph line at.
; }
; TABLE#
@label=ShiftLeftAndDrawSpriteGlyphLine
c$9F2B ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F2C ADC A,A       ; into #REGa.}
@label=ShiftLeftAndDrawSpriteGlyphLine6
 $9F2D ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F2E ADC A,A       ; into #REGa.}
@label=ShiftLeftAndDrawSpriteGlyphLine5
 $9F2F ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F30 ADC A,A       ; into #REGa.}
@label=ShiftLeftAndDrawSpriteGlyphLine4
 $9F31 ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F32 ADC A,A       ; into #REGa.}
@label=ShiftLeftAndDrawSpriteGlyphLine3
 $9F33 ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F34 ADC A,A       ; into #REGa.}
@label=ShiftLeftAndDrawSpriteGlyphLine2
 $9F35 ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F36 ADC A,A       ; into #REGa.}
@label=ShiftLeftAndDrawSpriteGlyphLine1
 $9F37 ADD HL,HL     ; {Shift the sprite glyph line left, adding any overflow
 $9F38 ADC A,A       ; into #REGa.}
; The sprite glyph line is in #REGa#REGh#REGl.
 $9F39 EX DE,HL      ; Exchange #REGde and #REGhl. #REGde=2nd and 3rd bytes of
                     ; the sprite glyph line to draw. #REGhl=address of the
                     ; sprite's next glyph line.
 $9F3A EX (SP),HL    ; Exchange contents of #REGsp and #REGhl. (#REGsp)=address
                     ; of the sprite's next glyph line. #REGhl=screen pixel
                     ; address to draw the sprite glyph line at.
 $9F3B XOR (HL)      ; {Draw the 1st byte of the sprite glyph line in #REGa by
 $9F3C LD (HL),A     ; XORing all its bits with the current byte at the screen
                     ; pixel address to draw the sprite glyph line at.}
 $9F3D INC L         ; #REGhl=next screen pixel address to draw the sprite
                     ; glyph line at.
 $9F3E JR $9EF9      ; Draw the 2nd and 3rd bytes of the sprite glyph line in
                     ; #REGde.
 $9F40 CALL $9FA2    ; Initialise the sprite's drawing data.
 $9F43 JR $9F4D      ; Display the sprite (without mask).
 $9F45 CALL $9F83    ; Initialise the sprite mask's drawing data.
 $9F48 JR $9F59      ; Display the sprite (with mask).

; Display Sprite Without Mask
;
; Displays the current sprite without a mask.
; .
; Used by the routines at #R$814B, #R$83EA, #R$871A, #R$8862, #R$8AFF, #R$8CB7,
; #R$9291, #R$9358, #R$9443, #R$95A9, #R$A14D, #R$A2DC and #R$A311.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
@label=DisplayCurrentSpriteWithoutMask
c$9F4A CALL $9F9F    ; Initialise the current sprite's drawing data.
; Displays a sprite without a mask.
; .
; This entry point is used by the routine at #R$9F2B.
; .
; #TABLE(default)
; { I | #REGc  | The number of lines of the sprite to draw ($00). }
; { I | #REGde | Address of the sprite glyph data. }
; { I | #REGhl | Screen pixel address to draw the sprite at. }
; TABLE#
; .
; #TABLE(default)
; { O | #R$5E18 | Set to $00; no lines of the sprite mask to draw. }
; TABLE#
@label=DisplaySpriteWithoutMask
*$9F4D EXX           ; Set the sprite drawing data in the #REGbc', #REGde' and
                     ; #REGhl' shadow registers.
 $9F4E XOR A         ; {Clear the number of lines of the sprite mask to draw in
 $9F4F LD ($5E18),A  ; #R$5E18.}
 $9F52 LD C,A        ; #REGc=$00; number of lines of the sprite mask to draw,
                     ; i.e. do not draw the sprite mask.
 $9F53 JP $9E9B      ; Draw the sprite.

; Display Sprite With Mask
;
; Displays the current sprite with a mask.
; .
; Used by the routines at #R$81F0, #R$871A, #R$8C63 and #R$9326.
; .
; #TABLE(default)
; { I | #R$5E15 | The previous graphic index in #R$A4BE of the sprite. }
; TABLE#
@label=DisplayCurrentSpriteWithMask
c$9F56 CALL $9F80    ; Initialise the current sprite's mask drawing data.
; Displays a sprite with a mask.
; .
; This entry point is used by the routine at #R$9F2B.
; .
; #TABLE(default)
; { I | #REGc  | The number of lines of the sprite mask to draw ($00). }
; { I | #REGde | Address of the sprite mask glyph data. }
; { I | #REGhl | Screen pixel address to draw the sprite mask at. }
; TABLE#
; .
; #TABLE(default)
; { I | #R$5E15 | The previous graphic index in #R$A4BE of the sprite. }
; { O | #R$5E10 | The width (in bytes) of the sprite ($02 if the X coordinate
; of the sprite is divisible by 8, $03 otherwise). }
; { O | #R$5E11 | The height (in pixels) of the sprite. }
; { O | #R$5E18 | The height (in pixels) of the sprite. }
; { O | #R$5E19 | Set to $00; no lines of the sprite to draw. }
; TABLE#
@label=DisplaySpriteWithMask
*$9F59 EXX           ; Set the sprite mask drawing data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9F5A XOR A         ; Clear #REGa.
 $9F5B LD C,A        ; #REGc=$00; number of lines of the sprite to draw, i.e.
                     ; do not draw the sprite.
 $9F5C LD ($5E19),A  ; Clear the number of lines of the sprite to draw in
                     ; #R$5E19.
 $9F5F LD A,($5E18)  ; #REGa=contents of #R$5E18; the number of sprite mask
                     ; lines to draw.
 $9F62 LD ($5E11),A  ; Set #R$5E11 to #REGa; set the sprite height (in pixels)
                     ; to the number of sprite mask lines to draw in #REGa.
 $9F65 LD A,L        ;
 $9F66 AND $07       ;
 $9F68 LD A,$02      ;
 $9F6A JR Z,$9F6D    ;
 $9F6C INC A         ;
*$9F6D LD ($5E10),A  ; Set #R$5E10 to #REGa.
 $9F70 EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite mask data in the #REGbc, #REGde and #REGhl
                     ; main registers. The sprite data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9F71 JP $9E9B      ; Draw the sprite.
 $9F74 PUSH DE       ;
 $9F75 CALL $9F83    ; Initialise the sprite's mask drawing data.
 $9F78 EXX           ;
 $9F79 POP DE        ;
 $9F7A CALL $9FA2    ; Initialise the sprite's drawing data.
 $9F7D EXX           ; Swap the registers of the sprite and sprite mask. Set
                     ; the sprite data in the #REGbc, #REGde and #REGhl main
                     ; registers. The sprite mask data in the #REGbc', #REGde'
                     ; and #REGhl' shadow registers.
 $9F7E JR $9FD1      ;

; Initialise Sprite Mask Drawing Data
;
; Initialises the current sprite's mask drawing data.  It is expected that the
; sprite's graphic is 2 bytes wide.
; .
; Note that, depending on the X coordinate of the sprite, the relative jump at
; #R$9EE4, is set as follows:
; .
; #TABLE
; { =h X  | =h Jump }
; { $00   | #R$9ECE }
; { $01   | #R$9EE6 }
; { $02   | #R$9EE8 }
; { $03   | #R$9EEA }
; { $04   | #R$9EEC }
; { $05   | #R$9EEE }
; { $06   | #R$9EF0 }
; { $07   | #R$9EF2 }
; { $08   | #R$9ECE }
; { $09   | #R$9EE6 }
; { $0A   | #R$9EE8 }
; { $0B   | #R$9EEA }
; { $0C   | #R$9EEC }
; { $0D   | #R$9EEE }
; { $0E   | #R$9EF0 }
; { $0F   | #R$9EF2 }
; TABLE#
; .
; Used by the routines at #R$9F56 and #R$9FCA.
; .
; #TABLE(default)
; { O | #REGa  | The height (in pixels) of the sprite mask. }
; { O | #REGc  | The number of lines of the sprite  mask to draw ($00). }
; { O | #REGde | Address of the sprite mask glyph data. }
; { O | #REGhl | Screen pixel address to draw the sprite mask at. }
; TABLE#
; .
; #TABLE(default)
; { I | #R$5E15 | The previous graphic index in #R$A4BE of the sprite. }
; { I | #R$5E16 | The previous X coordinate of the sprite. }
; { I | #R$5E17 | The previous Y coordinate of the sprite. }
; { O | #R$5E18 | The height (in pixels) of the sprite mask. }
; TABLE#
@label=InitialiseCurrentSpriteMaskDrawingData
c$9F80 CALL $9E86    ; Get the address of the current sprite's previous
                     ; graphic.
; Initialises a sprite's mask drawing data.  It is expected that the sprite's
; graphic is 2 bytes wide.
; .
; Note that, depending on the X coordinate of the sprite, the relative jump at
; #R$9EE4, is set as follows:
; .
; #TABLE
; { =h X  | =h Jump }
; { $00   | #R$9ECE }
; { $01   | #R$9EE6 }
; { $02   | #R$9EE8 }
; { $03   | #R$9EEA }
; { $04   | #R$9EEC }
; { $05   | #R$9EEE }
; { $06   | #R$9EF0 }
; { $07   | #R$9EF2 }
; { $08   | #R$9ECE }
; { $09   | #R$9EE6 }
; { $0A   | #R$9EE8 }
; { $0B   | #R$9EEA }
; { $0C   | #R$9EEC }
; { $0D   | #R$9EEE }
; { $0E   | #R$9EF0 }
; { $0F   | #R$9EF2 }
; TABLE#
; .
; This entry point is used by the routine at #R$9F2B.
; .
; #TABLE(default)
; { I | #REGde | Address of the height (in pixels) of the sprite mask. }
; { O | #REGa  | The height (in pixels) of the sprite mask. }
; { O | #REGc  | The number of lines of the sprite  mask to draw ($00). }
; { O | #REGde | Address of the sprite mask glyph data. }
; { O | #REGhl | Screen pixel address to draw the sprite mask at. }
; TABLE#
; .
; #TABLE(default)
; { I | #R$5E16 | The previous X coordinate of the sprite. }
; { I | #R$5E17 | The previous Y coordinate of the sprite. }
; { O | #R$5E18 | The height (in pixels) of the sprite mask. }
; TABLE#
@label=InitialiseSpriteMaskDrawingData
*$9F83 LD HL,($5E16) ; #REGhl=contents of #R$5E16 and #R$5E17; (Y,X) position
                     ; of the sprite mask.
 $9F86 LD A,L        ; #REGa=previous X coordinate of the sprite.
 $9F87 DEC A         ; {#REGa=calculated relative jump for the routine to draw
 $9F88 RLCA          ; the sprite mask's glyph lines ($00, $02, $04, $06, $08,
 $9F89 AND $0E       ; $0A, $0C. $E8 if the previous X coordinate of the sprite
 $9F8B CP $0E        ; is divisible by 8).}
 $9F8D JR NZ,$9F91   ; If the previous X coordinate of the sprite is not
                     ; divisible by 8, then skip.
 $9F8F LD A,$E8      ; #REGa=$E8; previous X coordinate of the sprite is
                     ; divisible by 8.
@label=SetSpriteMaskDrawingRoutine
*$9F91 LD ($9EE5),A  ; Set the relative jump for the routine to draw the sprite
                     ; mask's glyph lines at #R$9EE4 to #REGa.
@label=SetSpriteMaskData
 $9F94 CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $9F97 LD A,(DE)     ; #REGa=height (in pixels) of the sprite mask.
 $9F98 LD ($5E18),A  ; Set #R$5E18 to the height (in pixels) of the sprite mask
                     ; in #REGa.
; Completes the sprite drawing data.
; .
; This entry point is used by the routine at #R$9F9F.
; .
; #TABLE(default)
; { I | #REGde | Address of the height (in pixels) of the sprite or sprite
; mask. }
; { O | #REGc  | The number of lines of the sprite or sprite mask, to draw
; ($00). }
; { O | #REGde | Address of the sprite or sprite mask, glyph data. }
; TABLE#
@label=CompleteSpriteDrawingData
*$9F9B LD C,$00      ; #REGc=$00; number of lines of the sprite that have been
                     ; drawn.
 $9F9D INC DE        ; #REGde=address of the sprite glyph data.
 $9F9E RET           ;

; Initialise Current Sprite Drawing Data
;
; Initialises the current sprite's drawing data. It is expected that the
; sprite's graphic is 2 bytes wide.
; .
; Note that, depending on the X coordinate of the sprite, the relative jump at
; #R$9F29, is set as follows:
; .
; #TABLE
; { =h X  | =h Jump }
; { $00   | #R$9F13 }
; { $01   | #R$9F2B }
; { $02   | #R$9F2D }
; { $03   | #R$9F2F }
; { $04   | #R$9F31 }
; { $05   | #R$9F33 }
; { $06   | #R$9F35 }
; { $07   | #R$9F37 }
; { $08   | #R$9F13 }
; { $09   | #R$9F2B }
; { $0A   | #R$9F2D }
; { $0B   | #R$9F2F }
; { $0C   | #R$9F31 }
; { $0D   | #R$9F33 }
; { $0E   | #R$9F35 }
; { $0F   | #R$9F37 }
; TABLE#
; .
; Used by the routines at #R$9F4A and #R$9FCA.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; { O | #REGa  | The height (in pixels) of the sprite. }
; { O | #REGc  | The number of lines of the sprite to draw ($00). }
; { O | #REGde | Address of the sprite glyph data. }
; { O | #REGhl | Screen pixel address to draw the sprite at. }
; TABLE#
; .
; #TABLE(default)
; { O | #R$5E10 | The width (in bytes) of the sprite ($02 if the X coordinate
; of the sprite is divisible by 8, $03 otherwise). }
; { O | #R$5E11 | The height (in pixels) of the sprite. }
; { O | #R$5E19 | The height (in pixels) of the sprite. }
; TABLE#
@label=InitialiseCurrentSpriteDrawingData
c$9F9F CALL $9E96    ; Get the address of the current sprite's graphic.
; Initialises a sprite's drawing data. It is expected that the sprite's graphic
; is 2 bytes wide.
; .
; Note that, depending on the X coordinate of the sprite, the relative jump at
; #R$9F29, is set as follows:
; .
; #TABLE
; { =h X  | =h Jump }
; { $00   | #R$9F13 }
; { $01   | #R$9F2B }
; { $02   | #R$9F2D }
; { $03   | #R$9F2F }
; { $04   | #R$9F31 }
; { $05   | #R$9F33 }
; { $06   | #R$9F35 }
; { $07   | #R$9F37 }
; { $08   | #R$9F13 }
; { $09   | #R$9F2B }
; { $0A   | #R$9F2D }
; { $0B   | #R$9F2F }
; { $0C   | #R$9F31 }
; { $0D   | #R$9F33 }
; { $0E   | #R$9F35 }
; { $0F   | #R$9F37 }
; TABLE#
; .
; This entry point is used by the routine at #R$9F2B.
; .
; #TABLE(default)
; { I | #REGde | Address of the height (in pixels) of the sprite. }
; { I | #REGix | Address of the sprite data structure. }
; { O | #REGa  | The height (in pixels) of the sprite. }
; { O | #REGc  | The number of lines of the sprite to draw ($00). }
; { O | #REGde | Address of the sprite glyph data. }
; { O | #REGhl | Screen pixel address to draw the sprite at. }
; TABLE#
; .
; #TABLE(default)
; { O | #R$5E10 | The width (in bytes) of the sprite ($02 if the X coordinate
; of the sprite is divisible by 8, $03 otherwise). }
; { O | #R$5E11 | The height (in pixels) of the sprite. }
; { O | #R$5E19 | The height (in pixels) of the sprite. }
; TABLE#
@label=InitialiseSpriteDrawingData
*$9FA2 LD L,(IX+$03) ; {#REGhl=(Y,X) position of the sprite.
 $9FA5 LD H,(IX+$04) ; }
 $9FA8 LD A,L        ; #REGa=X coordinate of the sprite.
 $9FA9 DEC A         ; {#REGa=calculated relative jump for the routine to draw
 $9FAA RLCA          ; the sprite's glyph lines ($00, $02, $04, $06, $08, $0A,
 $9FAB AND $0E       ; $0C. $E8 if the X coordinate of the sprite is divisible
 $9FAD CP $0E        ; by 8).}
 $9FAF JR NZ,$9FB3   ; If the X coordinate of the sprite is not divisible by 8,
                     ; then skip.
 $9FB1 LD A,$E8      ; #REGa=$E8; X coordinate of the sprite is divisible by 8.
@label=SetSpriteDrawingRoutine
*$9FB3 LD ($9F2A),A  ; Set the relative jump for the routine to draw the
                     ; sprite's glyph lines at #R$9F29 to #REGa.
 $9FB6 LD A,$02      ; #REGa=$02; width (in bytes) of the sprite to draw.
 $9FB8 JR Z,$9FBB    ; If the X coordinate of the sprite is divisible by 8,
                     ; then skip.
 $9FBA INC A         ; #REGa=$03; width (in bytes) of the sprite to draw.
@label=SetSpriteData
*$9FBB LD ($5E10),A  ; Set #R$5E10 to the width (in bytes) of the sprite to
                     ; draw in #REGa.
 $9FBE CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $9FC1 LD A,(DE)     ; #REGa=height (in pixels) of the sprite.
 $9FC2 LD ($5E19),A  ; Set #R$5E19 to the height (in pixels) of the sprite in
                     ; #REGa.
 $9FC5 LD ($5E11),A  ; Set #R$5E11 to the the height (in pixels) of the sprite
                     ; in #REGa.
 $9FC8 JR $9F9B      ; Complete the drawing data of the sprite.

; Routine at 40906
;
; Used by the routine at #R$8E26.
c$9FCA CALL $9F9F    ; Initialise the current sprite's drawing data.
 $9FCD EXX           ;
 $9FCE CALL $9F80    ;
; This entry point is used by the routine at #R$9F56.
*$9FD1 LD A,($5E17)  ;
 $9FD4 SUB (IX+$04)  ;
 $9FD7 JP Z,$9EB5    ;
 $9FDA JP M,$9FEC    ;
 $9FDD LD C,A        ;
 $9FDE LD A,($5E18)  ;
 $9FE1 CP C          ;
 $9FE2 JP C,$9EB5    ;
 $9FE5 SUB C         ;
 $9FE6 LD ($5E18),A  ;
 $9FE9 JP $9E9B      ; Draw the sprite.
*$9FEC EXX           ;
 $9FED NEG           ;
 $9FEF LD C,A        ;
 $9FF0 LD A,($5E19)  ;
 $9FF3 CP C          ;
 $9FF4 JP C,$9EB4    ;
 $9FF7 SUB C         ;
 $9FF8 JP $9EC8      ;

; Set Current Sprite Previous Drawing Data
;
; Sets the current sprite's previous drawing data.
; .
; Used by the routines at #R$81DB, #R$81F0, #R$82F1, #R$8301, #R$845F, #R$85F7,
; #R$862E, #R$8672, #R$871A, #R$8787, #R$87A6, #R$8862, #R$8906, #R$8988,
; #R$89ED, #R$8A2F, #R$8A80, #R$8AFF, #R$8C63, #R$8D77, #R$92F5 and #R$988B.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite data structure. }
; TABLE#
; .
; #TABLE(default)
; { O | #R$5E16 | Set to the X coordinate of the sprite. }
; { O | #R$5E17 | Set to the Y coordinate of the sprite. }
; { O | #R$5E15 | Set to the graphic index in #R$A4BE of the sprite }
; TABLE#
@label=SetCurrentSpritePreviousDrawingData
c$9FFB LD A,(IX+$03) ; #REGa=X coordinate of the sprite data in #REGix.
 $9FFE LD ($5E16),A  ; Set #R$5E16 to #REGa; X coordinate of the sprite.
 $A001 LD A,(IX+$04) ; #REGa=Y coordinate of the sprite data in #REGix.
 $A004 LD ($5E17),A  ; Set #R$5E17 to #REGa; Y coordinate of the sprite.
 $A007 LD A,(IX+$00) ; #REGa=graphic index in #R$A4BE of the sprite data in
                     ; #REGix.
 $A00A LD ($5E15),A  ; Set #R$5E15 to #REGa; graphic index in #R$A4BE of the
                     ; sprite.
 $A00D RET           ;

; Colour Sprite
;
; Colours the current sprite.
; .
; Used by the routines at #R$A14D and #R$A311.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
@label=ColourCurrentSprite
c$A00E LD A,(IX+$03) ; {Set #R$5E16 to the X coordinate of the sprite data in
 $A011 LD ($5E16),A  ; #REGix.}
 $A014 LD A,(IX+$04) ; {Set #R$5E17 to the Y coordinate of the sprite data in
 $A017 LD ($5E17),A  ; #REGix.}
; Colours a sprite.
; .
; This entry point is used by the routines at #R$81F0, #R$871A, #R$8E26,
; #R$92D8 and #R$9326.
; .
; #TABLE(default)
; { I | #REGix | Address of the sprite's data structure. }
; TABLE#
; .
; #TABLE(default)
; { I | #R$5E16 | Previous X coordinate of the sprite. }
; { I | #R$5E17 | Previous Y coordinate of the sprite. }
; TABLE#
@label=ColourSprite
*$A01A LD L,(IX+$03) ; {#REGhl=(Y,X) position of the sprite data in #REGix.
 $A01D LD H,(IX+$04) ; }
 $A020 LD D,(IX+$05) ; #REGd=colour attribute of the sprite data in #REGix.
 $A023 LD A,($5E1A)  ; {#REGe=contents of #R$5E1A; the previous colour
 $A026 LD E,A        ; attributes of the sprite.}
 $A027 LD A,($5E10)  ; {#REGb=contents of #R$5E10; the width (in bytes) of the
 $A02A LD B,A        ; sprite.}
 $A02B LD A,($5E11)  ; #REGa=contents of #R$5E11; the height (in pixels) of the
                     ; sprite.
 $A02E RRCA          ; {#REGc=calculated number of character rows required to
 $A02F RRCA          ; colour the sprite.
 $A030 INC A         ;
 $A031 RRCA          ;
 $A032 AND $1F       ;
 $A034 INC A         ;
 $A035 LD C,A        ; }
 $A036 PUSH BC       ; Store #REGbc. #REGb=width (in bytes) of the sprite.
                     ; #REGc=number of character rows required to colour the
                     ; sprite.
 $A037 LD B,$00      ; #REGb=$00; initial index in #R$A064.
@label=CheckSpriteMovedHorizontally
 $A039 LD A,($5E16)  ; #REGa=contents of #R$5E16; the previous X coordinate of
                     ; the sprite.
 $A03C CP L          ; Check the previous X coordinate of the sprite against
                     ; the current X coordinate of the sprite.
 $A03D JR Z,$A043    ; If the X coordinate has not changed, then skip.
 $A03F JR C,$A042    ; Jump if the sprite has moved right.
@label=IncColourSpriteRoutine1
 $A041 INC B         ; The sprite has moved left.
@label=IncColourSpriteRoutine2
*$A042 INC B         ; #REGb=$01 or $02; index in #R$A064.
@label=CheckSpriteMovedVertically
*$A043 LD A,($5E17)  ; #REGa=contents of #R$5E17; the previous Y coordinate of
                     ; the sprite.
 $A046 CP H          ; Check the previous Y coordinate of the sprite against
                     ; the current Y coordinate of the sprite.
 $A047 LD A,B        ; #REGa=index in #R$A064.
 $A048 JR Z,$A050    ; If the Y coordinate has not changed, then skip.
 $A04A JR C,$A04E    ; Jump if the sprite has moved down.
@label=AddColourSpriteRoutine1
 $A04C ADD A,$04     ; The sprite has moved up.
@label=AddColourSpriteRoutine2
*$A04E ADD A,$04     ; #REGa=$00, $01, $02, $04, $05, $06, $08, $09, $0A; index
                     ; in #R$A064.
@label=SkipSpriteMovedVertically
*$A050 LD B,A        ; #REGb=index in #R$A064.
 $A051 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A054 LD A,B        ; #REGa=index in #R$A064.
 $A055 POP BC        ; Store #REGbc. #REGb=width (in bytes) of the sprite.
                     ; #REGc=number of character rows required to colour the
                     ; sprite.
 $A056 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A057 LD HL,$A064   ; #REGhl=address of #R$A064.
 $A05A SLA A         ; #REGa=offset in #R$A064 of the colour sprite routine.
 $A05C CALL $926C    ; Get the address in #R$A064 of the colour sprite routine
                     ; for setting the sprite's colour attributes.
 $A05F LD A,(HL)     ; {#REGhl=address of the routine for setting the sprite's
 $A060 INC HL        ; colour attributes.
 $A061 LD H,(HL)     ;
 $A062 LD L,A        ; }
 $A063 JP (HL)       ; Set the sprite's colour attributes.

; Colour Sprite Routine Lookup Table
@label=ColourSpriteRoutineLookupTable
w$A064 DEFW $A07A
 $A066 DEFW $A08D
 $A068 DEFW $A0A3
 $A06A DEFW $807A
 $A06C DEFW $A0B7
 $A06E DEFW $A0D2
 $A070 DEFW $A110
 $A072 DEFW $807A
 $A074 DEFW $A0EC
 $A076 DEFW $A127
 $A078 DEFW $A0FE

; Colour Stationary Sprite
;
; Colours a stationary sprite.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; TABLE#
@label=ColourStationarySprite
c$A07A POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
; This entry point is used by the routine at #R$A0EC.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGhl | Screen attribute address to set the sprite's colour attributes
; at. }
; TABLE#
@label=ColourStationarySprite1
*$A07B PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A07C PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=ColourStationarySpriteRowLoop
*$A07D LD (HL),D     ; Set screen attribute in #REGhl to #REGd; set the colour
                     ; attribute of the sprite.
 $A07E INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
 $A07F DJNZ $A07D    ; Loop until the row of the sprite has been coloured.
 $A081 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A082 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A085 AND A         ; Clear carry flag!
 $A086 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $A088 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A089 DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; sprite to colour.
 $A08A JR NZ,$A07B   ; Loop until the sprite has been coloured.
 $A08C RET           ;

; Colour East Moving Sprite
;
; Colours a sprite that has moved East (right) by a single character column.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourEastMovingSprite
c$A08D POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
; This entry point is used by the routine at #R$A127.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; { I | #REGhl | Screen attribute address to set the sprite's colour attributes
; at. }
; TABLE#
@label=ColourEastMovingSprite1
*$A08E PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A08F PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A090 DEC L         ; #REGhl=previous screen attribute address to set the
                     ; previous colour attribute of the sprite at.
 $A091 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A092 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
@label=ColourEastMovingSpriteRowLoop
*$A093 LD (HL),D     ; Set screen attribute in #REGhl to #REGd; set the colour
                     ; attribute of the sprite.
 $A094 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
 $A095 DJNZ $A093    ; Loop until the row of the sprite has been coloured.
 $A097 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A098 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A09B AND A         ; Clear carry flag!
 $A09C SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $A09E POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A09F DEC C         ; Decrement #REGc; height (in character rows) of the
                     ; sprite to colour.
 $A0A0 JR NZ,$A08E   ; Loop until the sprite has been coloured.
 $A0A2 RET           ;

; Colour West Moving Sprite
;
; Colours a sprite that has moved West (left) by a single character column.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourWestMovingSprite
c$A0A3 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
; This entry point is used by the routine at #R$A0FE.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; { I | #REGhl | Screen attribute address to set the sprite's colour attributes
; at. }
; TABLE#
@label=ColourWestMovingSprite1
*$A0A4 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A0A5 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=ColourWestMovingSpriteRowLoop
*$A0A6 LD (HL),D     ; Set screen attribute in #REGhl to #REGd; set the colour
                     ; attribute of the sprite.
 $A0A7 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
 $A0A8 DJNZ $A0A6    ; Loop until the row of the sprite has been coloured.
 $A0AA LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A0AB POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A0AC LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A0AF AND A         ; Clear carry flag!
 $A0B0 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $A0B2 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A0B3 DEC C         ; Decrement #REGc; height (in bytes) of the sprite to
                     ; colour.
 $A0B4 JR NZ,$A0A4   ; Loop until the sprite has been coloured.
 $A0B6 RET           ;

; Colour South Moving Sprite
;
; Colours a sprite that has moved South (down) by a single character row.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourSouthMovingSprite
c$A0B7 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=ColourSouthMovingSprite1
*$A0B8 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A0B9 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=ColourSouthMovingSpriteRowLoop
*$A0BA LD (HL),D     ; Set screen attribute in #REGhl to #REGd; set the colour
                     ; attribute of the sprite.
 $A0BB INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
 $A0BC DJNZ $A0BA    ; Loop until the row of the sprite has been coloured.
 $A0BE POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A0BF LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A0C2 AND A         ; Clear carry flag!
 $A0C3 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $A0C5 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A0C6 DEC C         ; Decrement #REGc; height (in bytes) of the sprite to
                     ; colour.
 $A0C7 JR NZ,$A0B8   ; Loop until the sprite has been coloured.
; This entry point is used by the routines at #R$A0D2 and #R$A110.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; { I | #REGhl | Screen attribute address to set the sprite's previous colour
; attributes at. }
; TABLE#
@label=PreviousColourSouthMovingSprite
*$A0C9 LD A,H        ; #REGa=high bytes of the screen attribute address.
 $A0CA CP $58        ; {If we've scrolled past the first character row, then
 $A0CC RET C         ; we've nothing to do.}
@label=PreviousColourSouthMovingSpriteRowLoop
*$A0CD LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A0CE INC L         ; #REGhl=next screen attribute address to set the previous
                     ; colour attribute of the sprite at.
 $A0CF DJNZ $A0CD    ; Loop until the row of the sprite has been coloured with
                     ; the previous colour attribute.
 $A0D1 RET           ;

; Colour SouthEast Moving Sprite
;
; Colours a sprite that has moved SouthEast (down and right) by a single
; character row and column.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourSouthEastMovingSprite
c$A0D2 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=PreviousColourSouthEastMovingSpriteRowLoop
*$A0D3 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A0D4 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A0D5 DEC L         ; #REGhl=previous screen attribute address to set the
                     ; previous colour attribute of the sprite at.
 $A0D6 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A0D7 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
@label=ColourSouthEastMovingSpriteRowLoop
*$A0D8 LD (HL),D     ; Set screen attribute in #REGhl to #REGd; set the colour
                     ; attribute of the sprite.
 $A0D9 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
 $A0DA DJNZ $A0D8    ; Loop until the row of the sprite has been coloured.
 $A0DC POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A0DD LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A0E0 AND A         ; Clear carry flag!
 $A0E1 SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $A0E3 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A0E4 DEC C         ; Decrement #REGc; height (in bytes) of the sprite to
                     ; colour.
 $A0E5 JR NZ,$A0D3   ; Loop until the sprite has been coloured.
 $A0E7 DEC L         ; #REGhl=previous screen attribute address to set the
                     ; previous colour attribute of the sprite at.
 $A0E8 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A0E9 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour previous attribute of the sprite at.
 $A0EA JR $A0C9      ; Set the remaining previous colour of the sprite.

; Colour North Moving Sprite
;
; Colours a sprite that has moved North (up) by a single character row.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourNorthMovingSprite
c$A0EC POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A0ED PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A0EE PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A0EF PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A0F0 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A0F3 ADD HL,BC     ; #REGhl=calculated screen attribute address of the next
                     ; character row.
 $A0F4 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
@label=PreviousColourNorthMovingSpriteRowLoop
*$A0F5 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A0F6 INC L         ; #REGhl=next screen attribute address to set the previous
                     ; colour attribute of the sprite at.
 $A0F7 DJNZ $A0F5    ; Loop until the row of the sprite has been coloured with
                     ; the previous colour attribute.
 $A0F9 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A0FA POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A0FB JP $A07B      ; Set the remaining colour of the sprite.

; Colour NorthWest Moving Sprite
;
; Colours a sprite that has moved NorthWes (up and left) by a single character
; row and column.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourNorthWestMovingSprite
c$A0FE POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A0FF PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A100 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A101 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A102 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A105 ADD HL,BC     ; #REGhl=calculated screen attribute address of the next
                     ; character row.
 $A106 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A107 INC B         ; Increment the width (in character columns) of the sprite
                     ; to colour.
@label=PreviousColourNorthWestMovingSpriteRowLoop
*$A108 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A109 INC L         ; #REGhl=next screen attribute address to set the previous
                     ; colour attribute of the sprite at.
 $A10A DJNZ $A108    ; Loop until the row of the sprite has been coloured with
                     ; the previous colour attribute.
 $A10C POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A10D POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A10E JR $A0A4      ; Set the remaining colour of the sprite.

; Colour SouthWest Moving Sprite
;
; Colours a sprite that has moved SouthWest (down and left) by a single
; character row and column.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourSouthWestMovingSprite
c$A110 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=ColourSouthWestMovingSprite1
*$A111 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A112 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
@label=ColourSouthWestMovingSpriteRowLoop
*$A113 LD (HL),D     ; Set screen attribute in #REGhl to #REGd; set the colour
                     ; attribute of the sprite.
 $A114 INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the sprite at.
 $A115 DJNZ $A113    ; Loop until the row of the sprite has been coloured.
 $A117 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A118 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A119 LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A11C AND A         ; Clear carry flag!
 $A11D SBC HL,BC     ; #REGhl=calculated screen attribute address of the
                     ; previous character row.
 $A11F POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A120 DEC C         ; Decrement #REGc; height (in bytes) of the sprite to
                     ; colour.
 $A121 JR NZ,$A111   ; Loop until the sprite has been coloured.
 $A123 INC B         ; Increment the width (in character columns) of the sprite
                     ; to colour.
 $A124 JP $A0C9      ; Set the remaining previous colour of the sprite.

; Colour NorthEast Moving Sprite
;
; Colours a sprite that has moved NorthEast (up and right) by a single
; character row and column.
; .
; Used by the routine at #R$A01A.
; .
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the sprite to colour. }
; { I | #REGc  | The height (in character rows) of the sprite to colour. }
; { I | #REGd  | The colour attribute of the sprite. }
; { I | #REGe  | The previous colour attribute of the sprite. }
; TABLE#
@label=ColourNorthEastMovingSprite
c$A127 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A128 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A129 PUSH HL       ; Store #REGhl; screen attribute address to set the
                     ; sprite's colour attributes at.
 $A12A PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; sprite to colour. #REGc=height (in character rows) of
                     ; the sprite to colour.
 $A12B LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A12E ADD HL,BC     ; #REGhl=calculated screen attribute address of the next
                     ; character row.
 $A12F POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A130 DEC L         ; #REGhl=previous screen attribute address to set the
                     ; previous colour attribute of the sprite at.
 $A131 INC B         ; Increment the width (in character columns) of the sprite
                     ; to colour.
@label=PreviousColourNorthEastMovingSpriteRowLoop
*$A132 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the
                     ; previous colour attribute of the sprite.
 $A133 INC L         ; #REGhl=next screen attribute address to set the previous
                     ; colour attribute of the sprite at.
 $A134 DJNZ $A132    ; Loop until the row of the sprite has been coloured with
                     ; the previous colour attribute.
 $A136 POP HL        ; Restore #REGhl; screen attribute address to set the
                     ; colour attribute of the sprite at.
 $A137 POP BC        ; Restore #REGbc. #REGb=width (in character columns) of
                     ; the sprite to colour. #REGc=height (in character rows)
                     ; of the sprite to colour.
 $A138 JP $A08E      ; Set the remaining colour of the sprite.

; Display Collected Items In Status Panel
;
; Displays the collected items in the status panel. The player can collect up
; to 3 collectables.
; .
; Used by the routines at #R$9117, #R$92F5 and #R$93E3.
@label=DisplayCollectedItems
c$A13B LD DE,$2CC8   ; #REGde=(Y,X) position of the first collected item in the
                     ; status panel (Y=44,X=200).
 $A13E LD HL,$5E30   ; #REGhl=address of #R$5E30.
 $A141 LD B,$03      ; #REGb=$03; maximum number of collected items.
@label=DisplayCollectedItemsLoop
*$A143 CALL $A14D    ; Display the collected item in the display panel.
 $A146 LD A,E        ; #REGa=X coordinate of the current collected item.
 $A147 ADD A,$10     ; #REGa=calculated X coordinate of the next collected item
                     ; in the status panel.
 $A149 LD E,A        ; #REGe=X coordinate of the next collected item in the
                     ; status panel.
 $A14A DJNZ $A143    ; Loop until we've displayed all collected items in the
                     ; status panel.
 $A14C RET           ;

; Display Collected Item In Status Panel
;
; Displays a collected item in the status panel.
; .
; Used by the routine at #R$A13B.
; .
; #TABLE
; { I | #REGde  | (Y,X) position of the collected item. }
; { I | #REGhl  | Address of the collected item data (#R$5E30, #R$5E34 or
; #R$5E38). }
; { O | #REGhl  | Address of the next collected item data. }
; TABLE#
@label=DisplayCollectedItem
c$A14D PUSH BC       ; Store #REGbc.
 $A14E PUSH DE       ; Store #REGde.
 $A14F PUSH IX       ; Store #REGix.
 $A151 LD IX,$A17D   ; #REGix=address of #R$A17D.
 $A155 LD A,(HL)     ; #REGa=LSB of the adddress of the sprite data structure
                     ; of the sprite in #REGhl.
 $A156 INC HL        ; #REGhl=address of the MSB of the adddress of the sprite
                     ; data structure of the sprite in #REGhl.
 $A157 OR (HL)       ;
 $A158 INC HL        ; #REGhl=address of the graphic index in #R$A4BE of the
                     ; sprite in #REGhl.
 $A159 LD A,(HL)     ; #REGa=graphic index in #R$A4BE of the sprite in #REGhl.
 $A15A JR NZ,$A15E   ; If the address of the sprite data structure is not zero,
                     ; then skip.
 $A15C LD A,$31      ; #REGa=graphic index in #R$A4BE of the sprite
                     ; ($31=#R$AEEC).
@label=SkipSetEmptySprite
*$A15E INC HL        ; #REGhl=address of the colour attribute of the sprite in
                     ; #REGhl.
 $A15F LD (IX+$00),A ; Set the graphic index in #R$A4BE of the sprite data in
                     ; #REGix to #REGa.
 $A162 LD (IX+$03),E ; Set the X coordinate of the sprite data in #REGix to
                     ; #REGe.
 $A165 LD (IX+$04),D ; Set the Y coordinate of the sprite data in #REGix to
                     ; #REGd.
 $A168 LD A,(HL)     ; #REGa=colour attribute of the sprite in #REGhl.
 $A169 INC HL        ; #REGhl=address of the next collected item.
 $A16A LD (IX+$05),A ; Set the colour attribute of the sprite in #REGix to
                     ; #REGa.
 $A16D PUSH HL       ; Store #REGhl; address of the next collected item.
 $A16E CALL $A185    ; Clear (or bank) the collected item sprite.
 $A171 CALL $9F4A    ; Display the collected item sprite (without mask).
 $A174 CALL $A00E    ; Colour the collected item sprite.
 $A177 POP HL        ; Restore #REGhl; address of the next collected item.
 $A178 POP IX        ; Restore #REGix.
 $A17A POP DE        ; Restore #REGde.
 $A17B POP BC        ; Restore #REGbc.
 $A17C RET           ;

; Current Working Sprite Data
;
; Holds the current working sprite data.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A4BE. }
; { $01         | Screen                | Screen number. }
; { $02         |                       | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Colour Atttribute     | Colour attribute. }
; { $06         |                       | ??? }
; { $07         |                       | ??? }
; TABLE#
@label=CurrentWorkingSpriteData
b$A17D DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Clear Sprite Screen Area
;
; Clears a specified sprite's screen area. It is expected that the sprite is 2
; bytes wide and a maximum of $14 pixels high.
; .
; Used by the routines at #R$A14D and #R$A2CE.
; .
; #TABLE(default)
; { I | #REGix | Address of a sprite's data structure. }
; TABLE#
@label=ClearSpriteScreenArea
c$A185 LD L,(IX+$03) ; {#REGhl=(Y,X) position of the sprite data in #REGix.
 $A188 LD H,(IX+$04) ; }
 $A18B CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $A18E LD B,$14      ; #REGb=$14; maximum height (in pixels) of a sprite.
@label=ClearSpriteScreenAreaLoop
*$A190 LD (HL),$00   ; Clear the contents of the screen pixels in #REGhl.
 $A192 INC L         ; #REGhl=next screen pixel address to clear.
 $A193 LD (HL),$00   ; Clear the contents of the screen pixels in #REGhl.
 $A195 DEC L         ; #REGhl=initial screen pixel address.
 $A196 CALL $9F03    ; Calculate the previous line of the sprite.
 $A199 DJNZ $A190    ; Loop until the sprite has been cleared.
 $A19B RET           ;

; Add Points Score
;
; Add points to the player's score.
; .
; Used by the routines at #R$871A and #R$8988.
; .
; #TABLE(default)
; { I | #REGbc | Points to add (BCD encoded). }
; TABLE#
@label=AddPointsScore
c$A19C LD HL,$5E2C   ; #REGhl=address of the LSB of #R$5E2A.
 $A19F LD A,(HL)     ; #REGa=low byte of the player's score.
 $A1A0 ADD A,C       ; Add the low byte of points to add in #REGc to #REGa.
 $A1A1 DAA           ; Decimal adjust #REGa (BCD encode).
 $A1A2 LD (HL),A     ; Store #REGa in the low byte of the player's score.
 $A1A3 DEC HL        ; #REGhl=address of the middle byte of the player's score.
 $A1A4 LD A,(HL)     ; #REGa=middle byte of the player's score.
 $A1A5 ADC A,B       ; Add (with carry) the high byte of points to add in #REGb
                     ; to #REGa.
 $A1A6 DAA           ; Decimal adjust #REGa (BCD encode).
 $A1A7 LD (HL),A     ; Store #REGa in the middle byte of the player's score.
 $A1A8 DEC HL        ; #REGhl=address of the high byte of the player's score.
 $A1A9 LD A,(HL)     ; #REGa=high byte of the player's score.
 $A1AA ADC A,$00     ; Add (with carry) $00 to #REGa.
 $A1AC DAA           ; Decimal adjust #REGa (BCD encode).
 $A1AD LD (HL),A     ; Store #REGa in the high byte of the player's score.
; Display the player's score in the status panel.
; .
; This entry point is used by the routine at #R$A219.
@label=DisplayScoreInStatusPanel
*$A1AE LD HL,$BFCC   ; {Set #R$5E01 to the first decimal digit (0 character) in
 $A1B1 LD ($5E01),HL ; #R$BF4C.}
 $A1B4 LD HL,$50C8   ; #REGhl=(Y,X) position of the player's score in the
                     ; status panel (Y=80,X=200).
; Display the player's score.
; .
; This entry point is used by the routine at #R$9641.
; .
; #TABLE(default)
; { I | #REGhl | (Y,X) position to display the score at. }
; TABLE#
@label=DisplayScore
*$A1B7 CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $A1BA LD DE,$5E2A   ; #REGde=address of #R$5E2A.
 $A1BD LD B,$03      ; #REGb=$03; the score is 3 BDC values (000000-999999).
; Displays a BCD (binary coded decimal) value.
; .
; This entry point is used by the routines at #R$95DA and #R$9641.
; .
; #TABLE(default)
; { I | #REGb  | The number of BCD values to display. }
; { I | #REGde | Address of the BCD value to display. }
; { I | #REGhl | Screen pixel address to draw the BCD value at. }
; TABLE#
@label=DisplayBCDValue
*$A1BF LD A,(DE)     ; #REGa=a BCD value (00-99).
 $A1C0 RRCA          ; {Get the high nibble (decimal digit) of the BCD value.
 $A1C1 RRCA          ;
 $A1C2 RRCA          ;
 $A1C3 RRCA          ;
 $A1C4 AND $0F       ; }
 $A1C6 CALL $A1D3    ; Draw the text character.
; Displays a BCD (binary coded decimal) value.
; .
; This entry point is used by the routine at #R$95DA.
; .
; #TABLE(default)
; { I | #REGb  | The number of BCD values to display. }
; { I | #REGde | Address of the BCD value to display. }
; { I | #REGhl | Screen pixel address to draw the BCD value at. }
; TABLE#
@label=DisplayBCDValue2
*$A1C9 LD A,(DE)     ; #REGa=a BCD value (00-99).
 $A1CA AND $0F       ; Get the low nibble (decimal digit) of the BCD value.
 $A1CC CALL $A1D3    ; Draw the text character.
 $A1CF INC DE        ; #REGde=address of the next BCD value to display.
 $A1D0 DJNZ $A1BF    ; Loop until all the BCD values are displayed.
 $A1D2 RET           ;

; Draw 8x8 User Defined Graphic (UDG)
;
; Draws a specified 8x8 User Defined Graphic (UDG) at the specified screen
; pixel address.
; .
; Definition of the main system font, 32 (SPACE) to 127 (copyright), are
; referenced by the system variable CHARS which can be found at memory address
; $5C36/7. It is defined as 256 bytes lower than the first byte of the SPACE
; character, simpliflying the formula for locating a character to CHARS + 8 *
; code point. The CHARS value defaults to the value $3C00, with the system font
; at the end of the Spectrum's ROM at addresses $3D00-$3FFF. Entire alternative
; fonts can be loaded into RAM and the CHARS variable set accordingly.
; .
; Used by the routines at #R$A19C, #R$A1F3 and #R$A219.
; .
; #TABLE(default)
; { I | #REGa  | UDG to Draw. }
; { I | #REGhl | Screen pixel address to draw the UDG at. }
; { O | #REGhl | Screen pixel address to draw the next UDG at. }
; TABLE#
@label=Draw8x8UDG
c$A1D3 PUSH BC       ; Store #REGbc.
 $A1D4 PUSH DE       ; Store #REGde.
 $A1D5 PUSH HL       ; Store #REGhl; screen pixel address to draw the UDG at.
 $A1D6 LD L,A        ; #REGl=UDG to draw.
 $A1D7 LD H,$00      ; #REGh=$00.
 $A1D9 ADD HL,HL     ; {Multiply #REGhl by 8 to get the offset of the UDG's
 $A1DA ADD HL,HL     ; glyph data.
 $A1DB ADD HL,HL     ; }
 $A1DC LD DE,($5E01) ; #REGde=address of the UDG glyph data in #R$5E01.
 $A1E0 ADD HL,DE     ; #REGhl=address of the glyph data representing the UDG to
                     ; draw.
 $A1E1 EX DE,HL      ; #REGde=address of the glyph data representing the UDG to
                     ; draw. #REGhl=address of the UDG glyph data in #R$5E01.
 $A1E2 POP HL        ; #REGhl=screen pixel address to draw the UDG at.
 $A1E3 LD B,$08      ; #REGb=$08; the UDG is 8 pixels high.
; #TABLE(default)
; { I | #REGb  | Height (in pixels) of the UDG. }
; { I | #REGde | Address of the glpyh data representing the UDG to draw. }
; { I | #REGhl | Screen pixel address to draw the UDG at. }
; { O | #REGhl | Screen pixel address to draw the next UDG at. }
; TABLE#
@label=DrawUDGGlyphDataLoop
*$A1E5 LD A,(DE)     ; #REGa=line of glyph data representing the UDG to draw.
 $A1E6 LD (HL),A     ; Draw the line of the glpyh data to the screen.
 $A1E7 INC DE        ; #REGde=next address of the glyph data representing the
                     ; UDG to draw.
 $A1E8 INC H         ; #REGhl=next screen pixel address to draw the glyph data
                     ; at (the next Y coordinate to draw the UDG's next line of
                     ; glyph data).
 $A1E9 DJNZ $A1E5    ; Loop until the UDG is drawn.
 $A1EB POP DE        ; Restore #REGde.
 $A1EC POP BC        ; Restore #REGbc.
 $A1ED LD A,H        ; {Calculate the screen pixel address of the next UDG to
 $A1EE SUB $08       ; draw.
 $A1F0 LD H,A        ;
 $A1F1 INC L         ; }
 $A1F2 RET           ;

; Display Message
;
; Displays the specified message at the specified (Y,X) position.
; .
; message to display is defined as:
; .
; #TABLE(default)
; { Colour Attribute | Text | Text Terminator (bit7=1) }
; TABLE#
; .
; Used by the routines at #R$7CAF, #R$8C35, #R$9641 and #R$96EC.
; .
; #TABLE(default)
; { I | #REGde | Address of message. }
; { I | #REGhl | (Y,X) position of the message to display. }
; TABLE#
@label=DisplayMessage
c$A1F3 PUSH HL       ; Store #REGhl which contains the (Y,X) position of the
                     ; message to display.
 $A1F4 CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
 $A1F7 LD A,(DE)     ; #REGa=colour attribute of the message.
 $A1F8 EX AF,AF'     ; #REGa'=colour attribute of the message.
 $A1F9 INC DE        ; #REGde=address of the text to display.
 $A1FA EXX           ; #REGde'=address of the text to display. #REGhl'=screen
                     ; pixel address.
 $A1FB POP HL        ; #REGhl=(Y,X) position of the message.
 $A1FC CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
; Display Text
; .
; This entry point is used by the routine at #R$7D8A.
; .
; #TABLE(default)
; { I | #REGa'  | Colour attribute of the text character to display. }
; { I | #REGde' | Address of the text character to display. }
; { I | #REGhl  | Screen attribute address. }
; { I | #REGhl' | Screen pixel address. }
; TABLE#
@label=DisplayText
*$A1FF EXX           ; #REGde=address of the text character to display.
                     ; #REGhl=screen pixel address. #REGhl'=screen attribute
                     ; address.
 $A200 LD A,(DE)     ; #REGa=text character to display.
 $A201 BIT 7,A       ; Test for text terminator bit.
 $A203 JR NZ,$A210   ; Jump if the last text character.
 $A205 CALL $A1D3    ; Draw the text character.
 $A208 INC DE        ; #REGde=address of the next text character to display.
 $A209 EXX           ; #REGde=address of the text character displayed.
                     ; #REGde'=address of the next text character to display.
                     ; #REGhl=screen attribute address. #REGhl'=screen pixel
                     ; address of the next text character to display.
 $A20A EX AF,AF'     ; #REGa=colour attribute. #REGa'=text character displayed.
 $A20B LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set colour
                     ; attribute.
 $A20C INC L         ; #REGhl=next screen attribute address.
 $A20D EX AF,AF'     ; #REGa=text character displayed. #REGa'=colour attribute.
 $A20E JR $A1FF      ; Loop.
@label=DisplayTerminateCharacter
*$A210 AND $7F       ; Remove text terminator bit.
 $A212 CALL $A1D3    ; Draw the text character.
 $A215 EXX           ; #REGde=address of the text character displayed.
                     ; #REGhl=screen attribute address. #REGhl'=screen pixel
                     ; address.
 $A216 EX AF,AF'     ; #REGa=colour attribute. #REGa'=text character displayed.
 $A217 LD (HL),A     ; Set screen attribute in #REGhl to #REGa; set colour
                     ; attribute.
 $A218 RET           ;

; Display Status Panel
;
; Displays the status panel.
; .
; Used by the routine at #R$7D9A.
@label=DisplayStatusPanel
c$A219 LD HL,$B03A   ; {Set #R$5E01 to #R$B03A.
 $A21C LD ($5E01),HL ; }
 $A21F LD HL,$00C0   ; #REGhl=(Y,X) position of the status panel (Y=0,X=192).
 $A222 LD DE,$B32A   ; #REGde=address of #R$B32A.
 $A225 LD BC,$0818   ; #REGb=$08; width (in character columns) of the status
                     ; panel. #REGc=$18; height (in character rows) of the
                     ; status panel.
; #TABLE(default)
; { I | #REGb  | The number of status panel character columns to display. }
; { I | #REGc  | The number of status panel character rows to display. }
; { I | #REGde | Address of an index in #R$B32A of the status panel 8x8 UDG in
; #R$B03A to display. }
; { I | #REGhl | (Y,X) position to display the status panel 8x8 UDG at. }
; TABLE#
@label=DisplayStatusPanelLoop
*$A228 PUSH BC       ; Store #REGbc. #REGb=number of status panel character
                     ; columns to display. #REGc=number of status panel
                     ; character rows to display.
 $A229 PUSH HL       ; Store #REGhl; (Y,X) position to display the status panel
                     ; 8x8 UDG at.
 $A22A CALL $9BA2    ; Calculate the screen pixel address of the (Y,X) position
                     ; in #REGhl.
; #TABLE(default)
; { I | #REGb  | The number of status panel character columns to display. }
; { I | #REGc  | The number of status panel character rows to display. }
; { I | #REGde | Address of an index in #R$B32A of the status panel 8x8 UDG in
; #R$B03A to display. }
; { I | #REGhl | Screen pixel address to draw the status panel 8x8 UDG at. }
; TABLE#
@label=DisplayStatusPanelRowLoop
*$A22D LD A,(DE)     ; #REGa=index in #R$B32A of the status panel 8x8 UDG in
                     ; #R$B03A to display.
 $A22E INC DE        ; #REGde=next address of an index in #R$B32A of the next
                     ; status panel 8x8 UDG in #R$B03A to display.
 $A22F CALL $A1D3    ; Draw the status panel 8x8 UDG.
 $A232 DJNZ $A22D    ; Loop until a row of the status panel has been displayed.
 $A234 POP HL        ; Restore #REGhl; (Y,X) position to display the status
                     ; panel 8x8 UDG at.
 $A235 LD A,H        ; {#REGhl=(Y,X) position of the next row to display the
 $A236 ADD A,$08     ; status panel at.
 $A238 LD H,A        ; }
 $A239 POP BC        ; Restore #REGbc. #REGb=number of status panel character
                     ; columns to display. #REGc=number of status panel
                     ; character rows to display.
 $A23A DEC C         ; Decrement #REGc; number of status panel character rows
                     ; to display.
 $A23B JR NZ,$A228   ; Loop until the status panel has been displayed.
 $A23D JP $A1AE      ; Display the score in the status panel.

; Colour Status Panel
;
; Colours the status panel. The colour of the status panel is based on the
; colour of the screen.
; .
; #TABLE(default)
; { =h Screen Colour     | =h Scroll Colour     | =h Rosette Colour     }
; { Bright red\black     | Cyan\black           | Bright red\black      }
; { Bright magenta\black | Green\black          | Bright magenta\black  }
; { Bright green\black   | Magenta\black        | Bright green\black    }
; { Bright cyan\black    | Red\black            | Bright cyan\black     }
; { Bright yellow\black  | Bright green\black   | Bright yellow\black   }
; { Bright white\black   | Bright green\black   | Bright white\black    }
; TABLE#
; .
; Used by the routine at #R$9117.
@label=ColourStatusPanel
c$A240 LD HL,$00C0   ; #REGhl=(Y,X) position of the status panel (Y=00, X=192).
 $A243 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A246 LD BC,$0818   ; #REGb=$08; width (in character columns) of the status
                     ; panel. #REGc=$18; height (in character rows) of the
                     ; status panel.
 $A249 LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
 $A24C CPL           ; Invert the current colour attribute in #REGa.
 $A24D AND $07       ; Mask the ink colour in #REGa.
 $A24F CP $02        ; {If the screen ink colour was yellow or white, then set
 $A251 JR NC,$A255   ; the scroll colour to bright green/black.}
 $A253 LD A,$44      ; #REGa=$44; bright green/black.
@label=ColourStatusPanelScroll
*$A255 LD E,A        ; #REGe=colour attribute of the scroll.
 $A256 PUSH DE       ; Store #REGde. #REGe=colour attribute of the scroll.
; #TABLE(default)
; { I | #REGb  | The width (in character columns) of the status panel ($08). }
; { I | #REGc  | The number of status panel character rows to colour. }
; { I | #REGe  | The colour attribute of the scroll. }
; { I | #REGhl | Screen attribute address to colour the status panel at. }
; TABLE#
@label=ColourStatusPanelLoop
*$A257 PUSH BC       ; Store #REGbc. #REGb=width (in character columns) of the
                     ; status panel ($08). #REGc=number of status panel
                     ; character rows to colour.
 $A258 PUSH HL       ; Store #REGhl; screen attribute address to colour the
                     ; status panel at.
; #TABLE(default)
; { I | #REGb  | The number of status panel character columns to colour. }
; { I | #REGc  | The number of status panel character rows to colour. }
; { I | #REGe  | The colour attribute of the scroll. }
; { I | #REGhl | Screen attribute address to colour the status panel at. }
; TABLE#
@label=ColourStatusPanelRowLoop
*$A259 LD (HL),E     ; Set screen attribute in #REGhl to #REGe; set the colour
                     ; attribute of the scroll.
 $A25A INC L         ; #REGhl=next screen attribute address to set the next
                     ; colour attribute of the scroll.
 $A25B DJNZ $A259    ; Loop until the row of the status panel has been
                     ; coloured.
 $A25D POP HL        ; #REGhl=initial screen attribute address to colour the
                     ; status panel at.
 $A25E LD BC,$0020   ; #REGbc=$0020; maximum number of character columns in a
                     ; character row.
 $A261 ADD HL,BC     ; #REGhl=calculated screen attribute address of the next
                     ; character row.
 $A262 POP BC        ; Restore #REGbc. #REGb=number of status panel character
                     ; to colour. #REGc=number of status panel character rows
                     ; to colour.
 $A263 DEC C         ; Decrement #REGc; number of status panel character rows
                     ; to colour.
 $A264 JR NZ,$A257   ; Loop until the status panel has been coloured.
@label=ColourStatusPanelRosette
 $A266 LD HL,$90C8   ; #REGhl=(Y,X) position of the status panel rosette
                     ; (Y=144, X=200).
 $A269 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A26C LD A,($5E1A)  ; #REGa=contents of #R$5E1A.
 $A26F LD BC,$0303   ; #REGb=$03; width (in character columns) of the status
                     ; panel rosette. #REGc=$03; height (in character rows) of
                     ; the status panel rosette.
 $A272 CALL $809A    ; {Set the colour of the status panel rosette to the same
 $A275 INC L         ; colour as the screen.
 $A276 LD (HL),A     ; }
@label=ColourStatusPanelRosetteRibbon
 $A277 ADD HL,DE     ; #REGhl=calculated screen attribute address of the status
                     ; panel rosette ribbon.
 $A278 LD BC,$0202   ; #REGb=$02; width (in character columns) of the status
                     ; panel rosette ribbon. #REGc=$02; height (in character
                     ; rows) of the status panel rosette ribbon.
 $A27B CALL $809A    ; Set the colour of the status panel rosette ribbon to the
                     ; same colour as the screen.
@label=ColourStatusPanelRosetteCentre
 $A27E LD HL,$98D0   ; #REGhl=(Y,X) position of the status panel rosette centre
                     ; (Y=152, X=208).
 $A281 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A284 POP DE        ; Restore #REGde. #REGe=colour attribute of the scroll.
 $A285 LD (HL),E     ; Set the colour of the status panel rosette centre to the
                     ; same colour as the scroll.
@label=ColourStatusPanelPlayerLives
 $A286 LD HL,$7DC8   ; #REGhl=(Y,X) position of the status panel character
                     ; lives (Y=125, X=200).
 $A289 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A28C LD BC,$0603   ; #REGb=$06; width (in character columns) of the status
                     ; panel character lives. #REGc=$03; height (in character
                     ; rows) of the status panel character lives.
 $A28F LD A,$47      ; #REGa=$47; bright white/black.
 $A291 CALL $809A    ; Set the colour of the status panel character lives.
@label=ColourStatusPanelChicken
 $A294 LD HL,$5FC8   ; #REGhl=(Y,X) position of the status panel chicken (Y=95,
                     ; X=200).
 $A297 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A29A LD BC,$0604   ; #REGb=$06; width (in character columns) of the status
                     ; panel chicken. #REGc=$04; height (in character rows) of
                     ; the status panel chicken.
 $A29D LD A,$46      ; #REGa=$46; bright yellow/black.
 $A29F CALL $809A    ; Set the colour of the status panel chicken.
@label=ColourStatusPanelScore
 $A2A2 LD HL,$48C8   ; #REGhl=(Y,X) position of the status panel score text
                     ; (Y=72, X=200).
 $A2A5 CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A2A8 LD BC,$0601   ; #REGb=$06; width (in character columns) of the status
                     ; panel score text. #REGc=$01; height (in character rows)
                     ; of the status panel score text.
 $A2AB LD A,$45      ; #REGa=$45; bright cyan/black.
 $A2AD CALL $809A    ; Set the colour of the status panel score text.
 $A2B0 LD BC,$0601   ; #REGb=$06; width (in character columns) of the status
                     ; panel score. #REGc=$01; height (in character rows) of
                     ; the status panel score.
 $A2B3 LD A,$47      ; #REGa=$47; bright white/black.
 $A2B5 CALL $809A    ; Set the colour of the status panel score.
@label=ColourStatusPanelTime
 $A2B8 LD HL,$38C8   ; #REGhl=(Y,X) position of the status panel time text
                     ; (Y=56, X=200).
 $A2BB CALL $9BD2    ; Calculate the screen attribute address of the (Y,X)
                     ; position in #REGhl.
 $A2BE LD BC,$0601   ; #REGb=$06; width (in character columns) of the status
                     ; panel time text. #REGc=$01; height (in character rows)
                     ; of the status panel time text.
 $A2C1 LD A,$43      ; #REGa=$43; bright magenta/black.
 $A2C3 CALL $809A    ; Set the colour of the status panel time text.
 $A2C6 LD BC,$0601   ; #REGb=$06; width (in character columns) of the status
                     ; panel time. #REGc=$01; height (in character rows) of the
                     ; status panel time.
 $A2C9 LD A,$47      ; #REGa=$47; bright white/black.
 $A2CB JP $809A      ; Set the colour of the status panel time.

; Display Player Lives In Status Panel
;
; Displays the player's lives in the status panel. The player's lives are
; represented by the player's sprite; 1 for each remaining life.
; .
; Used by the routines at #R$7D9A and #R$9443.
; .
; #TABLE(default)
; { I | #REGix | Address of a sprite's data structure. }
; TABLE#
@label=DisplayPlayerLives
c$A2CE PUSH IX         ; Store #REGix.
 $A2D0 LD IX,$A17D     ; #REGix=address of #R$A17D.
 $A2D4 LD A,($5E00)    ; #REGa=contents of #R$5E00.
 $A2D7 RLCA            ; {#REGa=graphic index in #R$A4BE of the player's sprite
 $A2D8 AND $30         ; ($01=#R$AE0C, $11=#R$B87C, $21=#R$B614).
 $A2DA OR $01          ; }
 $A2DC LD (IX+$00),A   ; Set the graphic index of the sprite data in #REGix to
                       ; #REGa.
 $A2DF LD (IX+$05),$47 ; Set the colour attribute of the sprite data in #REGix
                       ; to $47 (bright white/black).
 $A2E3 LD HL,$8DC8     ; #REGhl=(Y,X) position of the player's character in the
                       ; status panel (Y=141,X=200).
 $A2E6 LD (IX+$03),L   ; Set the X coordinate of the sprite data in #REGix to
                       ; #REGl.
 $A2E9 LD (IX+$04),H   ; Set the Y coordinate of the sprite data in #REGix to
                       ; #REGh.
 $A2EC LD A,($5E21)    ; {#REGc=contents of #R$5E21; current player's lives.
 $A2EF LD C,A          ; }
 $A2F0 LD B,$03        ; #REGb=$03; maximum number of player sprites (or
                       ; blanks) displayed in the status panel.
; #TABLE(default)
; { I | #REGb   | The number of player sprites (or blanks) to be displayed in
; the status panel. }
; { I | #REGc   | The number of player lives, i.e. the actual number of player
; sprites to be displayed in the status panel. }
; TABLE#
@label=DisplayPlayerLivesLoop
*$A2F2 PUSH BC         ; Store #REGbc.
 $A2F3 CALL $A185      ; Clear (or bank) the player sprite area.
 $A2F6 LD A,C          ; #REGa=number of player lives.
 $A2F7 AND A           ; {If there are no more player lives, then don't display
 $A2F8 JR Z,$A2FD      ; the player sprite.}
 $A2FA CALL $9F4A      ; Display the player sprite (without mask).
@label=SkipDisplayPlayerLivesSprite
*$A2FD LD A,(IX+$03)   ; #REGa=X coordinate of the sprite data in #REGix.
 $A300 ADD A,$10       ; #REGa=X coordinate of the next player sprite (or
                       ; blank) to display in the status panel.
 $A302 LD (IX+$03),A   ; Set the X coordinate of the sprite data in #REGix to
                       ; #REGa.
 $A305 POP BC          ; Restore #REGbc.
 $A306 DEC C           ; Decrement #REGc; one less player life.
 $A307 JP P,$A30C      ; If there are still player lives, then skip.
 $A30A LD C,$00        ; #REGc=$00; no more player lives, i.e. no more player
                       ; sprites to be displayed in the status panel.
@label=SkipNoMorePlayerLives
*$A30C DJNZ $A2F2      ; Loop until all the player sprites (or blanks) have
                       ; been displayed in the status panel.
 $A30E POP IX          ; Restore #REGix.
 $A310 RET             ;

; Display Game Selection Menu Graphics
;
; Displays the game selection menu graphics.
; .
; #TABLE
; { 1 KEYBOARD }
; { 2 KEMPSTON JOYSTICK }
; { 3 CURSOR   JOYSTICK }
; { 4 KNIGHT }
; { 5 WIZARD }
; { 6 SERF }
; { 0 START GAME }
; TABLE#
; .
; Used by the routine at #R$7C29.
@label=DisplayGameSelectionMenuGraphics
c$A311 LD IX,$A17D   ; #REGix=address of #R$A17D.
 $A315 LD HL,$A331   ; #REGhl=address of #R$A331.
 $A318 LD B,$09      ; #REGb=$09; there are 9 game selection menu graphics.
; Displays a game selection menu graphic.
; .
; #TABLE(default)
; { I | #REGb  | The number of game selection menu graphics to display. }
; { I | #REGhl | Address of the current game selection menu sprite in #R$A331.
; }
; { I | #REGix | Address of #R$A17D. }
; TABLE#
@label=DisplayGameSelectionMenuGraphicLoop
*$A31A PUSH BC       ; Store #REGbc. #REGb=number of game selection menu
                     ; graphics to display.
 $A31B LD DE,$A17D   ; #REGde=address of #R$A17D.
 $A31E LD BC,$0008   ; #REGbc=$0008; size (in bytes) of a sprite data
                     ; structure.
 $A321 LDIR          ; Copy #REGhl to #REGde, i.e copy the current game
                     ; selection menu sprite from #R$A331 to #R$A17D.
 $A323 PUSH HL       ; Store #REGhl; address of the next game selection menu
                     ; sprite in #R$A331.
 $A324 PUSH DE       ; Store #REGde.
 $A325 CALL $9F4A    ; Display the game selection menu sprite (without mask).
 $A328 CALL $A00E    ; Colour the game selection menu sprite.
 $A32B POP DE        ; Restore #REGde.
 $A32C POP HL        ; Restore #REGhl; address of the current game selection
                     ; menu sprite in #R$A331.
 $A32D POP BC        ; Restore #REGbc; #REGb=number of game selection menu
                     ; graphics to display.
 $A32E DJNZ $A31A    ; Loop until all the game selection menu graphics are
                     ; displayed.
 $A330 RET           ;

; Game Selection Menu Graphic Lookup Table
;
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A4BE. }
; { $01         | Screen                | Screen number. }
; { $02         |                       | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Colour Atttribute     | Colour attribute. }
; { $06         |                       | ??? }
; { $07         |                       | ??? }
; TABLE#
@label=GameSelectionMenuGraphicLookupTable
b$A331 DEFB $32,$00,$00,$20,$4F,$46,$00,$00 ; #R$BBDC.
 $A339 DEFB $33,$00,$00,$30,$4F,$46,$00,$00 ; #R$BC05.
 $A341 DEFB $4A,$00,$00,$20,$37,$44,$00,$00 ; #R$BC70.
 $A349 DEFB $4B,$00,$00,$30,$37,$44,$00,$00 ; #R$BC9F.
 $A351 DEFB $48,$00,$00,$20,$1C,$43,$00,$00 ; #R$BC2E.
 $A359 DEFB $49,$00,$00,$30,$1C,$43,$00,$00 ; #R$BC4F.
 $A361 DEFB $01,$00,$00,$28,$67,$47,$00,$00 ; #R$AE0C.
 $A369 DEFB $11,$00,$00,$28,$7F,$47,$00,$00 ; #R$B87C.
 $A371 DEFB $21,$00,$00,$28,$97,$47,$00,$00 ; #R$B614.

; Calculate Initial Decision Variable
;
; Calculates the initial decision variable when drawing a line from a start
; point to an end point.
; .
; Used by the routine at #R$9C79.
; .
; #TABLE(default)
; { I | #REGd  | $00. }
; { I | #REGe  | Maximum delta. }
; { I | #REGh  | Minimum delta. }
; { I | #REGl  | $00. }
; { O | #REGde | Minimum delta. }
; { O | #REGhl | Decision Variable. }
; TABLE#
@label=CalculateInitialDecisionVariable
c$A379 LD L,H        ; {#REGhl=minimum delta.
 $A37A LD H,$00      ; }
 $A37C EXX           ; #REGde'=maximum delta. #REGhl'=minimum delta.
 $A37D LD HL,$0000   ; #REGhl=$0000; initial decision variable.
 $A380 LD B,$08      ; #REGb=$08; loop count.
; #TABLE(default)
; { I | #REGb   | Loop counter. }
; { I | #REGde' | Maximum delta. }
; { i | #REGhl  | Decision Variable. }
; { i | #REGhl' | Minimum delta. }
; TABLE#
@label=CalculateInitialDecisionVariableLoop
*$A382 EXX           ; #REGde=maximum delta. #REGhl=minimum delta.
                     ; #REGhl'=decision variable.
 $A383 SLA L         ; {Double the minimum delta.
 $A385 RL H          ; }
 $A387 PUSH HL       ; Store #REGhl; 2 x minimum delta.
 $A388 AND A         ; Clear carry flag!
 $A389 SBC HL,DE     ; {If the maximum delta is greater than 2 x minimum delta,
 $A38B JR C,$A399    ; then jump.}
 $A38D POP AF        ; Discard stored #REGhl.
 $A38E EXX           ; #REGde'=maximum delta. #REGhl=decision variable.
                     ; #REGhl'=minimum delta.
 $A38F ADD HL,HL     ; Double the decision variable in #REGhl.
 $A390 INC HL        ; Increment the decision variable in #REGhl.
@label=CalculateDecisionInitialVariableNextLoop
*$A391 DJNZ $A382    ; Loop until all bits are processed.
 $A393 PUSH HL       ; Store #REGhl; the decision variable.
 $A394 EXX           ; #REGde=maximum delta. #REGhl=minimum delta.
                     ; #REGhl'=decision variable.
 $A395 LD E,L        ; {#REGde=minimum delta.
 $A396 LD D,H        ; }
 $A397 POP HL        ; #REGhl=decision variable.
 $A398 RET           ;
*$A399 POP HL        ; Restore #REGhl; 2 x minimum delta.
 $A39A EXX           ; #REGde'=maximum delta. #REGhl=decision variable.
                     ; #REGhl'=2 x minimum delta.
 $A39B ADD HL,HL     ; Double the decision variable in #REGhl.
 $A39C JR $A391      ;

; Negate Decision Variable
;
; Negates the decision variable when drawing a line from a start point to an
; end point.
; .
; Used by the routine at #R$9C79.
; .
; #TABLE(default)
; { I | #REGhl | Slope error. }
; { O | #REGhl | Negated decision variable. }
; TABLE#
@label=NegateDecisionVariable
c$A39E PUSH DE       ; Store #REGde.
 $A39F EX DE,HL      ; #REGde=decision variable.
 $A3A0 LD HL,$0000   ; #REGhl=$0000.
 $A3A3 AND A         ; Clear carry flag!
 $A3A4 SBC HL,DE     ; Negate the decision variable.
 $A3A6 POP DE        ; Restore #REGde.
 $A3A7 RET           ;

; Beep
;
; Beeps.
; .
; Used by the routines at #R$9731, #R$A41B, #R$A427, #R$A438 and #R$A445.
@label=Beep
c$A3A8 LD C,$01      ; #REGc=$01; duration.
; Generates a sound.
; .
; This entry point is used by the routines at #R$A3BD, #R$A3C2, #R$A3C7,
; #R$A3E0, #R$A3EF, #R$A408, #R$A45F, #R$A48B and #R$A4B0.
; .
; #TABLE(default)
; { I | #REGb | Frequency. }
; { I | #REGc | Counter (duration). }
; { I | #REGd | Frequency. }
; TABLE#
@label=GenerateSound
*$A3AA LD A,$10      ; #REGa=$10; set EAR bit.
 $A3AC OUT ($FE),A   ; Turn on speaker.
 $A3AE PUSH BC       ; Store #REGbc. #REGb=frequency. #REGc=duration.
@label=GenerateSoundSpeakerOnLoop
*$A3AF DJNZ $A3AF    ; Pause for #REGb with the speaker on.
 $A3B1 POP BC        ; Restore #REGbc. #REGb=frequency. #REGc=duration.
 $A3B2 PUSH BC       ; Store #REGbc. #REGb=frequency. #REGc=duration.
 $A3B3 XOR A         ; Clear #REGa; reset EAR bit.
 $A3B4 OUT ($FE),A   ; Turn off speaker.
@label=GenerateSoundSpeakerOffLoop
*$A3B6 DJNZ $A3B6    ; Pause for #REGb with the speaker off.
 $A3B8 POP BC        ; Restore #REGbc. #REGb=frequency. #REGc=duration.
 $A3B9 DEC C         ; {Jump if not finished generating the sound.
 $A3BA JR NZ,$A3AA   ; }
 $A3BC RET           ;

; Play Picked Up Collectable Sound
;
; Plays the picked up collectable sound. Called when the player has collected
; an item.
; .
; Used by the routine at #R$9326.
@label=PlayPickedupCollectableItemSound
c$A3BD LD BC,$4040   ; #REGb=$40; frequency. #REGc=$40; duration.
 $A3C0 JR $A3AA      ; Generate sound.

; Play Dropped Collectable Sound
;
; Plays the dropped collectable sound. Called when the player has dropped an
; item.
; .
; Used by the routine at #R$9358.
@label=PlayDroppedCollectableItemSound
c$A3C2 LD BC,$2080   ; #REGb=$20; frequency. #REGc=$80; duration.
 $A3C5 JR $A3AA      ; Generate sound.

; Play Player Walking Sound
;
; Plays the player walking sound. The player walking sound is played every
; second step.
; .
; Used by the routines at #R$80D2, #R$8DC4 and #R$8E26.
@label=PlayPlayerWalkingSound
c$A3C7 LD HL,$5E2F   ; #REGhl=address of #R$5E2F.
 $A3CA INC (HL)      ; Increment the contents of #R$5E2F.
 $A3CB LD A,(HL)     ; #REGa=contents of #R$5E2F.
 $A3CC BIT 1,A       ; {If bit1 is not set, then don't play the player walking
 $A3CE JR Z,$A3D8    ; sound.}
 $A3D0 AND $01       ; {If bit0 is not set, the don't play the player walking
 $A3D2 RET Z         ; sound.}
 $A3D3 LD BC,$4004   ; #REGb=$40; frequency. #REGc=$04; duration.
 $A3D6 JR $A3AA      ; Generate sound.
@label=SkipPlayPlayerWalkingSound
*$A3D8 AND $01       ; {If bit0 is not set, the don't play the alternative
 $A3DA RET Z         ; player walking sound.}
@label=PlayPlayerWalkingSound1
 $A3DB LD BC,$6004   ; #REGb=$60; frequency. #REGc=$04; duration.
 $A3DE JR $A3AA      ; Generate sound.

; Play Game Starting Sound
;
; Plays the game starting sound.
; .
; Used by the routine at #R$8C8C.
@label=PlayGameStartingSound
c$A3E0 LD BC,$8060   ; #REGb=$80; frequency. #REGc=$60; duration.
 $A3E3 JR $A3AA      ; Generate sound.

; Routine at 41957
;
; Used by the routines at #R$85B2 and #R$988B.
c$A3E5 LD BC,$6410   ; #REGb=$64; graphic index to #R$AEEA in #R$A4BE.
                     ; #REGc=$10; screen number.
; This entry point is used by the routines at #R$A403 and #R$A485.
; #TABLE(default)
; { I | #REGb | The graphic index in #R$A4BE. }
; { I | #REGc | The screen number. }
; TABLE#
@label=InitialiseEAA0
*$A3E8 LD HL,$EAA0   ; #REGhl=address of the graphic index of #R$EAA0.
 $A3EB LD (HL),B     ; Set the graphic index in #REGhl to #REGb.
 $A3EC INC HL        ; #REGhl=address of the screen number of #R$EAA0.
 $A3ED LD (HL),C     ; Set the screen number in #REGhl to #REGc.
 $A3EE RET           ;

; Play Nasty Collision Sound
;
; Plays the nasty collision sound. Called when a nasty has collided with a
; player (and vice-versa).
; .
; #TABLE(default)
; { I | #REGix | Address of ???. }
; TABLE#
@label=PlayNastyCollisionSound
c$A3EF DEC (IX+$01)  ;
 $A3F2 JR Z,$A3FE    ;
 $A3F4 LD A,(IX+$01) ;
 $A3F7 LD C,A        ; #REGc=duration.
 $A3F8 XOR $43       ; {#REGb=calculated frequency.
 $A3FA LD B,A        ; }
 $A3FB JP $A3AA      ; Generate sound.

; Clear Sprite Graphic Index
;
; Clears the current sprite's graphic index.
; .
; Used by the routines at #R$A3EF, #R$A408 and #R$A48B.
; .
; #TABLE(default)
; { I | #REGix | Address of the current sprite's data structure. }
; TABLE#
@label=ClearSpriteGraphicIndex
c$A3FE LD (IX+$00),$00 ; Clear the graphic index of the sprite data in #REGix.
 $A402 RET             ;

; Used by the routine at #R$9117.
;
; Used by the routine at #R$9117.
c$A403 LD BC,$650A   ; #REGb=$65; graphic index to #R$AEEA in #R$A4BE.
                     ; #REGc=$0A; screen number.
 $A406 JR $A3E8      ;

; Play Player Entered Room Sound
;
; Plays the player entered room sound.
; .
; #TABLE(default)
; { I | #REGix | Address of ???. }
; TABLE#
@label=PlayPlayerEnteredRoomSound
c$A408 DEC (IX+$01)  ;
 $A40B JR Z,$A3FE    ;
 $A40D LD A,(IX+$01) ;
 $A410 LD C,A        ; #REGc=duration.
 $A411 RLCA          ; {#REGb=calculated frequency.
 $A412 RLCA          ;
 $A413 RLCA          ;
 $A414 CPL           ;
 $A415 XOR $40       ;
 $A417 LD B,A        ; }
 $A418 JP $A3AA      ; Generate sound.

; Play Knight Fired Weapon Sound
;
; Plays the knight fired weapon sound.
; .
; Used by the routine at #R$8134.
@label=PlayKnightFiredWeaponSound
c$A41B LD D,$0C      ; #REGd=$0C; loop counter.
@label=PlayKnightFiredWeaponSoundLoop
*$A41D LD A,D        ; {#REGb=calculated frequency.
 $A41E RRCA          ;
 $A41F LD B,A        ; }
 $A420 CALL $A3A8    ; Beep.
 $A423 DEC D         ; {Loop until the sound has been played.
 $A424 JR NZ,$A41D   ; }
 $A426 RET           ;

; Play Serf Fired Weapon Sound
;
; Plays the serf fired weapon sound.
; .
; Used by the routine at #R$8283.
@label=PlaySerfFiredWeaponSound
c$A427 LD D,$10      ; #REGd=$10; loop counter.
@label=PlaySerfFiredWeaponSoundLoop
*$A429 LD A,D        ; {#REGb=calculated frequency.
 $A42A RLCA          ;
 $A42B RLCA          ;
 $A42C XOR $07       ;
 $A42E RLCA          ;
 $A42F RLCA          ;
 $A430 LD B,A        ; }
 $A431 CALL $A3A8    ; Beep.
 $A434 DEC D         ; {Loop until the sound has been played.
 $A435 JR NZ,$A429   ; }
 $A437 RET           ;

; Play Wizard Fired Weapon Sound
;
; Plays the wizard fired weapon sound.
; .
; Used by the routine at #R$814B.
@label=PlayWizardFiredWeaponSound
c$A438 LD D,$08      ; #REGd=$08; loop counter.
@label=PlayWizardFiredWeaponSoundLoop
*$A43A LD A,D        ; {#REGb=calculated frequency.
 $A43B CPL           ;
 $A43C RLCA          ;
 $A43D LD B,A        ; }
 $A43E CALL $A3A8    ; Beep.
 $A441 DEC D         ; {Loop until the sound has been played.
 $A442 JR NZ,$A43A   ; }
 $A444 RET           ;

; Play Nasty Dead Sound
;
; Plays the nasty dead sound.
; .
; Used by the routine at #R$81F0.
@label=PlayNastyDeadSound
c$A445 LD A,($5E25)  ;
 $A448 INC A         ;
 $A449 RLCA          ;
 $A44A RLCA          ;
 $A44B RLCA          ;
 $A44C RLCA          ;
 $A44D OR $0F        ;
 $A44F AND $7F       ;
 $A451 LD D,A        ;
@label=PlayNastyDeadSoundLoop
*$A452 LD A,D        ; {#REGb=calculated frequency.
 $A453 XOR $20       ;
 $A455 LD B,A        ; }
 $A456 CALL $A3A8    ; Beep.
 $A459 DEC D         ; {If the sound has been played, then we're done.
 $A45A RET Z         ; }
 $A45B DEC D         ; {If the sound has been played, then we're done.
 $A45C RET Z         ; }
 $A45D JR $A452      ; Loop until the sound has been played.

; Play Player Initialised/Terminated Sound
;
; Plays the player initialised/terminated sound.
;
; Used by the routine at #R$8CB7.
c$A45F LD A,(IX+$06) ;
 $A462 CPL           ; {#REGb=calculated frequency.
 $A463 RLCA          ;
 $A464 AND $3F       ;
 $A466 OR $40        ;
 $A468 LD B,A        ; }
 $A469 LD C,$10      ; #REGc=$10; duration.
 $A46B JP $A3AA      ; Generate sound.

; Play Door Sound
;
; Used by the routines at #R$917D and #R$91C5.
@label=PlayDoorSound
c$A46E LD BC,$0830   ;
 $A471 LD HL,$0000   ;
*$A474 LD E,(HL)     ;
 $A475 INC HL        ;
 $A476 PUSH BC       ;
@label=PlayDoorSoundLoop
*$A477 RRC E         ;
 $A479 LD A,E        ;
 $A47A AND $10       ;
 $A47C OUT ($FE),A   ;
 $A47E DJNZ $A477    ;
 $A480 POP BC        ;
 $A481 DEC C         ;
 $A482 JR NZ,$A474   ;
 $A484 RET           ;

; Routine at 42117
;
; Used by the routine at #R$8C63.
c$A485 LD BC,$A010   ; #REGb=$A0; graphic index to #R$AEEA in #R$A4BE.
                     ; #REGc=$10; screen number.
 $A488 JP $A3E8      ;

; Play Increase Health Sound
;
; Plays the picked up collectable sound. Called when the player has collected a
; health item.
@label=PlayIncreaseHealthSound
c$A48B DEC (IX+$01)  ;
 $A48E JP M,$A3FE    ;
 $A491 LD C,(IX+$01) ; {#REGbc=offset in #R$A4A0 of the frequency.
 $A494 LD B,$00      ; }
 $A496 LD HL,$A4A0   ; #REGhl=address of #R$A4A0.
 $A499 ADD HL,BC     ; #REGhl=address in #R$A4A0 of the frequency.
 $A49A LD B,(HL)     ; #REGb=frequency in #R$A4A0.
 $A49B LD C,$08      ; #REGc=$08; duration.
 $A49D JP $A3AA      ; Generate sound.

; Collected Health Item Frequency Table
@label=CollectedHealthItemFrequencyTable
b$A4A0 DEFB $80,$90,$80,$90,$80,$90,$80,$90
 $A4A8 DEFB $80,$70,$60,$50,$40,$30,$20,$10

; Routine at 42160
;
; Used by the routine at #R$81F0.
c$A4B0 LD D,$40      ; #REGd=$40; loop counter.
 $A4B2 DEC D         ; {If the sound has been played, then we're done.
 $A4B3 RET Z         ; }
 $A4B4 LD A,D        ; {#REGb=calculated frequency.
 $A4B5 RRCA          ;
 $A4B6 RRCA          ;
 $A4B7 RRCA          ;
 $A4B8 LD B,A        ; }
 $A4B9 LD C,$04      ; #REGc=$04; duration.
 $A4BB JP $A3AA      ; Generate sound.

; Sprite Graphic Lookup Table
;
; Order is important, as the same index value used to calculate the required
; graphic is used in #R$7EE6.
@label=SpriteGraphicLookupTable
w$A4BE DEFW $AE0C    ; $01.
 $A4C0 DEFW $AE31    ; $02.
 $A4C2 DEFW $AE56    ; $03.
 $A4C4 DEFW $AE31    ; $04.
 $A4C6 DEFW $AE7B    ; $05.
 $A4C8 DEFW $AEA0    ; $06.
 $A4CA DEFW $AEC5    ; $07.
 $A4CC DEFW $AEA0    ; $08.
 $A4CE DEFW $AD9D    ; $09.
 $A4D0 DEFW $ADC2    ; $0A.
 $A4D2 DEFW $ADE7    ; $0B.
 $A4D4 DEFW $ADC2    ; $0C.
 $A4D6 DEFW $AD2E    ; $0D.
 $A4D8 DEFW $AD53    ; $0E.
 $A4DA DEFW $AD78    ; $0F.
 $A4DC DEFW $AD53    ; $10.
 $A4DE DEFW $B87C    ; $11.
 $A4E0 DEFW $B8A5    ; $12.
 $A4E2 DEFW $B8CE    ; $13.
 $A4E4 DEFW $B8A5    ; $14.
 $A4E6 DEFW $B8F7    ; $15.
 $A4E8 DEFW $B920    ; $16.
 $A4EA DEFW $B949    ; $17.
 $A4EC DEFW $B920    ; $18.
 $A4EE DEFW $B801    ; $19.
 $A4F0 DEFW $B82A    ; $1A.
 $A4F2 DEFW $B853    ; $1B.
 $A4F4 DEFW $B82A    ; $1C.
 $A4F6 DEFW $B786    ; $1D.
 $A4F8 DEFW $B7AF    ; $1E.
 $A4FA DEFW $B7D8    ; $1F.
 $A4FC DEFW $B7AF    ; $20.
 $A4FE DEFW $B614    ; $21.
 $A500 DEFW $B639    ; $22.
 $A502 DEFW $B65E    ; $23.
 $A504 DEFW $B639    ; $24.
 $A506 DEFW $B683    ; $25.
 $A508 DEFW $B6A8    ; $26.
 $A50A DEFW $B6CD    ; $27.
 $A50C DEFW $B6A8    ; $28.
 $A50E DEFW $B5A5    ; $29.
 $A510 DEFW $B5CA    ; $2A.
 $A512 DEFW $B5EF    ; $2B.
 $A514 DEFW $B5CA    ; $2C.
 $A516 DEFW $B536    ; $2D.
 $A518 DEFW $B55B    ; $2E.
 $A51A DEFW $B580    ; $2F.
 $A51C DEFW $B55B    ; $30.
 $A51E DEFW $AEEC    ; $31.
 $A520 DEFW $BBDC    ; $32.
 $A522 DEFW $BC05    ; $33.
 $A524 DEFW $BB60    ; $34.
 $A526 DEFW $BB7F    ; $35.
 $A528 DEFW $BB7F    ; $36.
 $A52A DEFW $BBBD    ; $37.
 $A52C DEFW $BA16    ; $38.
 $A52E DEFW $B9FB    ; $39.
 $A530 DEFW $B9E2    ; $3A.
 $A532 DEFW $B98B    ; $3B.
 $A534 DEFW $B9A6    ; $3C.
 $A536 DEFW $B9C7    ; $3D.
 $A538 DEFW $B972    ; $3E.
 $A53A DEFW $BA37    ; $3F.
 $A53C DEFW $BA58    ; $40.
 $A53E DEFW $BA79    ; $41.
 $A540 DEFW $BA9A    ; $42.
 $A542 DEFW $BABB    ; $43.
 $A544 DEFW $BADC    ; $44.
 $A546 DEFW $BAFD    ; $45.
 $A548 DEFW $BB1E    ; $46.
 $A54A DEFW $BB3F    ; $47.
 $A54C DEFW $BC2E    ; $48.
 $A54E DEFW $BC4F    ; $49.
 $A550 DEFW $BC70    ; $4A.
 $A552 DEFW $BC9F    ; $4B.
 $A554 DEFW $BD30    ; $4C.
 $A556 DEFW $BD57    ; $4D.
 $A558 DEFW $D2C0    ; $4E.
 $A55A DEFW $D2D7    ; $4F.
 $A55C DEFW $C124    ; $50.
 $A55E DEFW $C1AA    ; $51.
 $A560 DEFW $C1CB    ; $52.
 $A562 DEFW $C1F4    ; $53.
 $A564 DEFW $C219    ; $54.
 $A566 DEFW $AFF8    ; $55.
 $A568 DEFW $B019    ; $56.
 $A56A DEFW $AF6C    ; $57.
 $A56C DEFW $C23A    ; $58.
 $A56E DEFW $C253    ; $59.
 $A570 DEFW $C26E    ; $5A.
 $A572 DEFW $C28D    ; $5B.
 $A574 DEFW $C310    ; $5C.
 $A576 DEFW $C32D    ; $5D.
 $A578 DEFW $C34A    ; $5E.
 $A57A DEFW $C36B    ; $5F.
 $A57C DEFW $C38C    ; $60.
 $A57E DEFW $C3A3    ; $61.
 $A580 DEFW $C3B6    ; $62.
 $A582 DEFW $C3DF    ; $63.
 $A584 DEFW $AEEA    ; $64.
 $A586 DEFW $AEEA    ; $65. Holds player weapon initialise sprite.
 $A588 DEFW $AEEA    ; $66. Holds player initialise sprite.
 $A58A DEFW $AEEA    ; $67.
 $A58C DEFW $C408    ; $68.
 $A58E DEFW $C429    ; $69.
 $A590 DEFW $C44A    ; $6A.
 $A592 DEFW $C46F    ; $6B.
 $A594 DEFW $C5F8    ; $6C.
 $A596 DEFW $C60F    ; $6D.
 $A598 DEFW $C62A    ; $6E.
 $A59A DEFW $C649    ; $6F.
 $A59C DEFW $CB46    ; $70.
 $A59E DEFW $CB77    ; $71.
 $A5A0 DEFW $CBA8    ; $72.
 $A5A2 DEFW $CB77    ; $73.
 $A5A4 DEFW $CBD9    ; $74.
 $A5A6 DEFW $CC0A    ; $75.
 $A5A8 DEFW $CC3B    ; $76.
 $A5AA DEFW $CC0A    ; $77.
 $A5AC DEFW $CC6C    ; $78.
 $A5AE DEFW $CC9D    ; $79.
 $A5B0 DEFW $CCCE    ; $7A.
 $A5B2 DEFW $CC9D    ; $7B.
 $A5B4 DEFW $CCFF    ; $7C.
 $A5B6 DEFW $CD30    ; $7D.
 $A5B8 DEFW $CD61    ; $7E.
 $A5BA DEFW $CD30    ; $7F.
 $A5BC DEFW $AF0D    ; $80.
 $A5BE DEFW $AF2E    ; $81.
 $A5C0 DEFW $AF43    ; $82.
 $A5C2 DEFW $C16E    ; $83.
 $A5C4 DEFW $AF95    ; $84.
 $A5C6 DEFW $AFB6    ; $85.
 $A5C8 DEFW $AFD7    ; $86.
 $A5CA DEFW $C18F    ; $87.
 $A5CC DEFW $C14D    ; $88.
 $A5CE DEFW $CDE2    ; $89.
 $A5D0 DEFW $CDBD    ; $8A.
 $A5D2 DEFW $D29F    ; $8B.
 $A5D4 DEFW $D1D5    ; $8C.
 $A5D6 DEFW $D1EC    ; $8D.
 $A5D8 DEFW $D20B    ; $8E.
 $A5DA DEFW $CD92    ; $8F.
 $A5DC DEFW $CE01    ; $90.
 $A5DE DEFW $CE2E    ; $91.
 $A5E0 DEFW $CE5B    ; $92.
 $A5E2 DEFW $CE88    ; $93.
 $A5E4 DEFW $CEB5    ; $94.
 $A5E6 DEFW $CEDC    ; $95.
 $A5E8 DEFW $CF03    ; $96.
 $A5EA DEFW $CF2A    ; $97.
 $A5EC DEFW $CF51    ; $98.
 $A5EE DEFW $CF78    ; $99.
 $A5F0 DEFW $CF93    ; $9A.
 $A5F2 DEFW $CFAE    ; $9B.
 $A5F4 DEFW $D3D3    ; $9C.
 $A5F6 DEFW $D404    ; $9D.
 $A5F8 DEFW $D435    ; $9E.
 $A5FA DEFW $D404    ; $9F.
 $A5FC DEFW $AEEA    ; $A0.
 $A5FE DEFW $D232    ; $A1.

; Background Item Graphic Lookup Table
;
; Order is important, as the same index value used to calculate the required
; graphic is used in #R$802A.
@label=BackgroundItemGraphicLookupTable
w$A600 DEFW $BCCE    ; $01.
 $A602 DEFW $A76E    ; $02.
 $A604 DEFW $B3EA    ; $03.
 $A606 DEFW $AEEA    ; $04.
 $A608 DEFW $AEEA    ; $05.
 $A60A DEFW $AEEA    ; $06.
 $A60C DEFW $AEEA    ; $07.
 $A60E DEFW $A69C    ; $08.
 $A610 DEFW $A69C    ; $09.
 $A612 DEFW $A69C    ; $0A.
 $A614 DEFW $A69C    ; $0B.
 $A616 DEFW $C2AE    ; $0C.
 $A618 DEFW $C2AE    ; $0D.
 $A61A DEFW $C2AE    ; $0E.
 $A61C DEFW $C2AE    ; $0F.
 $A61E DEFW $B6F2    ; $10.
 $A620 DEFW $B4C6    ; $11.
 $A622 DEFW $A7EC    ; $12.
 $A624 DEFW $C542    ; $13.
 $A626 DEFW $C48C    ; $14.
 $A628 DEFW $C66A    ; $15.
 $A62A DEFW $C6AC    ; $16.
 $A62C DEFW $C6CE    ; $17.
 $A62E DEFW $C7F2    ; $18.
 $A630 DEFW $C770    ; $19.
 $A632 DEFW $CFD5    ; $1A.
 $A634 DEFW $C874    ; $1B.
 $A636 DEFW $C9CA    ; $1C.
 $A638 DEFW $C9EC    ; $1D.
 $A63A DEFW $CA0E    ; $1E.
 $A63C DEFW $AEEA    ; $1F.
 $A63E DEFW $CA82    ; $20.
 $A640 DEFW $A76E    ; $21.
 $A642 DEFW $CAE4    ; $22.
 $A644 DEFW $BCCE    ; $23.
 $A646 DEFW $D069    ; $24.
 $A648 DEFW $D253    ; $25.
 $A64A DEFW $D2EE    ; $26.
 $A64C DEFW $D466    ; $27.

; Background Item Attribute Lookup Table
@label=BackgroundItemAttributeLookupTable
w$A64E DEFW $A7DE    ; $01.
 $A650 DEFW $A7D0    ; $02.
 $A652 DEFW $B4AC    ; $03.
 $A654 DEFW $AEEA    ; $04.
 $A656 DEFW $AEEA    ; $05.
 $A658 DEFW $AEEA    ; $06.
 $A65A DEFW $AEEA    ; $07.
 $A65C DEFW $A6FE    ; $08.
 $A65E DEFW $A70C    ; $09.
 $A660 DEFW $A71A    ; $0A.
 $A662 DEFW $A728    ; $0B.
 $A664 DEFW $A736    ; $0C.
 $A666 DEFW $A744    ; $0D.
 $A668 DEFW $A752    ; $0E.
 $A66A DEFW $A760    ; $0F.
 $A66C DEFW $B774    ; $10.
 $A66E DEFW $B528    ; $11.
 $A670 DEFW $A846    ; $12.
 $A672 DEFW $AEEA    ; $13.
 $A674 DEFW $AEEA    ; $14.
 $A676 DEFW $C960    ; $15.
 $A678 DEFW $C96A    ; $16.
 $A67A DEFW $C970    ; $17.
 $A67C DEFW $C998    ; $18.
 $A67E DEFW $C986    ; $19.
 $A680 DEFW $D057    ; $1A.
 $A682 DEFW $C9AA    ; $1B.
 $A684 DEFW $CA50    ; $1C.
 $A686 DEFW $CA56    ; $1D.
 $A688 DEFW $CA5C    ; $1E.
 $A68A DEFW $AEEA    ; $1F.
 $A68C DEFW $CA74    ; $20.
 $A68E DEFW $A7D0    ; $21.
 $A690 DEFW $CA66    ; $22.
 $A692 DEFW $A7DE    ; $23.
 $A694 DEFW $D1AB    ; $24.
 $A696 DEFW $D295    ; $25.
 $A698 DEFW $D3B8    ; $26.
 $A69A DEFW $D4EF    ; $27.

; Sprite: Locked Normal Door
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$A69E-$A6A1;$A6BE-$A6C1;$A6DE-$A6E1@$A700-$A70B(RedLockedNormalDoor)
; #UDGARRAY4,,4,4,,2;$A69E-$A6A1;$A6BE-$A6C1;$A6DE-$A6E1@$A70E-$A719(GreenLockedNormalDoor)
; #UDGARRAY4,,4,4,,2;$A69E-$A6A1;$A6BE-$A6C1;$A6DE-$A6E1@$A71C-$A727(CyanLockedNormalDoor)
; #UDGARRAY4,,4,4,,2;$A69E-$A6A1;$A6BE-$A6C1;$A6DE-$A6E1@$A72A-$A735(YellowLockedNormalDoor)
; }
; TABLE#
@label=SpriteLockedNormalDoor
b$A69C DEFB $04                             ; Width (in bytes).
 $A69D DEFB $18                             ; Height (in pixels).
 $A69E DEFB $FF,$1B,$30,$FF,$1F,$1B,$30,$F8 ; {Graphic data.
 $A6A6 DEFB $02,$1B,$30,$40,$3E,$1B,$30,$7C ;
 $A6AE DEFB $7F,$33,$18,$3E,$07,$33,$18,$20 ;
 $A6B6 DEFB $F8,$33,$18,$1F,$F8,$33,$00,$1F ;
 $A6BE DEFB $08,$63,$07,$08,$F0,$63,$17,$0F ;
 $A6C6 DEFB $F0,$63,$19,$0F,$1E,$63,$0E,$08 ;
 $A6CE DEFB $FE,$C3,$00,$1F,$F8,$C3,$06,$1F ;
 $A6D6 DEFB $CC,$C3,$06,$33,$3E,$C3,$06,$7C ;
 $A6DE DEFB $7D,$80,$01,$BE,$3B,$F0,$0F,$DC ;
 $A6E6 DEFB $17,$BF,$FD,$E8,$07,$7B,$DE,$E0 ;
 $A6EE DEFB $03,$7B,$DE,$C0,$00,$77,$EE,$00 ;
 $A6F6 DEFB $00,$07,$E0,$00,$00,$00,$00,$00 ; }

; Attributes: Red Locked Normal Door
@label=AttribRedLockedNormalDoor
b$A6FE DEFB $04                             ; Width (in bytes).
 $A6FF DEFB $03                             ; Height (in bytes).
 $A700 DEFB $43,$42,$42,$43,$43,$42,$46,$43 ; {Colour attribute data.
 $A708 DEFB $43,$43,$43,$43                 ; }

; Attributes: Green Locked Normal Door
@label=AttribGreenLockedNormalDoor
b$A70C DEFB $04                             ; Width (in bytes).
 $A70D DEFB $03                             ; Height (in bytes).
 $A70E DEFB $43,$44,$44,$43,$43,$44,$46,$43 ; {Colour attribute data.
 $A716 DEFB $43,$43,$43,$43                 ; }

; Attributes: Cyan Locked Normal Door
@label=AttribCyanLockedNormalDoor
b$A71A DEFB $04                             ; Width (in bytes).
 $A71B DEFB $03                             ; Height (in bytes).
 $A71C DEFB $43,$45,$45,$43,$43,$45,$46,$43 ; {Colour attribute data.
 $A724 DEFB $43,$43,$43,$43                 ; }

; Attributes: Yellow Locked Normal Door
@label=AttribYellowLockedNormalDoor
b$A728 DEFB $04                             ; Width (in bytes).
 $A729 DEFB $03                             ; Height (in bytes).
 $A72A DEFB $43,$46,$46,$43,$43,$46,$43,$43 ; {Colour attribute data.
 $A732 DEFB $43,$43,$43,$43                 ; }

; Attributes: Red Locked Cave Door
@label=AttribRedLockedCaveDoor
b$A736 DEFB $04                             ; Width (in bytes).
 $A737 DEFB $03                             ; Height (in bytes).
 $A738 DEFB $FF,$42,$42,$FF,$FF,$42,$46,$FF ; {Colour attribute data.
 $A740 DEFB $FF,$FF,$FF,$FF                 ; }

; Attributes: Green Locked Cave Door
@label=AttribGreenLockedCaveDoor
b$A744 DEFB $04                             ; Width (in bytes).
 $A745 DEFB $03                             ; Height (in bytes).
 $A746 DEFB $FF,$44,$44,$FF,$FF,$44,$46,$FF ; {Colour attribute data.
 $A74E DEFB $FF,$FF,$FF,$FF                 ; }

; Attributes: Cyan Locked Cave Door
@label=AttribCyanLockedCaveDoor
b$A752 DEFB $04                             ; Width (in bytes).
 $A753 DEFB $03                             ; Height (in bytes).
 $A754 DEFB $FF,$45,$45,$FF,$FF,$45,$46,$FF ; {Colour attribute data.
 $A75C DEFB $FF,$FF,$FF,$FF                 ; }

; Attributes: Yellow Locked Cave Door
@label=AttribYellowLockedCaveDoor
b$A760 DEFB $04                             ; Width (in bytes).
 $A761 DEFB $03                             ; Height (in bytes).
 $A762 DEFB $FF,$46,$46,$FF,$FF,$46,$43,$FF ; {Colour attribute data.
 $A76A DEFB $FF,$FF,$FF,$FF                 ; }

; Sprite: Normal Door Frame
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$A770-$A773;$A790-$A793;$A7B0-$A7B3@$A7D2-$A7DD(NormalDoorFrame)
; }
; TABLE#
@label=SpriteNormalDoorFrame
b$A76E DEFB $04                             ; Width (in bytes).
 $A76F DEFB $18                             ; Height (in pixels).
 $A770 DEFB $FF,$00,$00,$FF,$1F,$00,$00,$F8 ; {Graphic data.
 $A778 DEFB $02,$00,$00,$40,$3E,$00,$00,$7C ;
 $A780 DEFB $7C,$00,$00,$3E,$04,$00,$00,$20 ;
 $A788 DEFB $F8,$00,$00,$1F,$F8,$00,$00,$1F ;
 $A790 DEFB $08,$00,$00,$08,$F0,$00,$00,$0F ;
 $A798 DEFB $F0,$00,$00,$0F,$10,$00,$00,$08 ;
 $A7A0 DEFB $F0,$00,$00,$1F,$F8,$00,$00,$1F ;
 $A7A8 DEFB $CC,$00,$00,$33,$3E,$00,$00,$7C ;
 $A7B0 DEFB $7D,$80,$01,$BE,$3B,$F0,$0F,$DC ;
 $A7B8 DEFB $17,$BF,$FD,$E8,$07,$7B,$DE,$E0 ;
 $A7C0 DEFB $03,$7B,$DE,$C0,$00,$77,$EE,$00 ;
 $A7C8 DEFB $00,$07,$E0,$00,$00,$00,$00,$00 ; }

; Attributes: Normal Door Frame
@label=AttribNormalDoorFrame
b$A7D0 DEFB $04                             ; Width (in bytes).
 $A7D1 DEFB $03                             ; Height (in bytes).
 $A7D2 DEFB $43,$00,$00,$43,$43,$00,$00,$43 ; {Colour attribute data.
 $A7DA DEFB $43,$43,$43,$43                 ; }

; Attributes: Cave Door Frame
@label=AttribCaveDoorFrame
b$A7DE DEFB $04                             ; Width (in bytes).
 $A7DF DEFB $03                             ; Height (in bytes).
 $A7E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {Colour attribute data.
 $A7E8 DEFB $FF,$FF,$FF,$FF                 ; }

; Sprite: Table
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$A7EE-$A7F1;$A80E-$A811;$A82E-$A831@$A848-$A853{,2*4}(Table)
; }
; TABLE#
@label=SpriteTable
b$A7EC DEFB $04                             ; Width (in bytes).
 $A7ED DEFB $16                             ; Height (in pixels).
 $A7EE DEFB $60,$00,$00,$06,$70,$00,$00,$0E ; {Graphic data.
 $A7F6 DEFB $30,$00,$00,$0C,$30,$00,$00,$0C ;
 $A7FE DEFB $70,$00,$00,$0E,$70,$00,$00,$0E ;
 $A806 DEFB $78,$00,$00,$1E,$3F,$FF,$FF,$FC ;
 $A80E DEFB $7F,$FF,$FF,$FE,$80,$00,$00,$01 ;
 $A816 DEFB $7F,$FF,$FF,$FE,$FF,$FF,$FF,$FF ;
 $A81E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $A826 DEFB $7F,$FF,$FF,$FE,$7F,$FF,$FF,$FE ;
 $A82E DEFB $7F,$FF,$FF,$FE,$3F,$FF,$FF,$FC ;
 $A836 DEFB $3F,$FF,$FF,$FC,$1F,$FF,$FF,$F8 ;
 $A83E DEFB $1F,$FF,$FF,$F8,$0F,$FF,$FF,$F0 ; }

; Attributes: Table
@label=AttribTable
b$A846 DEFB $04                             ; Width (in bytes).
 $A847 DEFB $03                             ; Height (in bytes).
 $A848 DEFB $45,$45,$45,$45,$42,$42,$42,$42 ; {Colour attribute data.
 $A850 DEFB $42,$42,$42,$42                 ; }

; Screen Table
;
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Colour Attribute      | Colour attribute. }
; { $01         | Screen Type           | Screen type. }
; TABLE#
@label=ScreenTable
b$A854 DEFB $42,$00  ; Screen $00.
 $A856 DEFB $43,$02  ; Screen $01.
 $A858 DEFB $44,$03  ; Screen $02.
 $A85A DEFB $45,$02  ; Screen $03.
 $A85C DEFB $46,$04  ; Screen $04.
 $A85E DEFB $47,$02  ; Screen $05.
 $A860 DEFB $46,$03  ; Screen $06.
 $A862 DEFB $45,$02  ; Screen $07.
 $A864 DEFB $44,$04  ; Screen $08.
 $A866 DEFB $43,$00  ; Screen $09.
 $A868 DEFB $42,$03  ; Screen $0A.
 $A86A DEFB $43,$03  ; Screen $0B.
 $A86C DEFB $44,$03  ; Screen $0C.
 $A86E DEFB $45,$00  ; Screen $0D.
 $A870 DEFB $46,$04  ; Screen $0E.
 $A872 DEFB $47,$04  ; Screen $0F.
 $A874 DEFB $46,$04  ; Screen $10.
 $A876 DEFB $45,$04  ; Screen $11.
 $A878 DEFB $44,$04  ; Screen $12.
 $A87A DEFB $43,$00  ; Screen $13.
 $A87C DEFB $42,$03  ; Screen $14.
 $A87E DEFB $43,$03  ; Screen $15.
 $A880 DEFB $44,$03  ; Screen $16.
 $A882 DEFB $45,$00  ; Screen $17.
 $A884 DEFB $46,$04  ; Screen $18.
 $A886 DEFB $47,$03  ; Screen $19.
 $A888 DEFB $46,$05  ; Screen $1A.
 $A88A DEFB $45,$00  ; Screen $1B.
 $A88C DEFB $44,$08  ; Screen $1C.
 $A88E DEFB $43,$01  ; Screen $1D.
 $A890 DEFB $42,$04  ; Screen $1E.
 $A892 DEFB $43,$02  ; Screen $1F.
 $A894 DEFB $44,$03  ; Screen $20.
 $A896 DEFB $45,$02  ; Screen $21.
 $A898 DEFB $46,$04  ; Screen $22.
 $A89A DEFB $47,$02  ; Screen $23.
 $A89C DEFB $46,$03  ; Screen $24.
 $A89E DEFB $45,$02  ; Screen $25.
 $A8A0 DEFB $44,$05  ; Screen $26.
 $A8A2 DEFB $43,$00  ; Screen $27.
 $A8A4 DEFB $42,$04  ; Screen $28.
 $A8A6 DEFB $43,$00  ; Screen $29.
 $A8A8 DEFB $44,$03  ; Screen $2A.
 $A8AA DEFB $45,$00  ; Screen $2B.
 $A8AC DEFB $46,$04  ; Screen $2C.
 $A8AE DEFB $47,$00  ; Screen $2D.
 $A8B0 DEFB $46,$03  ; Screen $2E.
 $A8B2 DEFB $45,$05  ; Screen $2F.
 $A8B4 DEFB $44,$01  ; Screen $30.
 $A8B6 DEFB $43,$0A  ; Screen $31.
 $A8B8 DEFB $42,$0A  ; Screen $32.
 $A8BA DEFB $43,$01  ; Screen $33.
 $A8BC DEFB $44,$0A  ; Screen $34.
 $A8BE DEFB $45,$01  ; Screen $35.
 $A8C0 DEFB $46,$09  ; Screen $36.
 $A8C2 DEFB $47,$09  ; Screen $37.
 $A8C4 DEFB $46,$01  ; Screen $38.
 $A8C6 DEFB $45,$01  ; Screen $39.
 $A8C8 DEFB $44,$01  ; Screen $3A.
 $A8CA DEFB $43,$01  ; Screen $3B.
 $A8CC DEFB $42,$01  ; Screen $3C.
 $A8CE DEFB $43,$01  ; Screen $3D.
 $A8D0 DEFB $44,$01  ; Screen $3E.
 $A8D2 DEFB $45,$09  ; Screen $3F.
 $A8D4 DEFB $46,$01  ; Screen $40.
 $A8D6 DEFB $47,$01  ; Screen $41.
 $A8D8 DEFB $46,$0A  ; Screen $42.
 $A8DA DEFB $45,$01  ; Screen $43.
 $A8DC DEFB $44,$09  ; Screen $44.
 $A8DE DEFB $43,$01  ; Screen $45.
 $A8E0 DEFB $42,$01  ; Screen $46.
 $A8E2 DEFB $43,$09  ; Screen $47.
 $A8E4 DEFB $45,$01  ; Screen $48.
 $A8E6 DEFB $45,$0A  ; Screen $49.
 $A8E8 DEFB $46,$09  ; Screen $4A.
 $A8EA DEFB $47,$01  ; Screen $4B.
 $A8EC DEFB $46,$01  ; Screen $4C.
 $A8EE DEFB $45,$0A  ; Screen $4D.
 $A8F0 DEFB $44,$01  ; Screen $4E.
 $A8F2 DEFB $43,$09  ; Screen $4F.
 $A8F4 DEFB $42,$01  ; Screen $50.
 $A8F6 DEFB $43,$0A  ; Screen $51.
 $A8F8 DEFB $44,$09  ; Screen $52.
 $A8FA DEFB $45,$01  ; Screen $53.
 $A8FC DEFB $46,$01  ; Screen $54.
 $A8FE DEFB $47,$01  ; Screen $55.
 $A900 DEFB $46,$00  ; Screen $56.
 $A902 DEFB $45,$00  ; Screen $57.
 $A904 DEFB $44,$00  ; Screen $58.
 $A906 DEFB $43,$00  ; Screen $59.
 $A908 DEFB $42,$00  ; Screen $5A.
 $A90A DEFB $47,$00  ; Screen $5B.
 $A90C DEFB $43,$00  ; Screen $5C.
 $A90E DEFB $44,$00  ; Screen $5D.
 $A910 DEFB $45,$00  ; Screen $5E.
 $A912 DEFB $46,$00  ; Screen $5F.
 $A914 DEFB $47,$00  ; Screen $60.
 $A916 DEFB $46,$00  ; Screen $61.
 $A918 DEFB $45,$00  ; Screen $62.
 $A91A DEFB $44,$00  ; Screen $63.
 $A91C DEFB $43,$00  ; Screen $64.
 $A91E DEFB $42,$00  ; Screen $65.
 $A920 DEFB $43,$00  ; Screen $66.
 $A922 DEFB $44,$00  ; Screen $67.
 $A924 DEFB $45,$00  ; Screen $68.
 $A926 DEFB $46,$00  ; Screen $69.
 $A928 DEFB $47,$00  ; Screen $6A.
 $A92A DEFB $46,$00  ; Screen $6B.
 $A92C DEFB $45,$00  ; Screen $6C.
 $A92E DEFB $44,$00  ; Screen $6D.
 $A930 DEFB $43,$00  ; Screen $6E.
 $A932 DEFB $42,$04  ; Screen $6F.
 $A934 DEFB $43,$00  ; Screen $70.
 $A936 DEFB $44,$05  ; Screen $71.
 $A938 DEFB $45,$05  ; Screen $72.
 $A93A DEFB $46,$03  ; Screen $73.
 $A93C DEFB $47,$01  ; Screen $74.
 $A93E DEFB $46,$00  ; Screen $75.
 $A940 DEFB $45,$00  ; Screen $76.
 $A942 DEFB $44,$03  ; Screen $77.
 $A944 DEFB $43,$00  ; Screen $78.
 $A946 DEFB $42,$04  ; Screen $79.
 $A948 DEFB $43,$00  ; Screen $7A.
 $A94A DEFB $44,$03  ; Screen $7B.
 $A94C DEFB $45,$00  ; Screen $7C.
 $A94E DEFB $46,$04  ; Screen $7D.
 $A950 DEFB $47,$00  ; Screen $7E.
 $A952 DEFB $46,$00  ; Screen $7F.
 $A954 DEFB $45,$00  ; Screen $80.
 $A956 DEFB $44,$00  ; Screen $81.
 $A958 DEFB $43,$00  ; Screen $82.
 $A95A DEFB $42,$00  ; Screen $83.
 $A95C DEFB $43,$00  ; Screen $84.
 $A95E DEFB $44,$00  ; Screen $85.
 $A960 DEFB $45,$00  ; Screen $86.
 $A962 DEFB $46,$00  ; Screen $87.
 $A964 DEFB $47,$00  ; Screen $88.
 $A966 DEFB $46,$00  ; Screen $89.
 $A968 DEFB $45,$00  ; Screen $8A.
 $A96A DEFB $44,$04  ; Screen $8B.
 $A96C DEFB $43,$04  ; Screen $8C.
 $A96E DEFB $42,$04  ; Screen $8D.
 $A970 DEFB $47,$0B  ; Screen $8E.
 $A972 DEFB $43,$01  ; Screen $8F.
 $A974 DEFB $44,$01  ; Screen $90.
 $A976 DEFB $45,$01  ; Screen $91.
 $A978 DEFB $46,$01  ; Screen $92.
 $A97A DEFB $47,$01  ; Screen $93.
 $A97C DEFB $46,$01  ; Screen $94.
 $A97E DEFB $00,$00  ; Terminator.
 $A980 DEFB $00,$0C  ; Falling screen.

; Screen Type $00
;
; #UDG$A982(ScreenType$00)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($BB,$04) to ($04,$04) }
; { ($BB,$04) to ($BB,$BB) }
; { ($BB,$04) to ($A0,$1F) }
; { ($04,$BB) to ($04,$04) }
; { ($04,$BB) to ($BB,$BB) }
; { ($04,$BB) to ($1F,$A0) }
; { ($1F,$1F) to ($04,$04) }
; { ($1F,$1F) to ($A0,$1F) }
; { ($1F,$1F) to ($1F,$A0) }
; { ($A0,$A0) to ($BB,$BB) }
; { ($A0,$A0) to ($A0,$1F) }
; { ($A0,$A0) to ($1F,$A0) }
; TABLE#
@label=ScreenType$00
b$A982 DEFB $38      ; Width of the interior.
 $A983 DEFB $38      ; Height of the interior.
 $A984 DEFW $A9DF    ; Address of the points data.
 $A986 DEFW $A9EF    ; Address of the lineTo data.

; Screen Type $01
;
; #UDG$A988(ScreenType$01)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($05,$93) to ($12,$79) }
; { ($05,$93) to ($26,$83) }
; { ($05,$93) to ($17,$93) }
; { ($8E,$02) to ($7D,$24) }
; { ($8E,$02) to ($AD,$11) }
; { ($8E,$02) to ($74,$0A) }
; { ($B7,$26) to ($AD,$46) }
; { ($B7,$26) to ($96,$3B) }
; { ($B7,$26) to ($AD,$11) }
; { ($90,$4F) to ($AD,$46) }
; { ($90,$4F) to ($96,$3B) }
; { ($90,$4F) to ($90,$70) }
; { ($90,$2E) to ($96,$3B) }
; { ($90,$2E) to ($AD,$11) }
; { ($90,$2E) to ($7D,$25) }
; { ($AD,$79) to ($B9,$8C) }
; { ($AD,$79) to ($90,$70) }
; { ($AD,$79) to ($AD,$46) }
; { ($B4,$97) to ($BF,$A2) }
; { ($B4,$97) to ($B9,$8C) }
; { ($B4,$97) to ($94,$82) }
; { ($96,$7A) to ($93,$81) }
; { ($96,$7A) to ($B9,$8C) }
; { ($96,$7A) to ($90,$70) }
; { ($94,$82) to ($99,$8A) }
; { ($85,$97) to ($9B,$B8) }
; { ($85,$97) to ($71,$91) }
; { ($85,$97) to ($99,$8A) }
; { ($BF,$A2) to ($99,$8A) }
; { ($9C,$B9) to ($79,$AE) }
; { ($9C,$B9) to ($BF,$A2) }
; { ($79,$AD) to ($70,$90) }
; { ($4F,$90) to ($70,$90) }
; { ($4F,$90) to ($38,$9B) }
; { ($46,$AD) to ($4F,$90) }
; { ($46,$AD) to ($23,$BE) }
; { ($46,$AD) to ($79,$AD) }
; { ($72,$28) to ($7D,$25) }
; { ($72,$28) to ($70,$2F) }
; { ($72,$28) to ($79,$12) }
; { ($74,$0A) to ($78,$11) }
; { ($46,$12) to ($79,$12) }
; { ($46,$12) to ($4F,$2F) }
; { ($46,$12) to ($2C,$05) }
; { ($4F,$2F) to ($70,$2F) }
; { ($3C,$26) to ($4F,$2F) }
; { ($3C,$26) to ($3C,$2F) }
; { ($3C,$26) to ($2C,$05) }
; { ($2C,$17) to ($3C,$2F) }
; { ($2C,$17) to ($2C,$05) }
; { ($2C,$17) to ($13,$17) }
; { ($2B,$2F) to ($3C,$2F) }
; { ($2B,$2F) to ($24,$37) }
; { ($2B,$2F) to ($13,$17) }
; { ($02,$24) to ($24,$37) }
; { ($01,$23) to ($13,$17) }
; { ($01,$23) to ($12,$46) }
; { ($2F,$4F) to ($25,$38) }
; { ($2F,$4F) to ($12,$46) }
; { ($12,$79) to ($12,$46) }
; { ($12,$79) to ($2F,$70) }
; { ($2F,$70) to ($26,$83) }
; { ($2F,$70) to ($2F,$4F) }
; { ($2F,$83) to ($26,$83) }
; { ($2F,$83) to ($2F,$94) }
; { ($2F,$83) to ($17,$93) }
; { ($37,$9C) to ($2F,$94) }
; { ($37,$9C) to ($23,$BE) }
; { ($17,$AC) to ($2F,$94) }
; { ($17,$AC) to ($24,$BF) }
; { ($17,$AC) to ($17,$93) }
; TABLE#
@label=ScreenType$01
b$A988 DEFB $28      ; Width of the interior.
 $A989 DEFB $28      ; Height of the interior.
 $A98A DEFW $AA04    ; Address of the points data.
 $A98C DEFW $AA78    ; Address of the lineTo data.

; Screen Type $02
;
; #UDG$A98E(ScreenType$02)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($A3,$02) to ($8F,$1F) }
; { ($A3,$02) to ($BD,$1C) }
; { ($A3,$02) to ($1C,$02) }
; { ($02,$1C) to ($1C,$02) }
; { ($02,$1C) to ($02,$A3) }
; { ($02,$1C) to ($1F,$30) }
; { ($1C,$BD) to ($02,$A3) }
; { ($1C,$BD) to ($A3,$BD) }
; { ($1C,$BD) to ($30,$A0) }
; { ($BD,$A3) to ($A3,$BD) }
; { ($BD,$A3) to ($A0,$8F) }
; { ($BD,$A3) to ($BD,$1C) }
; { ($A0,$30) to ($BD,$1C) }
; { ($A0,$30) to ($8F,$1F) }
; { ($A0,$30) to ($A0,$8F) }
; { ($30,$1F) to ($1C,$02) }
; { ($30,$1F) to ($8F,$1F) }
; { ($30,$1F) to ($1F,$30) }
; { ($1F,$8F) to ($02,$A3) }
; { ($1F,$8F) to ($1F,$30) }
; { ($1F,$8F) to ($30,$A0) }
; { ($8F,$A0) to ($A3,$BD) }
; { ($8F,$A0) to ($30,$A0) }
; { ($8F,$A0) to ($A0,$8F) }
; TABLE#
@label=ScreenType$02
b$A98E DEFB $38      ; Width of the interior.
 $A98F DEFB $38      ; Height of the interior.
 $A990 DEFW $AB34    ; Address of the points data.
 $A992 DEFW $AB54    ; Address of the lineTo data.

; Screen Type $03
;
; #UDG$A994(ScreenType$03)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($9C,$03) to ($23,$03) }
; { ($9C,$03) to ($9C,$BC) }
; { ($9C,$03) to ($80,$1F) }
; { ($23,$BC) to ($23,$03) }
; { ($23,$BC) to ($9C,$BC) }
; { ($23,$BC) to ($3F,$A0) }
; { ($3F,$1F) to ($23,$03) }
; { ($3F,$1F) to ($80,$1F) }
; { ($3F,$1F) to ($3F,$A0) }
; { ($80,$A0) to ($9C,$BC) }
; { ($80,$A0) to ($80,$1F) }
; { ($80,$A0) to ($3F,$A0) }
; TABLE#
@label=ScreenType$03
b$A994 DEFB $38      ; Width of the interior.
 $A995 DEFB $18      ; Height of the interior.
 $A996 DEFW $AB7D    ; Address of the points data.
 $A998 DEFW $A9EF    ; Address of the lineTo data.

; Screen Type $04
;
; #UDG$A99A(ScreenType$04)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($03,$23) to ($03,$9C) }
; { ($03,$23) to ($BC,$23) }
; { ($03,$23) to ($1F,$3F) }
; { ($BC,$9C) to ($03,$9C) }
; { ($BC,$9C) to ($BC,$23) }
; { ($BC,$9C) to ($A0,$80) }
; { ($1F,$80) to ($03,$9C) }
; { ($1F,$80) to ($1F,$3F) }
; { ($1F,$80) to ($A0,$80) }
; { ($A0,$3F) to ($BC,$23) }
; { ($A0,$3F) to ($1F,$3F) }
; { ($A0,$3F) to ($A0,$80) }
; TABLE#
@label=ScreenType$04
b$A99A DEFB $18      ; Width of the interior.
 $A99B DEFB $38      ; Height of the interior.
 $A99C DEFW $AB8D    ; Address of the points data.
 $A99E DEFW $A9EF    ; Address of the lineTo data.

; Screen Type $05
;
; #UDG$A9A0(ScreenType$05)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($04,$38) to ($04,$8A) }
; { ($04,$38) to ($BB,$08) }
; { ($BB,$B7) to ($BB,$08) }
; { ($BB,$B7) to ($04,$8A) }
; { ($97,$38) to ($BB,$08) }
; { ($82,$38) to ($82,$87) }
; { ($82,$38) to ($97,$38) }
; { ($6E,$3D) to ($6E,$82) }
; { ($6E,$3D) to ($82,$3D) }
; { ($5C,$41) to ($5C,$7E) }
; { ($5C,$41) to ($6E,$41) }
; { ($4C,$45) to ($4C,$7A) }
; { ($4C,$45) to ($5C,$45) }
; { ($3E,$48) to ($3E,$77) }
; { ($3E,$48) to ($4C,$48) }
; { ($32,$4B) to ($32,$74) }
; { ($32,$4B) to ($3E,$4B) }
; { ($28,$4E) to ($28,$71) }
; { ($28,$4E) to ($32,$4E) }
; { ($28,$4E) to ($04,$38) }
; { ($28,$71) to ($04,$8A) }
; { ($32,$71) to ($28,$71) }
; { ($3E,$74) to ($32,$74) }
; { ($4C,$77) to ($3E,$77) }
; { ($5C,$7A) to ($4C,$7A) }
; { ($6E,$7E) to ($5C,$7E) }
; { ($82,$82) to ($6E,$82) }
; { ($97,$87) to ($BB,$B7) }
; { ($97,$87) to ($97,$38) }
; { ($97,$87) to ($82,$87) }
; TABLE#
@label=ScreenType$05
b$A9A0 DEFB $10      ; Width of the interior.
 $A9A1 DEFB $30      ; Height of the interior.
 $A9A2 DEFW $AC4A    ; Address of the points data.
 $A9A4 DEFW $ABE9    ; Address of the lineTo data.

; Screen Type $06
;
; #UDG$A9A6(ScreenType$06)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($BB,$35) to ($BB,$8A) }
; { ($BB,$35) to ($04,$08) }
; { ($04,$B7) to ($04,$08) }
; { ($04,$B7) to ($BB,$8A) }
; { ($28,$38) to ($04,$08) }
; { ($3D,$38) to ($3D,$87) }
; { ($3D,$38) to ($28,$38) }
; { ($51,$3D) to ($51,$82) }
; { ($51,$3D) to ($3D,$3D) }
; { ($63,$41) to ($63,$7E) }
; { ($63,$41) to ($51,$41) }
; { ($73,$45) to ($73,$7A) }
; { ($73,$45) to ($63,$45) }
; { ($81,$48) to ($81,$77) }
; { ($81,$48) to ($73,$48) }
; { ($8D,$4B) to ($8D,$74) }
; { ($8D,$4B) to ($81,$4B) }
; { ($97,$4E) to ($97,$71) }
; { ($97,$4E) to ($8D,$4E) }
; { ($97,$4E) to ($BB,$35) }
; { ($97,$71) to ($BB,$8A) }
; { ($8D,$71) to ($97,$71) }
; { ($81,$74) to ($8D,$74) }
; { ($73,$77) to ($81,$77) }
; { ($63,$7A) to ($73,$7A) }
; { ($51,$7E) to ($63,$7E) }
; { ($3D,$82) to ($51,$82) }
; { ($28,$87) to ($04,$B7) }
; { ($28,$87) to ($28,$38) }
; { ($28,$87) to ($3D,$87) }
; TABLE#
@label=ScreenType$06
b$A9A6 DEFB $10      ; Width of the interior.
 $A9A7 DEFB $30      ; Height of the interior.
 $A9A8 DEFW $AB9D    ; Address of the points data.
 $A9AA DEFW $ABE9    ; Address of the lineTo data.

; Screen Type $07
;
; #UDG$A9AC(ScreenType$07)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($38,$04) to ($8A,$04) }
; { ($38,$04) to ($08,$BB) }
; { ($B7,$BB) to ($08,$BB) }
; { ($B7,$BB) to ($8A,$04) }
; { ($38,$97) to ($08,$BB) }
; { ($38,$82) to ($87,$82) }
; { ($38,$82) to ($38,$97) }
; { ($3D,$64) to ($82,$6E) }
; { ($3D,$64) to ($3D,$82) }
; { ($41,$5C) to ($7E,$5C) }
; { ($41,$5C) to ($41,$6E) }
; { ($45,$4C) to ($7A,$4C) }
; { ($45,$4C) to ($45,$5C) }
; { ($48,$3E) to ($77,$3E) }
; { ($48,$3E) to ($48,$4C) }
; { ($4B,$32) to ($74,$32) }
; { ($4B,$32) to ($4B,$3E) }
; { ($4E,$28) to ($71,$28) }
; { ($4E,$28) to ($4E,$32) }
; { ($4E,$28) to ($38,$04) }
; { ($71,$28) to ($8A,$04) }
; { ($71,$32) to ($71,$28) }
; { ($74,$3E) to ($74,$32) }
; { ($77,$4C) to ($77,$3E) }
; { ($7A,$5C) to ($7A,$4C) }
; { ($7E,$6E) to ($7E,$5C) }
; { ($82,$82) to ($82,$6E) }
; { ($87,$97) to ($B7,$BB) }
; { ($87,$97) to ($38,$97) }
; { ($87,$97) to ($87,$82) }
; TABLE#
@label=ScreenType$07
b$A9AC DEFB $30      ; Width of the interior.
 $A9AD DEFB $10      ; Height of the interior.
 $A9AE DEFW $AC96    ; Address of the points data.
 $A9B0 DEFW $ABE9    ; Address of the lineTo data.

; Screen Type $08
;
; #UDG$A9B2(ScreenType$08)
; .
; The geometry data for drawing the screen is in #R$A9D0.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($35,$BB) to ($8A,$BB) }
; { ($35,$BB) to ($08,$04) }
; { ($B7,$04) to ($08,$04) }
; { ($B7,$04) to ($8A,$BB) }
; { ($38,$28) to ($08,$04) }
; { ($38,$3D) to ($87,$3D) }
; { ($38,$3D) to ($38,$28) }
; { ($3D,$51) to ($82,$51) }
; { ($3D,$51) to ($3D,$3D) }
; { ($41,$63) to ($7E,$63) }
; { ($41,$63) to ($41,$51) }
; { ($45,$73) to ($7A,$73) }
; { ($45,$73) to ($45,$63) }
; { ($48,$81) to ($77,$81) }
; { ($48,$81) to ($48,$73) }
; { ($4B,$8D) to ($74,$8D) }
; { ($4B,$8D) to ($4B,$81) }
; { ($4E,$97) to ($71,$97) }
; { ($4E,$97) to ($4E,$8D) }
; { ($4E,$97) to ($35,$BB) }
; { ($71,$97) to ($8A,$BB) }
; { ($71,$8D) to ($71,$97) }
; { ($74,$81) to ($74,$8D) }
; { ($77,$73) to ($77,$81) }
; { ($7A,$63) to ($7A,$73) }
; { ($7E,$51) to ($7E,$63) }
; { ($82,$3D) to ($82,$51) }
; { ($87,$28) to ($B7,$04) }
; { ($87,$28) to ($38,$28) }
; { ($87,$28) to ($87,$3D) }
; TABLE#
@label=ScreenType$08
b$A9B2 DEFB $30      ; Width of the interior.
 $A9B3 DEFB $10      ; Height of the interior.
 $A9B4 DEFW $ACE2    ; Address of the points data.
 $A9B6 DEFW $ABE9    ; Address of the lineTo data.

; Screen Type $09
;
; #UDG$A9B8(ScreenType$09)
; .
; The geometry data for drawing the screen is in #R$BD7E.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($79,$0A) to ($70,$27) }
; { ($79,$0A) to ($86,$04) }
; { ($79,$0A) to ($46,$0A) }
; { ($91,$04) to ($A6,$19) }
; { ($91,$04) to ($82,$23) }
; { ($91,$04) to ($86,$04) }
; { ($9B,$38) to ($A7,$4B) }
; { ($9B,$38) to ($84,$47) }
; { ($9B,$38) to ($A6,$19) }
; { ($9A,$58) to ($AA,$68) }
; { ($9A,$58) to ($A7,$4B) }
; { ($9A,$58) to ($80,$5B) }
; { ($37,$01) to ($46,$0A) }
; { ($37,$01) to ($47,$22) }
; { ($37,$01) to ($2A,$07) }
; { ($9B,$7E) to ($9B,$8F) }
; { ($9B,$7E) to ($85,$74) }
; { ($9B,$7E) to ($AA,$68) }
; { ($A8,$8F) to ($95,$A1) }
; { ($A8,$8F) to ($9B,$8F) }
; { ($A8,$8F) to ($9B,$87) }
; { ($2A,$1E) to ($3E,$37) }
; { ($2A,$1E) to ($2A,$07) }
; { ($2A,$1E) to ($18,$30) }
; { ($95,$B8) to ($88,$BE) }
; { ($95,$B8) to ($81,$99) }
; { ($95,$B8) to ($95,$A1) }
; { ($24,$30) to ($24,$41) }
; { ($24,$30) to ($18,$30) }
; { ($79,$B5) to ($70,$98) }
; { ($79,$B5) to ($46,$B5) }
; { ($79,$B5) to ($88,$BE) }
; { ($4F,$27) to ($70,$27) }
; { ($4F,$27) to ($46,$0A) }
; { ($4F,$27) to ($47,$22) }
; { ($79,$23) to ($82,$23) }
; { ($79,$23) to ($70,$27) }
; { ($79,$23) to ($86,$04) }
; { ($8F,$30) to ($84,$47) }
; { ($8F,$30) to ($82,$23) }
; { ($8F,$30) to ($A6,$19) }
; { ($89,$52) to ($80,$5B) }
; { ($89,$52) to ($84,$47) }
; { ($89,$52) to ($A7,$4B) }
; { ($8B,$66) to ($85,$74) }
; { ($8B,$66) to ($80,$5B) }
; { ($8B,$66) to ($AA,$68) }
; { ($85,$7D) to ($9B,$8F) }
; { ($85,$7D) to ($85,$74) }
; { ($81,$88) to ($81,$99) }
; { ($81,$88) to ($89,$80) }
; { ($81,$88) to ($95,$A1) }
; { ($77,$9D) to ($70,$98) }
; { ($77,$9D) to ($81,$99) }
; { ($77,$9D) to ($88,$BE) }
; { ($4F,$98) to ($70,$98) }
; { ($4F,$98) to ($46,$9C) }
; { ($4F,$98) to ($46,$B5) }
; { ($3D,$9C) to ($46,$9C) }
; { ($3D,$9C) to ($30,$8F) }
; { ($3D,$9C) to ($2E,$BB) }
; { ($3B,$78) to ($36,$6D) }
; { ($3B,$78) to ($24,$87) }
; { ($3B,$78) to ($30,$8F) }
; { ($3F,$64) to ($34,$59) }
; { ($3F,$64) to ($36,$6D) }
; { ($3F,$64) to ($25,$67) }
; { ($3A,$4C) to ($3A,$42) }
; { ($3A,$4C) to ($34,$59) }
; { ($3A,$4C) to ($24,$41) }
; { ($36,$3F) to ($24,$30) }
; { ($36,$3F) to ($3E,$37) }
; { ($36,$3F) to ($3A,$42) }
; { ($3E,$26) to ($47,$22) }
; { ($3E,$26) to ($3E,$37) }
; { ($3E,$26) to ($2A,$07) }
; { ($18,$30) to ($24,$38) }
; { ($15,$57) to ($34,$59) }
; { ($15,$57) to ($25,$67) }
; { ($15,$57) to ($24,$41) }
; { ($18,$74) to ($36,$6D) }
; { ($18,$74) to ($25,$67) }
; { ($18,$74) to ($24,$87) }
; { ($18,$A6) to ($24,$87) }
; { ($18,$A6) to ($30,$8F) }
; { ($18,$A6) to ($2E,$BB) }
; { ($39,$BB) to ($46,$B5) }
; { ($39,$BB) to ($2E,$BB) }
; { ($39,$BB) to ($46,$9C) }
; TABLE#
@label=ScreenType$09
b$A9B8 DEFB $30      ; Width of the interior.
 $A9B9 DEFB $18      ; Height of the interior.
 $A9BA DEFW $BED0    ; Address of the points data.
 $A9BC DEFW $BD7E    ; Address of the lineTo data.

; Screen Type $0A
;
; #UDG$A9BE(ScreenType$0A)
; .
; The geometry data for drawing the screen is in #R$BD7E.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($0A,$79) to ($27,$70) }
; { ($0A,$79) to ($04,$86) }
; { ($0A,$79) to ($0A,$46) }
; { ($04,$91) to ($19,$A6) }
; { ($04,$91) to ($23,$82) }
; { ($04,$91) to ($04,$86) }
; { ($38,$9B) to ($4B,$A7) }
; { ($38,$9B) to ($47,$84) }
; { ($38,$9B) to ($19,$A6) }
; { ($58,$9A) to ($68,$AA) }
; { ($58,$9A) to ($4B,$A7) }
; { ($58,$9A) to ($5B,$80) }
; { ($01,$37) to ($0A,$46) }
; { ($01,$37) to ($22,$47) }
; { ($01,$37) to ($07,$2A) }
; { ($7E,$9B) to ($8F,$9B) }
; { ($7E,$9B) to ($74,$85) }
; { ($7E,$9B) to ($68,$AA) }
; { ($8F,$A8) to ($A1,$95) }
; { ($8F,$A8) to ($8F,$9B) }
; { ($8F,$A8) to ($87,$9B) }
; { ($1E,$2A) to ($37,$3E) }
; { ($1E,$2A) to ($07,$2A) }
; { ($1E,$2A) to ($30,$18) }
; { ($B8,$95) to ($BE,$88) }
; { ($B8,$95) to ($99,$81) }
; { ($B8,$95) to ($A1,$95) }
; { ($30,$24) to ($41,$24) }
; { ($30,$24) to ($30,$18) }
; { ($B5,$79) to ($98,$70) }
; { ($B5,$79) to ($B5,$46) }
; { ($B5,$79) to ($BE,$88) }
; { ($27,$4F) to ($27,$70) }
; { ($27,$4F) to ($0A,$46) }
; { ($27,$4F) to ($22,$47) }
; { ($23,$79) to ($23,$82) }
; { ($23,$79) to ($27,$70) }
; { ($23,$79) to ($04,$86) }
; { ($30,$8F) to ($47,$84) }
; { ($30,$8F) to ($23,$82) }
; { ($30,$8F) to ($19,$A6) }
; { ($52,$89) to ($5B,$80) }
; { ($52,$89) to ($47,$84) }
; { ($52,$89) to ($4B,$A7) }
; { ($66,$8B) to ($74,$85) }
; { ($66,$8B) to ($5B,$80) }
; { ($66,$8B) to ($68,$AA) }
; { ($7D,$85) to ($8F,$9B) }
; { ($7D,$85) to ($74,$85) }
; { ($88,$81) to ($99,$81) }
; { ($88,$81) to ($80,$89) }
; { ($88,$81) to ($A1,$95) }
; { ($9D,$77) to ($98,$70) }
; { ($9D,$77) to ($99,$81) }
; { ($9D,$77) to ($BE,$88) }
; { ($98,$4F) to ($98,$70) }
; { ($98,$4F) to ($9C,$46) }
; { ($98,$4F) to ($B5,$46) }
; { ($9C,$3D) to ($9C,$46) }
; { ($9C,$3D) to ($8F,$30) }
; { ($9C,$3D) to ($BB,$2E) }
; { ($78,$3B) to ($6D,$36) }
; { ($78,$3B) to ($87,$24) }
; { ($78,$3B) to ($8F,$30) }
; { ($64,$3F) to ($59,$34) }
; { ($64,$3F) to ($6D,$36) }
; { ($64,$3F) to ($67,$25) }
; { ($4C,$3A) to ($42,$3A) }
; { ($4C,$3A) to ($59,$34) }
; { ($4C,$3A) to ($41,$24) }
; { ($3F,$36) to ($30,$24) }
; { ($3F,$36) to ($37,$3E) }
; { ($3F,$36) to ($42,$3A) }
; { ($26,$3E) to ($22,$47) }
; { ($26,$3E) to ($37,$3E) }
; { ($26,$3E) to ($07,$2A) }
; { ($30,$18) to ($38,$24) }
; { ($57,$15) to ($59,$34) }
; { ($57,$15) to ($67,$25) }
; { ($57,$15) to ($41,$24) }
; { ($74,$18) to ($6D,$36) }
; { ($74,$18) to ($67,$25) }
; { ($74,$18) to ($87,$24) }
; { ($A6,$18) to ($87,$24) }
; { ($A6,$18) to ($8F,$30) }
; { ($A6,$18) to ($BB,$2E) }
; { ($BB,$39) to ($B5,$46) }
; { ($BB,$39) to ($BB,$2E) }
; { ($BB,$39) to ($9C,$46) }
; TABLE#
@label=ScreenType$0A
b$A9BE DEFB $18      ; Width of the interior.
 $A9BF DEFB $30      ; Height of the interior.
 $A9C0 DEFW $BE54    ; Address of the points data.
 $A9C2 DEFW $BD7E    ; Address of the lineTo data.

; Screen Type $0B
;
; #UDG$A9C4(ScreenType$0B)
; .
; The geometry data for drawing the screen is in #R$A9D0
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($BF,$04) to ($00,$04) }
; { ($BF,$1F) to ($00,$1F) }
; TABLE#
@label=ScreenType$0B
b$A9C4 DEFB $38      ; Width of the interior.
 $A9C5 DEFB $38      ; Height of the interior.
 $A9C6 DEFW $A9D0    ; Address of the points data.
 $A9C8 DEFW $A9D8    ; Address of the lineTo data.

; Screen Type $0C
;
; #UDG$A9CA(ScreenType$0C)
; .
; The geometry data for drawing the screen is in #R$97A9.
; .
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
; .
; #TABLE
; { ($63,$5C) to ($63,$63) }
; { ($63,$5C) to ($5C,$5C) }
; { ($5C,$63) to ($63,$63) }
; { ($5C,$63) to ($5C,$5C) }
; { ($6B,$54) to ($6B,$6B) }
; { ($6B,$54) to ($54,$54) }
; { ($54,$6B) to ($6B,$6B) }
; { ($54,$6B) to ($54,$54) }
; { ($73,$4C) to ($73,$73) }
; { ($73,$4C) to ($4C,$4C) }
; { ($4C,$73) to ($73,$73) }
; { ($4C,$73) to ($4C,$4C) }
; { ($7B,$44) to ($7B,$7B) }
; { ($7B,$44) to ($44,$44) }
; { ($44,$7B) to ($7B,$7B) }
; { ($44,$7B) to ($44,$44) }
; { ($83,$3C) to ($83,$83) }
; { ($83,$3C) to ($3C,$3C) }
; { ($3C,$83) to ($83,$83) }
; { ($3C,$83) to ($3C,$3C) }
; { ($8B,$34) to ($8B,$8B) }
; { ($8B,$34) to ($34,$34) }
; { ($34,$8B) to ($8B,$8B) }
; { ($34,$8B) to ($34,$34) }
; { ($93,$2C) to ($93,$93) }
; { ($93,$2C) to ($2C,$2C) }
; { ($2C,$93) to ($93,$93) }
; { ($2C,$93) to ($2C,$2C) }
; { ($9B,$24) to ($9B,$9B) }
; { ($9B,$24) to ($24,$24) }
; { ($24,$9B) to ($9B,$9B) }
; { ($24,$9B) to ($24,$24) }
; { ($A3,$1C) to ($A3,$A3) }
; { ($A3,$1C) to ($1C,$1C) }
; { ($1C,$A3) to ($A3,$A3) }
; { ($1C,$A3) to ($1C,$1C) }
; { ($AB,$14) to ($AB,$AB) }
; { ($AB,$14) to ($14,$14) }
; { ($14,$AB) to ($AB,$AB) }
; { ($14,$AB) to ($14,$14) }
; { ($B3,$0C) to ($B3,$B3) }
; { ($B3,$0C) to ($0C,$0C) }
; { ($0C,$B3) to ($B3,$B3) }
; { ($0C,$B3) to ($0C,$0C) }
; { ($BB,$04) to ($BB,$BB) }
; { ($BB,$04) to ($04,$04) }
; { ($04,$BB) to ($BB,$BB) }
; { ($04,$BB) to ($04,$04) }
; TABLE#
@label=ScreenType$0C
b$A9CA DEFB $38      ; Width of the interior.
 $A9CB DEFB $38      ; Height of the interior.
 $A9CC DEFW $97A9    ; Address of the points data.
 $A9CE DEFW $9809    ; Address of the lineTo data.

; Screen Type Geometry Data
;
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
@label=ScreenTypeGeometryData
b$A9D0 DEFB $04,$BF,$04,$00,$1F,$BF,$1F,$00
 $A9D8 DEFB $00,$01,$FF
 $A9DB DEFB $02,$03,$FF
 $A9DE DEFB $FF
 $A9DF DEFB $04,$BB,$04,$04,$BB,$04,$BB,$BB
 $A9E7 DEFB $1F,$A0,$1F,$1F,$A0,$1F,$A0,$A0
 $A9EF DEFB $00,$01,$03,$04,$FF
 $A9F4 DEFB $02,$01,$03,$06,$FF
 $A9F9 DEFB $05,$01,$04,$06,$FF
 $A9FE DEFB $07,$03,$04,$06,$FF
 $AA03 DEFB $FF
 $AA04 DEFB $93,$05,$24,$7D,$25,$7D,$02,$8E
 $AA0C DEFB $11,$AD,$26,$B7,$46,$AD,$4F,$90
 $AA14 DEFB $3B,$96,$2E,$90,$79,$AD,$70,$90
 $AA1C DEFB $8C,$B9,$97,$B4,$7A,$96,$81,$93
 $AA24 DEFB $8A,$99,$82,$94,$97,$85,$A2,$BF
 $AA2C DEFB $B9,$9C,$B8,$9B,$AD,$79,$AE,$79
 $AA34 DEFB $91,$71,$90,$70,$90,$4F,$AD,$46
 $AA3C DEFB $28,$72,$2F,$70,$12,$79,$11,$78
 $AA44 DEFB $0A,$74,$12,$46,$2F,$4F,$26,$3C
 $AA4C DEFB $2F,$3C,$05,$2C,$17,$2C,$2F,$2B
 $AA54 DEFB $17,$13,$37,$24,$38,$25,$24,$02
 $AA5C DEFB $23,$01,$46,$12,$4F,$2F,$79,$12
 $AA64 DEFB $70,$2F,$83,$26,$83,$2F,$94,$2F
 $AA6C DEFB $9C,$37,$9B,$38,$BE,$23,$BF,$24
 $AA74 DEFB $AC,$17,$93,$17
 $AA78 DEFB $00,$2F,$31,$39,$FF
 $AA7D DEFB $01,$FF
 $AA7F DEFB $02,$FF
 $AA81 DEFB $03,$01,$04,$20,$FF
 $AA86 DEFB $04,$FF
 $AA88 DEFB $05,$06,$08,$04,$FF
 $AA8D DEFB $06,$FF
 $AA8F DEFB $07,$06,$08,$0B,$FF
 $AA94 DEFB $08,$FF
 $AA96 DEFB $09,$08,$04,$02,$FF
 $AA9B DEFB $0A,$0C,$0B,$06,$FF
 $AAA0 DEFB $0B,$FF
 $AAA2 DEFB $0C,$FF
 $AAA4 DEFB $0D,$13,$0C,$11,$FF
 $AAA9 DEFB $0E,$0F,$0C,$0B,$FF
 $AAAE DEFB $0F,$FF
 $AAB0 DEFB $10,$FF
 $AAB2 DEFB $11,$10,$FF
 $AAB5 DEFB $12,$15,$18,$10,$FF
 $AABA DEFB $13,$10,$FF
 $AABD DEFB $14,$17,$13,$FF
 $AAC1 DEFB $15,$FF
 $AAC3 DEFB $16,$19,$FF
 $AAC6 DEFB $17,$FF
 $AAC8 DEFB $18,$FF
 $AACA DEFB $19,$FF
 $AACC DEFB $1A,$19,$35,$FF
 $AAD0 DEFB $1B,$1A,$36,$16,$FF
 $AAD5 DEFB $1C,$02,$1D,$1E,$FF
 $AADA DEFB $1D,$FF
 $AADC DEFB $1E,$FF
 $AADE DEFB $1F,$FF
 $AAE0 DEFB $20,$1F,$FF
 $AAE3 DEFB $21,$1E,$22,$25,$FF
 $AAE8 DEFB $22,$1D,$FF
 $AAEB DEFB $23,$22,$24,$25,$FF
 $AAF0 DEFB $24,$FF
 $AAF2 DEFB $25,$FF
 $AAF4 DEFB $26,$24,$25,$28,$FF
 $AAF9 DEFB $27,$24,$29,$28,$FF
 $AAFE DEFB $28,$FF
 $AB00 DEFB $29,$FF
 $AB02 DEFB $2A,$FF
 $AB04 DEFB $2B,$29,$FF
 $AB07 DEFB $2C,$28,$2D,$FF
 $AB0B DEFB $2D,$FF
 $AB0D DEFB $2E,$2A,$2D,$FF
 $AB11 DEFB $2F,$2D,$30,$FF
 $AB15 DEFB $30,$31,$2E,$FF
 $AB19 DEFB $31,$FF
 $AB1B DEFB $32,$31,$33,$39,$FF
 $AB20 DEFB $33,$FF
 $AB22 DEFB $34,$33,$36,$FF
 $AB26 DEFB $35,$FF
 $AB28 DEFB $36,$FF
 $AB2A DEFB $37,$FF
 $AB2C DEFB $38,$33,$37,$39,$FF
 $AB31 DEFB $39,$FF
 $AB33 DEFB $FF
 $AB34 DEFB $02,$A3,$02,$1C,$1C,$02,$A3,$02
 $AB3C DEFB $BD,$1C,$BD,$A3,$A3,$BD,$1C,$BD
 $AB44 DEFB $30,$A0,$1F,$8F,$1F,$30,$30,$1F
 $AB4C DEFB $8F,$1F,$A0,$30,$A0,$8F,$8F,$A0
 $AB54 DEFB $00,$09,$07,$01,$FF
 $AB59 DEFB $02,$01,$03,$0B,$FF
 $AB5E DEFB $04,$03,$05,$0D,$FF
 $AB63 DEFB $06,$05,$0F,$07,$FF
 $AB68 DEFB $08,$07,$09,$0F,$FF
 $AB6D DEFB $0A,$01,$09,$0B,$FF
 $AB72 DEFB $0C,$03,$0B,$0D,$FF
 $AB77 DEFB $0E,$05,$0D,$0F,$FF
 $AB7C DEFB $FF
 $AB7D DEFB $03,$9C,$03,$23,$BC,$23,$BC,$9C
 $AB85 DEFB $1F,$80,$1F,$3F,$A0,$3F,$A0,$80
 $AB8D DEFB $23,$03,$9C,$03,$9C,$BC,$23,$BC
 $AB95 DEFB $3F,$1F,$80,$1F,$80,$A0,$3F,$A0
 $AB9D DEFB $8A,$BA,$08,$04,$35,$BB,$8A,$BB
 $ABA5 DEFB $B7,$04,$38,$28,$38,$3D,$3D,$3D
 $ABAD DEFB $3D,$51,$41,$51,$41,$63,$45,$63
 $ABB5 DEFB $45,$73,$48,$73,$48,$81,$4B,$81
 $ABBD DEFB $4B,$8D,$4E,$8D,$4E,$97,$50,$97
 $ABC5 DEFB $50,$9F,$6F,$9F,$6F,$97,$71,$97
 $ABCD DEFB $71,$8D,$74,$8D,$74,$81,$77,$81
 $ABD5 DEFB $77,$73,$7A,$73,$7A,$63,$7E,$63
 $ABDD DEFB $7E,$51,$82,$51,$82,$3D,$87,$3D
 $ABE5 DEFB $87,$28,$35,$BA
 $ABE9 DEFB $01,$FF
 $ABEB DEFB $02,$03,$01,$FF
 $ABEF DEFB $03,$FF
 $ABF1 DEFB $04,$01,$03,$FF
 $ABF5 DEFB $05,$01,$FF
 $ABF8 DEFB $06,$23,$05,$FF
 $ABFC DEFB $07,$FF
 $ABFE DEFB $08,$21,$07,$FF
 $AC02 DEFB $09,$FF
 $AC04 DEFB $0A,$1F,$09,$FF
 $AC08 DEFB $0B,$FF
 $AC0A DEFB $0C,$1D,$0B,$FF
 $AC0E DEFB $0D,$FF
 $AC10 DEFB $0E,$1B,$0D,$FF
 $AC14 DEFB $0F,$FF
 $AC16 DEFB $10,$19,$0F,$FF
 $AC1A DEFB $11,$FF
 $AC1C DEFB $12,$17,$11,$02,$FF
 $AC21 DEFB $17,$03,$FF
 $AC24 DEFB $18,$17,$FF
 $AC27 DEFB $19,$FF
 $AC29 DEFB $1A,$19,$FF
 $AC2C DEFB $1B,$FF
 $AC2E DEFB $1C,$1B,$FF
 $AC31 DEFB $1D,$FF
 $AC33 DEFB $1E,$1D,$FF
 $AC36 DEFB $1F,$FF
 $AC38 DEFB $20,$1F,$FF
 $AC3B DEFB $21,$FF
 $AC3D DEFB $22,$21,$FF
 $AC40 DEFB $23,$FF
 $AC42 DEFB $24,$04,$05,$23,$FF
 $AC47 DEFB $25,$FF
 $AC49 DEFB $FF
 $AC4A DEFB $8A,$05,$08,$BB,$38,$04,$8A,$04
 $AC52 DEFB $B7,$BB,$38,$97,$38,$82,$3D,$82
 $AC5A DEFB $3D,$6E,$41,$6E,$41,$5C,$45,$5C
 $AC62 DEFB $45,$4C,$48,$4C,$48,$3E,$4B,$3E
 $AC6A DEFB $4B,$32,$4E,$32,$4E,$28,$50,$28
 $AC72 DEFB $50,$20,$6F,$20,$6F,$28,$71,$28
 $AC7A DEFB $71,$32,$74,$32,$74,$3E,$77,$3E
 $AC82 DEFB $77,$4C,$7A,$4C,$7A,$5C,$7E,$5C
 $AC8A DEFB $7E,$6E,$82,$6E,$82,$82,$87,$82
 $AC92 DEFB $87,$97,$35,$05
 $AC96 DEFB $05,$8A,$BB,$08,$04,$38,$04,$8A
 $AC9E DEFB $BB,$B7,$97,$38,$82,$38,$82,$3D
 $ACA6 DEFB $64,$3D,$6E,$41,$5C,$41,$5C,$45
 $ACAE DEFB $4C,$45,$4C,$48,$3E,$48,$3E,$4B
 $ACB6 DEFB $32,$4B,$32,$4E,$28,$4E,$28,$50
 $ACBE DEFB $20,$50,$20,$6F,$28,$6F,$28,$71
 $ACC6 DEFB $32,$71,$32,$74,$3E,$74,$3E,$77
 $ACCE DEFB $4C,$77,$4C,$7A,$5C,$7A,$5C,$7E
 $ACD6 DEFB $6E,$7E,$6E,$82,$82,$82,$82,$87
 $ACDE DEFB $97,$87,$05,$35
 $ACE2 DEFB $BA,$8A,$04,$08,$BB,$35,$BB,$8A
 $ACEA DEFB $04,$B7,$28,$38,$3D,$38,$3D,$3D
 $ACF2 DEFB $51,$3D,$51,$41,$63,$41,$63,$45
 $ACFA DEFB $73,$45,$73,$48,$81,$48,$81,$4B
 $AD02 DEFB $8D,$4B,$8D,$4E,$97,$4E,$97,$50
 $AD0A DEFB $9F,$50,$9F,$6F,$97,$6F,$97,$71
 $AD12 DEFB $8D,$71,$8D,$74,$81,$74,$81,$77
 $AD1A DEFB $73,$77,$73,$7A,$63,$7A,$63,$7E
 $AD22 DEFB $51,$7E,$51,$82,$3D,$82,$3D,$87
 $AD2A DEFB $28,$87,$BA,$35

; Sprite: Knight Walking Down 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AD2F-$AD30;$AD3F-$AD40;$AD4F-$AD50{,6*4}(KnightWalkingDown1)
; }
; TABLE#
@label=SpriteKnightWalkingDown1
b$AD2E DEFB $12                             ; Height (in pixels).
 $AD2F DEFB $3C,$00,$3C,$F0,$1F,$78,$1B,$94 ; {Graphic data.
 $AD37 DEFB $05,$4E,$6B,$6E,$E9,$2C,$EF,$E8 ;
 $AD3F DEFB $44,$40,$26,$C8,$20,$08,$30,$18 ;
 $AD47 DEFB $3F,$F8,$13,$F0,$13,$F0,$09,$E0 ;
 $AD4F DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Down
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$AD54-$AD55;$AD64-$AD65;$AD74-$AD75{,6*4}(KnightDown)
; }
; TABLE#
@label=SpriteKnightDown
b$AD53 DEFB $12                             ; Height (in pixels).
 $AD54 DEFB $1E,$F0,$0E,$E0,$05,$40,$03,$F0 ; {Graphic data.
 $AD5C DEFB $65,$4C,$EB,$6E,$E9,$2E,$6F,$EC ;
 $AD64 DEFB $04,$40,$26,$C8,$20,$08,$30,$18 ;
 $AD6C DEFB $3F,$F8,$13,$F0,$13,$F0,$09,$E0 ;
 $AD74 DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Walking Down 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AD79-$AD7A;$AD89-$AD8A;$AD99-$AD9A{,6*4}(KnightWalkingDown2)
; }
; TABLE#
@label=SpriteKnightWalkingDown2
b$AD78 DEFB $12                             ; Height (in pixels).
 $AD79 DEFB $00,$78,$1E,$78,$3D,$F0,$53,$B0 ; {Graphic data.
 $AD81 DEFB $E5,$40,$EB,$6C,$69,$2E,$2F,$EE ;
 $AD89 DEFB $04,$44,$26,$C8,$20,$08,$30,$18 ;
 $AD91 DEFB $3F,$F8,$13,$F0,$13,$F0,$09,$E0 ;
 $AD99 DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Walking Up 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AD9E-$AD9F;$ADAE-$ADAF;$ADBE-$ADBF{,6*4}(KnightWalkingUp1)
; }
; TABLE#
@label=SpriteKnightWalkingUp1
b$AD9D DEFB $12                             ; Height (in pixels).
 $AD9E DEFB $3C,$00,$3C,$F0,$1F,$78,$1B,$94 ; {Graphic data.
 $ADA6 DEFB $07,$CE,$6F,$EE,$EF,$EC,$EF,$E8 ;
 $ADAE DEFB $40,$00,$3F,$F8,$27,$F8,$27,$F8 ;
 $ADB6 DEFB $30,$38,$13,$F0,$13,$F0,$09,$E0 ;
 $ADBE DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Up
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$ADC3-$ADC4;$ADD3-$ADD4;$ADE3-$ADE4{,6*4}(KnightUp) }
; TABLE#
@label=SpriteKnightUp
b$ADC2 DEFB $12                             ; Height (in pixels).
 $ADC3 DEFB $1E,$F0,$0E,$E0,$05,$40,$03,$80 ; {Graphic data.
 $ADCB DEFB $67,$CC,$EF,$EE,$EF,$EE,$6F,$EC ;
 $ADD3 DEFB $00,$00,$3F,$F8,$27,$F8,$27,$F8 ;
 $ADDB DEFB $30,$38,$13,$F0,$13,$F0,$09,$E0 ;
 $ADE3 DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Walking Up 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$ADE8-$ADE9;$ADF8-$ADF9;$AE08-$AE09{,6*4}(KnightWalkingUp2)
; }
; TABLE#
@label=SpriteKnightWalkingUp2
b$ADE7 DEFB $12                             ; Height (in pixels).
 $ADE8 DEFB $00,$78,$1E,$78,$3D,$F0,$53,$B0 ; {Graphic data.
 $ADF0 DEFB $E7,$C0,$EF,$EC,$6F,$EE,$2F,$EE ;
 $ADF8 DEFB $00,$04,$3F,$F8,$27,$F8,$27,$F8 ;
 $AE00 DEFB $30,$38,$13,$F0,$13,$F0,$09,$E0 ;
 $AE08 DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Walking Left 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AE0D-$AE0E;$AE1D-$AE1E;$AE2D-$AE2E{,6*4}(KnightWalkingLeft1)
; }
; TABLE#
@label=SpriteKnightWalkingLeft1
b$AE0C DEFB $12                             ; Height (in pixels).
 $AE0D DEFB $0C,$70,$1C,$38,$3B,$98,$37,$60 ; {Graphic data.
 $AE15 DEFB $06,$10,$37,$08,$27,$98,$1F,$F0 ;
 $AE1D DEFB $67,$80,$6B,$7C,$1A,$FC,$01,$FC ;
 $AE25 DEFB $1F,$FC,$08,$08,$09,$F8,$04,$F0 ;
 $AE2D DEFB $02,$E0,$01,$40                 ; }

; Sprite: Knight Left
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$AE32-$AE33;$AE42-$AE43;$AE52-$AE53{,6*4}(KnightLeft)
; }
; TABLE#
@label=SpriteKnightLeft
b$AE31 DEFB $12                             ; Height (in pixels).
 $AE32 DEFB $07,$C0,$03,$C0,$00,$00,$03,$F0 ; {Graphic data.
 $AE3A DEFB $06,$38,$04,$18,$0F,$98,$1F,$F0 ;
 $AE42 DEFB $67,$80,$6B,$7C,$1A,$FC,$01,$FC ;
 $AE4A DEFB $1F,$FC,$08,$08,$09,$F8,$04,$F0 ;
 $AE52 DEFB $02,$E0,$01,$40                 ; }

; Sprite: Knight Walking Left 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AE57-$AE58;$AE67-$AE68;$AE77-$AE78{,6*4}(KnightWalkingLeft2)
; }
; TABLE#
@label=SpriteKnightWalkingLeft2
b$AE56 DEFB $12                             ; Height (in pixels).
 $AE57 DEFB $0C,$70,$1C,$38,$3B,$D8,$37,$E0 ; {Graphic data.
 $AE5F DEFB $04,$74,$08,$3A,$07,$1E,$1F,$F8 ;
 $AE67 DEFB $67,$80,$6B,$7C,$1A,$FC,$01,$FC ;
 $AE6F DEFB $1F,$FC,$08,$08,$09,$F8,$04,$F0 ;
 $AE77 DEFB $02,$E0,$01,$40                 ; }

; Sprite: Knight Walking Right 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AE7C-$AE7D;$AE8C-$AE8D;$AE9C-$AE9D{,6*4}(KnightWalkingRight1)
; }
; TABLE#
@label=SpriteKnightWalkingRight1
b$AE7B DEFB $12                             ; Height (in pixels).
 $AE7C DEFB $0E,$30,$1C,$38,$1B,$DC,$07,$EC ; {Graphic data.
 $AE84 DEFB $2E,$20,$5C,$10,$78,$E0,$1F,$F8 ;
 $AE8C DEFB $01,$E6,$3E,$D6,$27,$58,$27,$80 ;
 $AE94 DEFB $27,$F8,$10,$30,$13,$F0,$09,$E0 ;
 $AE9C DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Right
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AEA1-$AEA2;$AEB1-$AEB2;$AEC1-$AEC2{,6*4}(KnightRight)
; }
; TABLE#
@label=SpriteKnightRight
b$AEA0 DEFB $12                             ; Height (in pixels).
 $AEA1 DEFB $03,$E0,$03,$C0,$00,$00,$0F,$C0 ; {Graphic data.
 $AEA9 DEFB $1C,$60,$18,$20,$19,$F0,$0F,$F8 ;
 $AEB1 DEFB $01,$E6,$3E,$D6,$27,$58,$27,$80 ;
 $AEB9 DEFB $27,$F8,$10,$30,$13,$F0,$09,$E0 ;
 $AEC1 DEFB $05,$C0,$02,$80                 ; }

; Sprite: Knight Walking Right 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$AEC6-$AEC7;$AED6-$AED7;$AEE6-$AEE7{,6*4}(KnightWalkingRight2)
; }
; TABLE#
@label=SpriteKnightWalkingRight2
b$AEC5 DEFB $12                             ; Height (in pixels).
 $AEC6 DEFB $0E,$30,$1C,$38,$18,$DC,$06,$EC ; {Graphic data.
 $AECE DEFB $08,$60,$10,$EC,$19,$E4,$0F,$F8 ;
 $AED6 DEFB $01,$E6,$3E,$D6,$27,$58,$27,$80 ;
 $AEDE DEFB $27,$F8,$10,$30,$13,$F0,$09,$E0 ;
 $AEE6 DEFB $05,$C0,$02,$80                 ; }

; Blank
;
; Blank sprite or attribute.
@label=Blank
b$AEEA DEFB $00      ; Width (in bytes).
 $AEEB DEFB $00      ; Height (in pixels).

; Sprite: Empty
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AEED-$AEEE;$AEFD-$AEFE(Empty) }
; TABLE#
@label=SpriteEmpty
b$AEEC DEFB $10                             ; Height (in pixels).
 $AEED DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $AEF5 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AEFD DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AF05 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Sprite: Leaf
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AF0E-$AF0F;$AF1E-$AF1F(Leaf) }
; TABLE#
@label=SpriteLeaf
b$AF0D DEFB $10                             ; Height (in pixels).
 $AF0E DEFB $00,$03,$00,$3F,$00,$FA,$03,$F2 ; {Graphic data.
 $AF16 DEFB $06,$0A,$0F,$DA,$1F,$BC,$3F,$3C ;
 $AF1E DEFB $20,$B8,$7D,$B8,$7B,$B0,$F3,$A0 ;
 $AF26 DEFB $9B,$C0,$DB,$80,$DE,$00,$F8,$00 ; }

; Sprite: Key
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AF2F-$AF30;$AF3F-$AF40{,6*4}(Key) }
; TABLE#
@label=SpriteKey
b$AF2E DEFB $0A                             ; Height (in pixels).
 $AF2F DEFB $0C,$00,$1E,$17,$12,$12,$7B,$1A ; {Graphic data.
 $AF37 DEFB $CF,$FF,$CF,$FF,$7B,$00,$12,$00 ;
 $AF3F DEFB $1E,$00,$0C,$00                 ; }

; Sprite: Medicine Bottle
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$AF44-$AF45;$AF54-$AF55;$AF64-$AF65{,4*4}(MedicineBottle)
; }
; TABLE#
@label=SpriteMedicineBottle
b$AF43 DEFB $14                             ; Height (in pixels).
 $AF44 DEFB $19,$FC,$19,$FC,$19,$C0,$19,$DC ; {Graphic data.
 $AF4C DEFB $19,$DC,$19,$DC,$19,$DC,$19,$DC ;
 $AF54 DEFB $19,$DC,$19,$DC,$19,$C0,$19,$FC ;
 $AF5C DEFB $1C,$FC,$0E,$F8,$03,$60,$01,$40 ;
 $AF64 DEFB $01,$40,$01,$40,$02,$E0,$01,$C0 ; }

; Sprite: Bottle
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AF6D-$AF6E;$AF7D-$AF7E;$AF8D-$AF8E{,4*4}(Bottle) }
; TABLE#
@label=SpriteBottle
b$AF6C DEFB $14                             ; Height (in pixels).
 $AF6D DEFB $19,$F0,$19,$F0,$19,$F0,$19,$F0 ; {Graphic data.
 $AF75 DEFB $19,$F0,$19,$F0,$19,$F0,$19,$F0 ;
 $AF7D DEFB $19,$F0,$09,$E0,$0D,$E0,$0D,$E0 ;
 $AF85 DEFB $05,$C0,$05,$C0,$06,$C0,$02,$80 ;
 $AF8D DEFB $02,$80,$02,$80,$05,$C0,$03,$80 ; }

; Sprite: Broken
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AF96-$AF97;$AFA6-$AFA7(Broken) }
; TABLE#
@label=SpriteBroken
b$AF95 DEFB $10                             ; Height (in pixels).
 $AF96 DEFB $A0,$00,$B0,$00,$98,$00,$AF,$80 ; {Graphic data.
 $AF9E DEFB $D0,$00,$DF,$C0,$6F,$E0,$73,$F0 ;
 $AFA6 DEFB $3C,$74,$3F,$88,$1F,$F8,$0F,$F8 ;
 $AFAE DEFB $07,$F8,$03,$FC,$00,$FE,$00,$1F ; }

; Sprite: Rope
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AFB7-$AFB8;$AFC7-$AFC8(Rope) }
; TABLE#
@label=SpriteRope
b$AFB6 DEFB $10                             ; Height (in pixels).
 $AFB7 DEFB $C0,$00,$E0,$02,$E0,$0C,$00,$30 ; {Graphic data.
 $AFBF DEFB $C0,$30,$E0,$40,$E0,$C0,$40,$80 ;
 $AFC7 DEFB $00,$30,$E0,$36,$70,$06,$70,$03 ;
 $AFCF DEFB $2C,$1E,$1E,$EC,$0E,$E0,$04,$60 ; }

; Sprite: Arm
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AFD8-$AFD9;$AFE8-$AFE9(Arm) }
; TABLE#
@label=SpriteArm
b$AFD7 DEFB $10                             ; Height (in pixels).
 $AFD8 DEFB $90,$08,$B1,$0E,$F6,$1E,$7C,$37 ; {Graphic data.
 $AFE0 DEFB $78,$67,$30,$CF,$31,$9E,$33,$3C ;
 $AFE8 DEFB $32,$78,$76,$F0,$76,$F0,$75,$E0 ;
 $AFF0 DEFB $E7,$C0,$3F,$00,$3E,$00,$18,$00 ; }

; Sprite: Bowl
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$AFF9-$AFFA;$B009-$B00A(Bowl) }
; TABLE#
@label=SpriteBowl
b$AFF8 DEFB $10                             ; Height (in pixels).
 $AFF9 DEFB $05,$E0,$00,$00,$33,$FC,$67,$FE ; {Graphic data.
 $B001 DEFB $00,$00,$C7,$FF,$FF,$FF,$00,$00 ;
 $B009 DEFB $6F,$FE,$67,$3E,$7B,$DE,$3F,$EC ;
 $B011 DEFB $0B,$E8,$0C,$F0,$0F,$80,$07,$00 ; }

; Sprite: Apple
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$B01A-$B01B;$B02A-$B02B(Apple) }
; TABLE#
@label=SpriteApple
b$B019 DEFB $10                             ; Height (in pixels).
 $B01A DEFB $03,$E0,$0F,$F8,$1F,$FC,$3F,$FE ; {Graphic data.
 $B022 DEFB $7F,$FE,$7F,$FF,$7F,$FF,$67,$FF ;
 $B02A DEFB $63,$FF,$33,$FF,$3B,$06,$1F,$F8 ;
 $B032 DEFB $0E,$DC,$01,$86,$07,$7B,$06,$3C ; }

; Status Panel Graphic Data
;
; #UDG$B03A(StatusPanel)
; .
; The status panel graphic is 8 columns (64 pixels) wide and 24 rows (192
; pixels) high.
; .
; Each 8x8 UDG is drawn using the map data in #R$B32A.
@label=StatusPanelGraphic
b$B03A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $B042 DEFB $00,$00,$03,$0F,$1F,$3D,$7E,$79
 $B04A DEFB $00,$00,$FF,$FF,$FF,$B4,$4A,$00
 $B052 DEFB $00,$00,$80,$FE,$FF,$D5,$AD,$42
 $B05A DEFB $00,$00,$00,$00,$F0,$7F,$56,$50
 $B062 DEFB $00,$00,$00,$00,$03,$FF,$B5,$44
 $B06A DEFB $00,$00,$01,$1F,$FF,$DA,$25,$41
 $B072 DEFB $00,$07,$FF,$FE,$FC,$FC,$D8,$3F
 $B07A DEFB $00,$F0,$08,$04,$02,$02,$02,$F1
 $B082 DEFB $D0,$CA,$E0,$C0,$C0,$C0,$60,$60
 $B08A DEFB $3B,$1B,$1B,$1B,$1B,$19,$0C,$0C
 $B092 DEFB $89,$89,$85,$85,$FD,$81,$81,$81
 $B09A DEFB $0C,$06,$03,$03,$03,$01,$01,$01
 $B0A2 DEFB $41,$42,$FC,$00,$00,$80,$80,$80
 $B0AA DEFB $60,$30,$1C,$06,$3E,$1C,$0C,$06
 $B0B2 DEFB $0C,$18,$18,$18,$0C,$0C,$0C,$0C
 $B0BA DEFB $06,$06,$06,$06,$06,$06,$06,$06
 $B0C2 DEFB $06,$06,$06,$06,$06,$06,$0C,$0C
 $B0CA DEFB $0C,$0C,$0C,$18,$18,$18,$18,$18
 $B0D2 DEFB $18,$30,$30,$30,$30,$30,$30,$30
 $B0DA DEFB $30,$60,$60,$60,$60,$60,$60,$60
 $B0E2 DEFB $60,$60,$60,$60,$30,$30,$30,$18
 $B0EA DEFB $0C,$18,$18,$18,$30,$30,$18,$30
 $B0F2 DEFB $30,$38,$0C,$06,$0C,$18,$18,$18
 $B0FA DEFB $0C,$0C,$0C,$0C,$0C,$06,$06,$06
 $B102 DEFB $06,$06,$06,$06,$03,$03,$03,$03
 $B10A DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $B112 DEFB $03,$03,$03,$03,$03,$06,$06,$06
 $B11A DEFB $06,$06,$06,$06,$0C,$0C,$0C,$0C
 $B122 DEFB $0C,$18,$18,$18,$18,$30,$30,$30
 $B12A DEFB $30,$60,$60,$60,$7F,$7E,$0C,$18
 $B132 DEFB $00,$00,$0C,$1E,$1D,$0B,$07,$37
 $B13A DEFB $7F,$FF,$80,$7F,$FF,$C1,$80,$00
 $B142 DEFB $00,$80,$98,$3C,$DC,$E8,$F0,$76
 $B14A DEFB $01,$03,$03,$03,$06,$06,$0C,$7F
 $B152 DEFB $80,$00,$00,$00,$00,$00,$00,$FC
 $B15A DEFB $70,$F0,$18,$FC,$F8,$C0,$C0,$C0
 $B162 DEFB $6E,$EC,$EC,$EC,$EC,$EC,$6E,$37
 $B16A DEFB $3E,$49,$49,$49,$49,$2A,$1C,$08
 $B172 DEFB $3B,$1B,$1B,$1B,$1B,$1B,$3B,$76
 $B17A DEFB $00,$80,$80,$80,$80,$80,$00,$00
 $B182 DEFB $00,$03,$07,$0E,$07,$01,$00,$00
 $B18A DEFB $FD,$C3,$DF,$2F,$97,$EB,$77,$31
 $B192 DEFB $C2,$C1,$81,$81,$01,$FD,$05,$05
 $B19A DEFB $C0,$60,$60,$60,$30,$18,$0F,$07
 $B1A2 DEFB $07,$0B,$1D,$1E,$0C,$00,$00,$FF
 $B1AA DEFB $80,$C1,$FF,$7F,$80,$FF,$7F,$3E
 $B1B2 DEFB $F0,$E8,$DC,$3C,$9B,$9F,$7C,$E0
 $B1BA DEFB $00,$00,$00,$3F,$FF,$C0,$00,$00
 $B1C2 DEFB $00,$00,$00,$00,$F0,$FF,$0F,$00
 $B1CA DEFB $30,$3F,$30,$18,$18,$0C,$FE,$FF
 $B1D2 DEFB $89,$F1,$01,$01,$02,$04,$08,$F0
 $B1DA DEFB $FF,$00,$00,$00,$00,$00,$00,$00
 $B1E2 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B1EA DEFB $FF,$FF,$7F,$7B,$7B,$39,$39,$38
 $B1F2 DEFB $00,$00,$80,$80,$80,$80,$C0,$C0
 $B1FA DEFB $10,$10,$10,$00,$00,$00,$00,$00
 $B202 DEFB $60,$20,$10,$00,$00,$00,$00,$00
 $B20A DEFB $C0,$C0,$C0,$60,$60,$60,$30,$30
 $B212 DEFB $30,$18,$18,$18,$18,$30,$30,$30
 $B21A DEFB $18,$0C,$0C,$0C,$0C,$0C,$0C,$0C
 $B222 DEFB $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
 $B22A DEFB $0C,$0C,$0C,$0C,$18,$18,$18,$18
 $B232 DEFB $18,$30,$30,$30,$30,$60,$60,$60
 $B23A DEFB $60,$60,$60,$C0,$C0,$C0,$C0,$C0
 $B242 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0
 $B24A DEFB $60,$60,$60,$60,$60,$30,$30,$30
 $B252 DEFB $18,$18,$18,$0C,$0C,$0C,$0C,$06
 $B25A DEFB $06,$06,$06,$06,$03,$03,$03,$03
 $B262 DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $B26A DEFB $06,$06,$06,$06,$06,$0C,$0C,$0C
 $B272 DEFB $0C,$18,$18,$18,$18,$30,$30,$30
 $B27A DEFB $60,$60,$60,$C0,$C0,$C0,$80,$80
 $B282 DEFB $07,$0F,$0F,$07,$01,$0F,$07,$00
 $B28A DEFB $C3,$E7,$0F,$CE,$EF,$E7,$C3,$00
 $B292 DEFB $C3,$E7,$8F,$0E,$1F,$E7,$C3,$00
 $B29A DEFB $8F,$CF,$EE,$EF,$EF,$CE,$8E,$00
 $B2A2 DEFB $CF,$EF,$6E,$EF,$CE,$CF,$EF,$00
 $B2AA DEFB $80,$80,$00,$C0,$00,$E0,$E0,$00
 $B2B2 DEFB $00,$00,$08,$1E,$27,$23,$71,$5F
 $B2BA DEFB $00,$00,$40,$40,$80,$80,$00,$C3
 $B2C2 DEFB $00,$00,$00,$00,$00,$00,$00,$16
 $B2CA DEFB $00,$00,$00,$05,$03,$03,$03,$33
 $B2D2 DEFB $00,$00,$00,$AC,$18,$18,$18,$18
 $B2DA DEFB $4F,$22,$1F,$05,$7F,$47,$3B,$00
 $B2E2 DEFB $EF,$6C,$2C,$AC,$4C,$CE,$87,$00
 $B2EA DEFB $BE,$18,$18,$18,$18,$9C,$0C,$00
 $B2F2 DEFB $FB,$DB,$DB,$DB,$DB,$FB,$61,$00
 $B2FA DEFB $18,$18,$18,$18,$18,$DE,$8C,$00
 $B302 DEFB $FE,$FE,$FE,$38,$38,$38,$38,$00
 $B30A DEFB $7C,$7C,$38,$38,$38,$7C,$7C,$00
 $B312 DEFB $82,$EE,$FE,$FE,$D6,$D6,$D6,$00
 $B31A DEFB $F8,$F8,$E0,$FC,$E0,$FE,$FE,$00
 $B322 DEFB $00,$18,$18,$00,$00,$18,$18,$00

; Status Panel Map Data
;
; Indices in #R$B03A to draw the status panel graphic as an array of 8x8 UDGs.
; .
; The status panel graphic is 8 columns (64 pixels) wide and 24 rows (192
; pixels) high.
@label=StatusPanelMapData
b$B32A DEFB $01,$02,$03,$04,$05,$06,$07,$08
 $B332 DEFB $09,$4F,$50,$51,$52,$53,$0A,$0B
 $B33A DEFB $0E,$54,$55,$56,$57,$58,$0C,$0D
 $B342 DEFB $0F,$00,$00,$00,$00,$00,$00,$3A
 $B34A DEFB $10,$00,$00,$00,$00,$00,$00,$3B
 $B352 DEFB $11,$00,$00,$00,$00,$00,$00,$3C
 $B35A DEFB $12,$00,$00,$00,$00,$00,$00,$3D
 $B362 DEFB $13,$00,$59,$5A,$5B,$5C,$00,$3E
 $B36A DEFB $14,$00,$00,$00,$5D,$00,$00,$3F
 $B372 DEFB $15,$49,$4A,$4B,$4C,$4D,$4E,$40
 $B37A DEFB $16,$00,$00,$00,$00,$00,$00,$41
 $B382 DEFB $17,$00,$00,$00,$00,$00,$00,$42
 $B38A DEFB $18,$00,$00,$00,$00,$00,$00,$43
 $B392 DEFB $19,$00,$00,$00,$00,$00,$00,$44
 $B39A DEFB $1A,$00,$00,$00,$00,$00,$00,$45
 $B3A2 DEFB $1B,$00,$00,$00,$00,$00,$00,$46
 $B3AA DEFB $1C,$00,$00,$00,$00,$00,$00,$47
 $B3B2 DEFB $1D,$00,$00,$00,$00,$00,$00,$48
 $B3BA DEFB $1E,$1F,$20,$21,$00,$00,$22,$23
 $B3C2 DEFB $24,$25,$26,$27,$28,$29,$2A,$2B
 $B3CA DEFB $2C,$2D,$2E,$2F,$30,$31,$32,$33
 $B3D2 DEFB $00,$34,$35,$00,$00,$00,$00,$00
 $B3DA DEFB $00,$00,$36,$37,$00,$00,$00,$00
 $B3E2 DEFB $00,$00,$38,$39,$00,$00,$00,$00

; Sprite: Big Door Frame
;
; #UDGTABLE
; {
; #UDGARRAY6,,4,6,,2;$B3EC-$B3F1;$B41C-$B421;$B44C-$B451;$B47C-$B481@$B4AE-$B4C5(BigDoorFrame)
; }
; TABLE#
@label=SpriteBigDoorFrame
b$B3EA DEFB $06                             ; Width (in bytes).
 $B3EB DEFB $20                             ; Height (in pixels).
 $B3EC DEFB $FF,$FE,$00,$00,$3F,$FF,$00,$FE ; {Graphic data.
 $B3F4 DEFB $00,$00,$7F,$00,$01,$FC,$00,$00 ;
 $B3FC DEFB $3F,$80,$00,$00,$00,$00,$00,$00 ;
 $B404 DEFB $01,$F8,$00,$00,$1F,$80,$03,$F8 ;
 $B40C DEFB $00,$00,$1F,$C0,$03,$F0,$00,$00 ;
 $B414 DEFB $0F,$C0,$00,$00,$00,$00,$00,$00 ;
 $B41C DEFB $07,$E0,$00,$00,$07,$E0,$0F,$E0 ;
 $B424 DEFB $00,$00,$07,$F0,$0F,$C0,$00,$00 ;
 $B42C DEFB $03,$F0,$00,$00,$00,$00,$00,$00 ;
 $B434 DEFB $1F,$80,$00,$00,$01,$F8,$1F,$80 ;
 $B43C DEFB $00,$00,$01,$F8,$1F,$80,$00,$00 ;
 $B444 DEFB $01,$F8,$10,$00,$00,$00,$00,$08 ;
 $B44C DEFB $07,$80,$00,$00,$01,$E0,$1F,$80 ;
 $B454 DEFB $00,$00,$01,$F8,$1F,$00,$00,$00 ;
 $B45C DEFB $00,$F8,$0E,$40,$00,$00,$02,$70 ;
 $B464 DEFB $08,$E0,$00,$00,$07,$10,$03,$F4 ;
 $B46C DEFB $00,$00,$2F,$C0,$07,$EF,$00,$00 ;
 $B474 DEFB $F7,$E0,$03,$CE,$77,$EE,$73,$C0 ;
 $B47C DEFB $01,$DE,$F6,$6F,$7B,$80,$00,$9E ;
 $B484 DEFB $F6,$6F,$79,$00,$00,$3C,$E6,$67 ;
 $B48C DEFB $3C,$00,$00,$1D,$EE,$EE,$B8,$00 ;
 $B494 DEFB $00,$01,$EE,$77,$80,$00,$00,$00 ;
 $B49C DEFB $08,$10,$00,$00,$00,$00,$0F,$F0 ;
 $B4A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Attributes: Big Door Frame
@label=AttribBigDoorFrame
b$B4AC DEFB $06                             ; Width (in bytes).
 $B4AD DEFB $04                             ; Height (in bytes).
 $B4AE DEFB $43,$43,$00,$00,$43,$43,$43,$43 ; {Colour attribute data.
 $B4B6 DEFB $00,$00,$43,$43,$43,$43,$43,$43 ;
 $B4BE DEFB $43,$43,$43,$43,$43,$43,$43,$43 ; }

; Sprite: Picture
;
; #UDGTABLE
; { #UDGARRAY4,$07,4,4,,2;$B4C8-$B4CB;$B4E8-$B4EB;$B508-$B50B(Picture) }
; TABLE#
@label=SpritePicture
b$B4C6 DEFB $04                             ; Width (in bytes).
 $B4C7 DEFB $18                             ; Height (in pixels).
 $B4C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $B4D0 DEFB $03,$80,$01,$C0,$07,$C6,$63,$E0 ;
 $B4D8 DEFB $06,$7F,$FE,$60,$03,$FF,$FF,$C0 ;
 $B4E0 DEFB $01,$80,$01,$80,$01,$80,$01,$80 ;
 $B4E8 DEFB $03,$8C,$31,$C0,$07,$8F,$F1,$E0 ;
 $B4F0 DEFB $03,$0C,$30,$C0,$0B,$0F,$F0,$D0 ;
 $B4F8 DEFB $0F,$0C,$90,$F0,$07,$0D,$B0,$E0 ;
 $B500 DEFB $06,$07,$E0,$60,$0E,$03,$C0,$70 ;
 $B508 DEFB $1E,$00,$00,$78,$37,$FF,$FF,$EC ;
 $B510 DEFB $1F,$FF,$FF,$F4,$35,$FF,$FF,$AC ;
 $B518 DEFB $1B,$1C,$31,$D8,$0E,$06,$60,$70 ;
 $B520 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Attributes: Picture
@label=AttribPicture
b$B528 DEFB $04                             ; Width (in bytes).
 $B529 DEFB $03                             ; Height (in bytes).
 $B52A DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {Colour attribute data.
 $B532 DEFB $FF,$FF,$FF,$FF                 ; }

; Sprite: Serf Walking Down 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B537-$B538;$B547-$B548;$B557-$B558{,6*4}(SerfWalkingDown1)
; }
; TABLE#
@label=SpriteSerfWalkingDown1
b$B536 DEFB $12                             ; Height (in pixels).
 $B537 DEFB $1F,$38,$17,$38,$0E,$3C,$01,$5E ; {Graphic data.
 $B53F DEFB $03,$DE,$27,$EE,$77,$70,$77,$F4 ;
 $B547 DEFB $77,$74,$45,$D0,$00,$80,$0A,$28 ;
 $B54F DEFB $1B,$6C,$08,$0C,$1C,$14,$17,$FC ;
 $B557 DEFB $0D,$E8,$07,$50                 ; }

; Sprite: Serf Down
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B55C-$B55D;$B56C-$B56D;$B57C-$B57D{,6*4}(SerfDown) }
; TABLE#
@label=SpriteSerfDown
b$B55B DEFB $12                             ; Height (in pixels).
 $B55C DEFB $0F,$F8,$0D,$68,$06,$30,$01,$40 ; {Graphic data.
 $B564 DEFB $23,$E2,$37,$F6,$37,$76,$17,$F4 ;
 $B56C DEFB $17,$74,$05,$D0,$00,$80,$0A,$28 ;
 $B574 DEFB $1B,$6C,$08,$0C,$1C,$14,$17,$FC ;
 $B57C DEFB $0D,$E8,$07,$50                 ; }

; Sprite: Serf Walking Down 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B581-$B582;$B591-$B592;$B5A1-$B5A2{,6*4}(SerfWalkingDown2)
; }
; TABLE#
@label=SpriteSerfWalkingDown2
b$B580 DEFB $12                             ; Height (in pixels).
 $B581 DEFB $07,$7C,$07,$74,$1F,$58,$3D,$60 ; {Graphic data.
 $B589 DEFB $3D,$E0,$3B,$F2,$07,$77,$17,$F7 ;
 $B591 DEFB $17,$77,$05,$D2,$00,$80,$0A,$28 ;
 $B599 DEFB $1B,$6C,$08,$0C,$1C,$14,$17,$FC ;
 $B5A1 DEFB $0D,$E8,$07,$A0                 ; }

; Sprite: Serf Walking Up 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B5A6-$B5A7;$B5B6-$B5B7;$B5C6-$B5C7{,6*4}(SerfWalkingUp1)
; }
; TABLE#
@label=SpriteSerfWalkingUp1
b$B5A5 DEFB $12                             ; Height (in pixels).
 $B5A6 DEFB $1E,$40,$1E,$70,$0A,$B0,$07,$D8 ; {Graphic data.
 $B5AE DEFB $0F,$D8,$4F,$E8,$EF,$E0,$EC,$6C ;
 $B5B6 DEFB $E2,$4C,$8D,$A8,$15,$70,$1B,$D0 ;
 $B5BE DEFB $3A,$98,$2B,$68,$15,$D0,$2F,$B8 ;
 $B5C6 DEFB $13,$50,$0A,$A0                 ; }

; Sprite: Serf Up
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B5CB-$B5CC;$B5DB-$B5DC;$B5EB-$B5EC{,6*4}(SerfUp) }
; TABLE#
@label=SpriteSerfUp
b$B5CA DEFB $12                             ; Height (in pixels).
 $B5CB DEFB $0E,$E0,$0E,$E0,$02,$80,$07,$C0 ; {Graphic data.
 $B5D3 DEFB $47,$C4,$6F,$EC,$6F,$EC,$2C,$68 ;
 $B5DB DEFB $23,$88,$0D,$A0,$15,$70,$1B,$D0 ;
 $B5E3 DEFB $3A,$98,$2B,$68,$15,$D0,$2F,$B8 ;
 $B5EB DEFB $13,$50,$0A,$A0                 ; }

; Sprite: Serf Walking Up 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B5F0-$B5F1;$B600-$B601;$B610-$B611{,6*4}(SerfWalkingUp2)
; }
; TABLE#
@label=SpriteSerfWalkingUp2
b$B5EF DEFB $12                             ; Height (in pixels).
 $B5F0 DEFB $04,$F0,$1C,$F0,$1A,$A0,$37,$C0 ; {Graphic data.
 $B5F8 DEFB $37,$E0,$2F,$E4,$0F,$EE,$6C,$3E ;
 $B600 DEFB $63,$8E,$2D,$A2,$15,$70,$1B,$D0 ;
 $B608 DEFB $3A,$98,$2B,$68,$15,$D0,$2F,$B8 ;
 $B610 DEFB $13,$50,$0A,$A0                 ; }

; Sprite: Serf Walking Left 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B615-$B616;$B625-$B626;$B635-$B636{,6*4}(SerfWalkingLeft1)
; }
; TABLE#
@label=SpriteSerfWalkingLeft1
b$B614 DEFB $12                             ; Height (in pixels).
 $B615 DEFB $03,$70,$0F,$78,$3F,$1C,$FB,$EC ; {Graphic data.
 $B61D DEFB $CB,$10,$77,$88,$07,$C8,$37,$88 ;
 $B625 DEFB $77,$30,$0F,$C0,$11,$50,$60,$B8 ;
 $B62D DEFB $68,$68,$19,$D0,$07,$A8,$19,$58 ;
 $B635 DEFB $16,$F0,$0A,$A0                 ; }

; Sprite: Serf Left
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B63A-$B63B;$B64A-$B64B;$B65A-$B65B{,6*4}(SerfLeft) }
; TABLE#
@label=SpriteSerfLeft
b$B639 DEFB $12                             ; Height (in pixels).
 $B63A DEFB $3F,$E0,$2F,$E0,$24,$C0,$19,$E0 ; {Graphic data.
 $B642 DEFB $03,$F0,$06,$38,$06,$18,$07,$18 ;
 $B64A DEFB $07,$30,$0F,$C0,$11,$50,$60,$B8 ;
 $B652 DEFB $68,$68,$19,$D0,$07,$A8,$19,$58 ;
 $B65A DEFB $16,$F0,$0A,$A0                 ; }

; Sprite: Serf Walking Left 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B65F-$B660;$B66F-$B670;$B67F-$B680{,6*4}(SerfWalkingLeft2)
; }
; TABLE#
@label=SpriteSerfWalkingLeft2
b$B65E DEFB $12                             ; Height (in pixels).
 $B65F DEFB $03,$F0,$3A,$F8,$5A,$5C,$4D,$9C ; {Graphic data.
 $B667 DEFB $30,$30,$07,$F8,$08,$7A,$18,$1A ;
 $B66F DEFB $07,$3C,$0F,$C0,$11,$50,$60,$B8 ;
 $B677 DEFB $68,$68,$19,$D0,$07,$A8,$19,$58 ;
 $B67F DEFB $16,$F0,$0A,$A0                 ; }

; Sprite: Serf Walking Right 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B684-$B685;$B694-$B695;$B6A4-$B6A5{,6*4}(SerfWalkingRight1)
; }
; TABLE#
@label=SpriteSerfWalkingRight1
b$B683 DEFB $12                             ; Height (in pixels).
 $B684 DEFB $0F,$C0,$1F,$5C,$3A,$5A,$39,$B2 ; {Graphic data.
 $B68C DEFB $0C,$0C,$1F,$E0,$5E,$10,$58,$18 ;
 $B694 DEFB $3C,$E0,$03,$F0,$05,$88,$1D,$06 ;
 $B69C DEFB $16,$16,$0B,$98,$15,$E0,$1A,$98 ;
 $B6A4 DEFB $0F,$E8,$05,$50                 ; }

; Sprite: Serf Right
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B6A9-$B6AA;$B6B9-$B6BA;$B6C9-$B6CA{,6*4}(SerfRight)
; }
; TABLE#
@label=SpriteSerfRight
b$B6A8 DEFB $12                             ; Height (in pixels).
 $B6A9 DEFB $07,$FC,$07,$F4,$03,$24,$07,$98 ; {Graphic data.
 $B6B1 DEFB $0F,$C0,$1C,$60,$18,$60,$18,$E0 ;
 $B6B9 DEFB $0C,$E0,$03,$F0,$05,$88,$1D,$06 ;
 $B6C1 DEFB $16,$16,$0B,$98,$15,$E0,$1A,$98 ;
 $B6C9 DEFB $0F,$E8,$05,$50                 ; }

; Sprite: Serf Walking Right 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B6CE-$B6CF;$B6DE-$B6DF;$B6EE-$B6EF{,6*4}(SerfWalkingRight2)
; }
; TABLE#
@label=SpriteSerfWalkingRight2
b$B6CD DEFB $12                             ; Height (in pixels).
 $B6CE DEFB $0E,$C0,$1E,$F0,$31,$FC,$37,$DF ; {Graphic data.
 $B6D6 DEFB $08,$D3,$11,$EE,$13,$E0,$11,$EC ;
 $B6DE DEFB $0C,$EE,$03,$F0,$05,$88,$1D,$06 ;
 $B6E6 DEFB $16,$16,$0B,$98,$15,$E0,$1A,$98 ;
 $B6EE DEFB $0F,$E8,$05,$50                 ; }

; Sprite: Clock
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$B6F4-$B6F7;$B714-$B717;$B734-$B737;$B754-$B757@$B776-$B785(Clock)
; }
; TABLE#
@label=SpriteClock
b$B6F2 DEFB $04                             ; Width (in bytes).
 $B6F3 DEFB $20                             ; Height (in pixels).
 $B6F4 DEFB $00,$3F,$FC,$00,$00,$70,$0E,$00 ; {Graphic data.
 $B6FC DEFB $00,$77,$EE,$00,$00,$67,$E6,$00 ;
 $B704 DEFB $00,$67,$E6,$00,$00,$6B,$F6,$00 ;
 $B70C DEFB $00,$E8,$F7,$00,$00,$CF,$F3,$00 ;
 $B714 DEFB $00,$DF,$FB,$00,$00,$DF,$FB,$00 ;
 $B71C DEFB $00,$C0,$03,$00,$00,$FF,$FF,$00 ;
 $B724 DEFB $00,$FF,$FF,$00,$01,$F9,$9F,$80 ;
 $B72C DEFB $01,$E0,$07,$80,$01,$C0,$03,$80 ;
 $B734 DEFB $01,$F7,$8F,$80,$01,$C0,$43,$80 ;
 $B73C DEFB $01,$E0,$27,$80,$06,$79,$9E,$60 ;
 $B744 DEFB $06,$9F,$F9,$60,$06,$E7,$E7,$60 ;
 $B74C DEFB $07,$69,$96,$E0,$06,$EE,$77,$60 ;
 $B754 DEFB $06,$F7,$6F,$60,$07,$6E,$F6,$E0 ;
 $B75C DEFB $06,$EF,$77,$60,$06,$F6,$EF,$60 ;
 $B764 DEFB $01,$6F,$76,$00,$00,$6E,$F6,$00 ;
 $B76C DEFB $00,$1F,$68,$00,$00,$03,$E0,$00 ; }

; Attributes: Clock
@label=AttribClock
b$B774 DEFB $04                             ; Width (in bytes).
 $B775 DEFB $04                             ; Height (in bytes).
 $B776 DEFB $45,$45,$45,$45,$45,$45,$45,$45 ; {Colour attribute data.
 $B77E DEFB $45,$45,$45,$45,$45,$45,$45,$45 ; }

; Sprite: Wizard Walking Down 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B787-$B788;$B797-$B798;$B7A7-$B7A8{,4*4}(WizardWalkingDown1)
; }
; TABLE#
@label=SpriteWizardWalkingDown1
b$B786 DEFB $14                             ; Height (in pixels).
 $B787 DEFB $3C,$00,$4C,$F0,$1F,$68,$1B,$84 ; {Graphic data.
 $B78F DEFB $06,$6E,$6C,$6E,$EE,$EC,$EF,$E8 ;
 $B797 DEFB $44,$40,$16,$D0,$18,$30,$1F,$F0 ;
 $B79F DEFB $1E,$70,$0C,$E0,$0C,$E0,$04,$C0 ;
 $B7A7 DEFB $06,$40,$03,$80,$03,$80,$01,$00 ; }

; Sprite: Wizard Down
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B7B0-$B7B1;$B7C0-$B7C1;$B7D0-$B7D1{,4*4}(WizardDown)
; }
; TABLE#
@label=SpriteWizardDown
b$B7AF DEFB $14                             ; Height (in pixels).
 $B7B0 DEFB $1E,$F0,$26,$C8,$05,$40,$03,$80 ; {Graphic data.
 $B7B8 DEFB $66,$CC,$EC,$6E,$EE,$EE,$6F,$EC ;
 $B7C0 DEFB $04,$40,$16,$D0,$18,$30,$1F,$F0 ;
 $B7C8 DEFB $1E,$70,$0C,$E0,$0C,$E0,$04,$C0 ;
 $B7D0 DEFB $06,$40,$03,$80,$03,$80,$01,$00 ; }

; Sprite: Wizard Walking Down 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B7D9-$B7DA;$B7E9-$B7EA;$B7F9-$B7FA{,4*4}(WizardWalkingDown2)
; }
; TABLE#
@label=SpriteWizardWalkingDown2
b$B7D8 DEFB $14                             ; Height (in pixels).
 $B7D9 DEFB $00,$78,$1E,$64,$2D,$F0,$43,$B0 ; {Graphic data.
 $B7E1 DEFB $E6,$C0,$EC,$6C,$6E,$EE,$2F,$EE ;
 $B7E9 DEFB $04,$44,$16,$D0,$18,$30,$1F,$F0 ;
 $B7F1 DEFB $1E,$70,$0C,$E0,$0C,$E0,$04,$C0 ;
 $B7F9 DEFB $06,$40,$03,$80,$03,$80,$01,$00 ; }

; Sprite: Wizard Walking Up 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B802-$B803;$B812-$B813;$B822-$B823{,4*4}(WizardWalkingUp1)
; }
; TABLE#
@label=SpriteWizardWalkingUp1
b$B801 DEFB $14                             ; Height (in pixels).
 $B802 DEFB $1E,$00,$26,$78,$0F,$D4,$0D,$C2 ; {Graphic data.
 $B80A DEFB $03,$E7,$3E,$F7,$FF,$F6,$77,$F4 ;
 $B812 DEFB $20,$00,$0F,$F8,$0D,$F8,$08,$F8 ;
 $B81A DEFB $0D,$F8,$07,$F0,$07,$70,$02,$20 ;
 $B822 DEFB $03,$60,$01,$C0,$01,$C0,$00,$80 ; }

; Sprite: Wizard Up
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B82B-$B82C;$B83B-$B83C;$B84B-$B84C{,4*4}(WizardUp) }
; TABLE#
@label=SpriteWizardUp
b$B82A DEFB $14                             ; Height (in pixels).
 $B82B DEFB $0F,$78,$13,$64,$02,$A0,$01,$C0 ; {Graphic data.
 $B833 DEFB $33,$E6,$77,$F7,$77,$F7,$37,$F6 ;
 $B83B DEFB $00,$00,$0F,$F8,$0D,$F8,$08,$F8 ;
 $B843 DEFB $0D,$F8,$07,$F0,$07,$70,$02,$20 ;
 $B84B DEFB $03,$60,$01,$C0,$01,$C0,$00,$80 ; }

; Sprite: Wizard Walking Up 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B854-$B855;$B864-$B865;$B874-$B875{,4*4}(WizardWalkingUp2)
; }
; TABLE#
@label=SpriteWizardWalkingUp2
b$B853 DEFB $14                             ; Height (in pixels).
 $B854 DEFB $00,$3C,$0F,$32,$16,$F8,$21,$D8 ; {Graphic data.
 $B85C DEFB $73,$E0,$77,$F6,$37,$F7,$17,$F7 ;
 $B864 DEFB $00,$02,$0F,$F8,$0D,$F8,$08,$F8 ;
 $B86C DEFB $0D,$F8,$07,$F0,$07,$70,$02,$20 ;
 $B874 DEFB $03,$60,$01,$C0,$01,$C0,$00,$80 ; }

; Sprite: Wizard Walking Left 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B87D-$B87E;$B88D-$B88E;$B89D-$B89E{,4*4}(WizardWalkingLeft1)
; }
; TABLE#
@label=SpriteWizardWalkingLeft1
b$B87C DEFB $14                             ; Height (in pixels).
 $B87D DEFB $0C,$F0,$1C,$38,$33,$98,$47,$60 ; {Graphic data.
 $B885 DEFB $06,$10,$37,$08,$07,$98,$31,$F0 ;
 $B88D DEFB $35,$80,$0D,$78,$00,$D8,$1F,$88 ;
 $B895 DEFB $0F,$D8,$05,$F0,$05,$F0,$02,$E0 ;
 $B89D DEFB $02,$E0,$01,$C0,$01,$C0,$00,$80 ; }

; Sprite: Wizard Left
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$B8A6-$B8A7;$B8B6-$B8B7;$B8C6-$B8C7{,4*4}(WizardLeft)
; }
; TABLE#
@label=SpriteWizardLeft
b$B8A5 DEFB $14                             ; Height (in pixels).
 $B8A6 DEFB $07,$C0,$09,$C0,$00,$00,$03,$F0 ; {Graphic data.
 $B8AE DEFB $06,$38,$04,$18,$07,$98,$31,$F0 ;
 $B8B6 DEFB $35,$80,$0D,$78,$00,$D8,$1F,$88 ;
 $B8BE DEFB $0F,$D8,$05,$F0,$05,$F0,$02,$E0 ;
 $B8C6 DEFB $02,$E0,$01,$C0,$01,$C0,$00,$80 ; }

; Sprite: Wizard Walking Left 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B8CF-$B8D0;$B8DF-$B8E0;$B8EF-$B8F0{,4*4}(WizardWalkingLeft2)
; }
; TABLE#
@label=SpriteWizardWalkingLeft2
b$B8CE DEFB $14                             ; Height (in pixels).
 $B8CF DEFB $03,$F0,$1C,$38,$33,$D8,$47,$E0 ; {Graphic data.
 $B8D7 DEFB $04,$74,$08,$3A,$07,$1E,$31,$F8 ;
 $B8DF DEFB $35,$80,$0D,$78,$00,$D8,$1F,$88 ;
 $B8E7 DEFB $0F,$D8,$05,$F0,$05,$F0,$02,$E0 ;
 $B8EF DEFB $02,$E0,$01,$C0,$01,$C0,$00,$80 ; }

; Sprite: Wizard Walking Right 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B8F8-$B8F9;$B908-$B909;$B918-$B919{,4*4}(WizardWalkingRight1)
; }
; TABLE#
@label=SpriteWizardWalkingRight1
b$B8F7 DEFB $14                             ; Height (in pixels).
 $B8F8 DEFB $0F,$30,$1C,$38,$1B,$CC,$07,$E2 ; {Graphic data.
 $B900 DEFB $2E,$20,$5C,$10,$78,$E0,$1F,$8C ;
 $B908 DEFB $01,$AC,$1E,$B0,$1B,$00,$11,$F8 ;
 $B910 DEFB $1B,$F0,$0F,$A0,$0F,$A0,$07,$40 ;
 $B918 DEFB $07,$40,$03,$80,$03,$80,$01,$00 ; }

; Sprite: Wizard Right
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B921-$B922;$B931-$B932;$B941-$B942{,4*4}(WizardRight)
; }
; TABLE#
@label=SpriteWizardRight
b$B920 DEFB $14                             ; Height (in pixels).
 $B921 DEFB $03,$E0,$03,$90,$00,$00,$0F,$C0 ; {Graphic data.
 $B929 DEFB $1C,$60,$18,$20,$19,$E0,$0F,$8C ;
 $B931 DEFB $01,$AC,$1E,$B0,$1B,$00,$11,$F8 ;
 $B939 DEFB $1B,$F0,$0F,$A0,$0F,$A0,$07,$40 ;
 $B941 DEFB $07,$40,$03,$80,$03,$80,$01,$00 ; }

; Sprite: Wizard Walking Right 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$47,4,2,,2;$B94A-$B94B;$B95A-$B95B;$B96A-$B96B{,4*4}(WizardWalkingRight2)
; }
; TABLE#
@label=SpriteWizardWalkingRight2
b$B949 DEFB $14                             ; Height (in pixels).
 $B94A DEFB $0F,$30,$1C,$38,$19,$CC,$06,$E2 ; {Graphic data.
 $B952 DEFB $08,$60,$10,$EC,$19,$E0,$0F,$8C ;
 $B95A DEFB $01,$AC,$1E,$B0,$1B,$00,$11,$F8 ;
 $B962 DEFB $1B,$F0,$0F,$A0,$0F,$A0,$07,$40 ;
 $B96A DEFB $07,$40,$03,$80,$03,$80,$01,$00 ; }

; Sprite: Serf Sword 7
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$B973-$B974;$B983-$B984{,4*4}(SerfSword7) }
; TABLE#
@label=SpriteSerfSword7
b$B972 DEFB $0C                             ; Height (in pixels).
 $B973 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $B97B DEFB $00,$20,$00,$10,$00,$12,$7F,$DF ;
 $B983 DEFB $FF,$DF,$00,$12,$00,$10,$00,$20 ; }

; Sprite: Serf Sword 4
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$B98C-$B98D;$B99C-$B99D{,3*4}(SerfSword4) }
; TABLE#
@label=SpriteSerfSword4
b$B98B DEFB $0D                             ; Height (in pixels).
 $B98C DEFB $00,$00,$00,$1C,$01,$DC,$00,$7C ; {Graphic data.
 $B994 DEFB $00,$30,$00,$D8,$01,$C8,$03,$88 ;
 $B99C DEFB $07,$00,$0E,$00,$1C,$00,$18,$00 ;
 $B9A4 DEFB $10,$00                         ; }

; Sprite: Serf Sword 5
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$B9A7-$B9A8;$B9B7-$B9B8(SerfSword5) }
; TABLE#
@label=SpriteSerfSword5
b$B9A6 DEFB $10                             ; Height (in pixels).
 $B9A7 DEFB $01,$80,$03,$C0,$01,$80,$01,$80 ; {Graphic data.
 $B9AF DEFB $07,$E0,$08,$10,$01,$80,$01,$80 ;
 $B9B7 DEFB $01,$80,$01,$80,$01,$80,$01,$80 ;
 $B9BF DEFB $01,$80,$01,$80,$01,$80,$00,$80 ; }

; Sprite: Serf Sword 6
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$B9C8-$B9C9;$B9D8-$B9D9{,3*4}(SerfSword6) }
; TABLE#
@label=SpriteSerfSword6
b$B9C7 DEFB $0D                             ; Height (in pixels).
 $B9C8 DEFB $00,$00,$00,$00,$38,$00,$3B,$80 ; {Graphic data.
 $B9D0 DEFB $3E,$00,$0C,$00,$1B,$00,$13,$80 ;
 $B9D8 DEFB $11,$C0,$00,$E0,$00,$70,$00,$38 ;
 $B9E0 DEFB $00,$1C                         ; }

; Sprite: Serf Sword 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$B9E3-$B9E4;$B9F3-$B9F4{,4*4}(SerfSword3) }
; TABLE#
@label=SpriteSerfSword3
b$B9E2 DEFB $0C                             ; Height (in pixels).
 $B9E3 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $B9EB DEFB $04,$00,$08,$00,$48,$00,$FD,$FF ;
 $B9F3 DEFB $FD,$FE,$48,$00,$08,$00,$04,$00 ; }

; Sprite: Serf Sword 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$B9FC-$B9FD;$BA0C-$BA0D{,4*4}(SerfSword2) }
; TABLE#
@label=SpriteSerfSword2
b$B9FB DEFB $0C                             ; Height (in pixels).
 $B9FC DEFB $00,$00,$00,$08,$00,$18,$00,$38 ; {Graphic data.
 $BA04 DEFB $00,$70,$00,$E0,$11,$C0,$13,$80 ;
 $BA0C DEFB $1D,$00,$0C,$00,$3E,$00,$3B,$80 ; }

; Unused data at $BA14
;
; This looks like a bug. The height (in pixels) of #R$B9FB is $0C, it should be
; $0D. Then this unused data would be part of the #R$B9FB graphic data.
@label=UnusedDataAt$BA14
u$BA14 DEFB $38,$00

; Sprite: Serf Sword 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$BA17-$BA18;$BA27-$BA28(SerfSword1) }
; TABLE#
@label=SpriteSerfSword1
b$BA16 DEFB $10                             ; Height (in pixels).
 $BA17 DEFB $01,$00,$01,$80,$01,$80,$01,$80 ; {Graphic data.
 $BA1F DEFB $01,$80,$01,$80,$01,$80,$01,$80 ;
 $BA27 DEFB $01,$80,$01,$80,$08,$10,$07,$E0 ;
 $BA2F DEFB $01,$80,$01,$80,$03,$C0,$01,$80 ; }

; Sprite: Serf Sword 8
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$BA38-$BA39;$BA48-$BA49(SerfSword8) }
; TABLE#
@label=SpriteSerfSword8
b$BA37 DEFB $10                             ; Height (in pixels).
 $BA38 DEFB $00,$00,$00,$00,$10,$00,$18,$00 ; {Graphic data.
 $BA40 DEFB $1C,$00,$0E,$00,$07,$00,$03,$88 ;
 $BA48 DEFB $01,$C8,$00,$D8,$00,$30,$00,$7C ;
 $BA50 DEFB $01,$DC,$00,$1C,$00,$00,$00,$00 ; }

; Sprite: Knight Axe 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BA59-$BA5A;$BA69-$BA6A(KnightAxe1) }
; TABLE#
@label=SpriteKnightAxe1
b$BA58 DEFB $10                             ; Height (in pixels).
 $BA59 DEFB $00,$00,$00,$00,$3C,$00,$7E,$00 ; {Graphic data.
 $BA61 DEFB $C3,$00,$3C,$00,$18,$00,$3D,$FF ;
 $BA69 DEFB $3D,$FF,$00,$00,$00,$00,$00,$00 ;
 $BA71 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Sprite: Knight Axe 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BA7A-$BA7B;$BA8A-$BA8B(KnightAxe2) }
; TABLE#
@label=SpriteKnightAxe2
b$BA79 DEFB $10                             ; Height (in pixels).
 $BA7A DEFB $00,$00,$00,$04,$00,$0E,$00,$1C ; {Graphic data.
 $BA82 DEFB $00,$38,$3C,$70,$60,$E0,$D9,$C0 ;
 $BA8A DEFB $BA,$80,$BF,$00,$8E,$00,$1C,$00 ;
 $BA92 DEFB $08,$00,$00,$00,$00,$00,$00,$00 ; }

; Sprite: Knight Axe 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BA9B-$BA9C;$BAAB-$BAAC(KnightAxe3) }
; TABLE#
@label=SpriteKnightAxe3
b$BA9A DEFB $10                             ; Height (in pixels).
 $BA9B DEFB $01,$80,$01,$80,$01,$80,$01,$80 ; {Graphic data.
 $BAA3 DEFB $01,$80,$01,$80,$01,$80,$01,$80 ;
 $BAAB DEFB $09,$80,$18,$00,$35,$80,$37,$80 ;
 $BAB3 DEFB $37,$80,$35,$80,$18,$00,$08,$00 ; }

; Sprite: Knight Axe 4
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BABC-$BABD;$BACC-$BACD(KnightAxe4) }
; TABLE#
@label=SpriteKnightAxe4
b$BABB DEFB $10                             ; Height (in pixels).
 $BABC DEFB $00,$00,$20,$00,$70,$00,$38,$00 ; {Graphic data.
 $BAC4 DEFB $1C,$00,$0E,$00,$07,$00,$03,$80 ;
 $BACC DEFB $01,$40,$00,$E0,$04,$70,$05,$F8 ;
 $BAD4 DEFB $05,$D0,$06,$C0,$03,$00,$01,$E0 ; }

; Sprite: Knight Axe 5
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BADD-$BADE;$BAED-$BAEE(KnightAxe5) }
; TABLE#
@label=SpriteKnightAxe5
b$BADC DEFB $10                             ; Height (in pixels).
 $BADD DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $BAE5 DEFB $00,$00,$00,$00,$00,$00,$FF,$BC ;
 $BAED DEFB $FF,$BC,$00,$18,$00,$3C,$00,$C3 ;
 $BAF5 DEFB $00,$7E,$00,$3C,$00,$00,$00,$00 ; }

; Sprite: Knight Axe 6
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BAFE-$BAFF;$BB0E-$BB0F(KnightAxe6) }
; TABLE#
@label=SpriteKnightAxe6
b$BAFD DEFB $10                             ; Height (in pixels).
 $BAFE DEFB $00,$00,$00,$00,$00,$00,$00,$10 ; {Graphic data.
 $BB06 DEFB $00,$38,$00,$71,$00,$FD,$01,$5D ;
 $BB0E DEFB $03,$9B,$07,$06,$0E,$3C,$1C,$00 ;
 $BB16 DEFB $38,$00,$70,$00,$20,$00,$00,$00 ; }

; Sprite: Knight Axe 7
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BB1F-$BB20;$BB2F-$BB30(KnightAxe7) }
; TABLE#
@label=SpriteKnightAxe7
b$BB1E DEFB $10                             ; Height (in pixels).
 $BB1F DEFB $00,$10,$00,$18,$01,$AC,$01,$EC ; {Graphic data.
 $BB27 DEFB $01,$EC,$01,$AC,$00,$18,$01,$90 ;
 $BB2F DEFB $01,$80,$01,$80,$01,$80,$01,$80 ;
 $BB37 DEFB $01,$80,$01,$80,$01,$80,$01,$80 ; }

; Sprite: Knight Axe 8
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$BB40-$BB41;$BB50-$BB51(KnightAxe8) }
; TABLE#
@label=SpriteKnightAxe8
b$BB3F DEFB $10                             ; Height (in pixels).
 $BB40 DEFB $07,$80,$00,$C0,$03,$60,$0B,$A0 ; {Graphic data.
 $BB48 DEFB $1F,$A0,$0E,$20,$07,$00,$02,$80 ;
 $BB50 DEFB $01,$C0,$00,$E0,$00,$70,$00,$38 ;
 $BB58 DEFB $00,$1C,$00,$0E,$00,$04,$00,$00 ; }

; Sprite: Wizard Potion 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$BB61-$BB62;$BB71-$BB72{,1*4}(WizardPotion1) }
; TABLE#
@label=SpriteWizardPotion1
b$BB60 DEFB $0F                             ; Height (in pixels).
 $BB61 DEFB $00,$00,$00,$00,$00,$00,$00,$24 ; {Graphic data.
 $BB69 DEFB $00,$80,$09,$80,$02,$D0,$0D,$60 ;
 $BB71 DEFB $06,$F0,$43,$42,$05,$A0,$12,$A0 ;
 $BB79 DEFB $00,$00,$00,$00,$01,$00         ; }

; Sprite: Wizard Potion 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$BB80-$BB81;$BB90-$BB91{,1*4}(WizardPotion2) }
; TABLE#
@label=SpriteWizardPotion2
b$BB7F DEFB $0F                             ; Height (in pixels).
 $BB80 DEFB $00,$00,$00,$08,$00,$00,$20,$80 ; {Graphic data.
 $BB88 DEFB $01,$00,$03,$A0,$02,$08,$15,$F0 ;
 $BB90 DEFB $05,$A8,$06,$60,$01,$80,$08,$20 ;
 $BB98 DEFB $04,$80,$00,$10,$00,$00         ; }

; Sprite: Wizard Potion 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$BB9F-$BBA0;$BBAF-$BBB0{,1*4}(WizardPotion3) }
; TABLE#
@label=SpriteWizardPotion3
b$BB9E DEFB $0F                             ; Height (in pixels).
 $BB9F DEFB $00,$00,$00,$80,$00,$00,$01,$00 ; {Graphic data.
 $BBA7 DEFB $04,$10,$01,$82,$03,$60,$45,$68 ;
 $BBAF DEFB $0E,$B0,$07,$42,$09,$90,$01,$00 ;
 $BBB7 DEFB $20,$00,$00,$08,$10,$80         ; }

; Sprite: Wizard Potion 4
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$BBBE-$BBBF;$BBCE-$BBCF{,1*4}(WizardPotion4) }
; TABLE#
@label=SpriteWizardPotion4
b$BBBD DEFB $0F                             ; Height (in pixels).
 $BBBE DEFB $00,$00,$01,$00,$10,$04,$00,$00 ; {Graphic data.
 $BBC6 DEFB $00,$40,$01,$90,$07,$40,$05,$E2 ;
 $BBCE DEFB $17,$68,$03,$C0,$09,$C0,$00,$02 ;
 $BBD6 DEFB $01,$00,$00,$00,$00,$00         ; }

; Sprite: Cursor Directions Left Pane
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$46,4,2,,2;$BBDD-$BBDE;$BBED-$BBEE;$BBFD-$BBFE{,4*4}(CursorDirectionsLeftPane)
; }
; TABLE#
@label=SpriteCursorDirectionsLeftPane
b$BBDC DEFB $14                             ; Height (in pixels).
 $BBDD DEFB $00,$01,$00,$03,$00,$07,$00,$0F ; {Graphic data.
 $BBE5 DEFB $00,$1F,$00,$43,$00,$C3,$01,$C3 ;
 $BBED DEFB $03,$F8,$07,$F8,$07,$F8,$03,$F8 ;
 $BBF5 DEFB $01,$C3,$00,$C3,$00,$43,$00,$1F ;
 $BBFD DEFB $00,$0F,$00,$07,$00,$03,$00,$01 ; }

; Sprite: Cursor Directions Right Pane
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$46,4,2,,2;$BC06-$BC07;$BC16-$BC17;$BC26-$BC27{,4*4}(CursorDirectionsRightPane)
; }
; TABLE#
@label=SpriteCursorDirectionsRightPane
b$BC05 DEFB $14                             ; Height (in pixels).
 $BC06 DEFB $80,$00,$C0,$00,$E0,$00,$F0,$00 ; {Graphic data.
 $BC0E DEFB $F8,$00,$C2,$00,$C3,$00,$C3,$80 ;
 $BC16 DEFB $1F,$C0,$1F,$E0,$1F,$E0,$1F,$C0 ;
 $BC1E DEFB $C3,$80,$C3,$00,$C2,$00,$F8,$00 ;
 $BC26 DEFB $F0,$00,$E0,$00,$C0,$00,$80,$00 ; }

; Sprite: Keyboard Left Pane
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$43,4,2,,2;$BC2F-$BC30;$BC3F-$BC40(KeyboardLeftPane) }
; TABLE#
@label=SpriteKeyboardLeftPane
b$BC2E DEFB $10                             ; Height (in pixels).
 $BC2F DEFB $0F,$FF,$0F,$FF,$09,$24,$09,$24 ; {Graphic data.
 $BC37 DEFB $0F,$FF,$09,$24,$09,$24,$0F,$FF ;
 $BC3F DEFB $0C,$92,$0C,$92,$07,$FF,$08,$00 ;
 $BC47 DEFB $0F,$FF,$08,$45,$0D,$11,$07,$FF ; }

; Sprite: Keyboard Right Pane
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$43,4,2,,2;$BC50-$BC51;$BC60-$BC61(KeyboardRightPane) }
; TABLE#
@label=SpriteKeyboardRightPane
b$BC4F DEFB $10                             ; Height (in pixels).
 $BC50 DEFB $FF,$F8,$FF,$F8,$92,$48,$92,$48 ; {Graphic data.
 $BC58 DEFB $FF,$F8,$92,$48,$92,$48,$FF,$F8 ;
 $BC60 DEFB $49,$38,$49,$38,$FF,$F0,$00,$08 ;
 $BC68 DEFB $FF,$F8,$FF,$F8,$FF,$F8,$FF,$F0 ; }

; Sprite: Joystick Left Pane
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$44,4,2,,2;$BC71-$BC72;$BC81-$BC82;$BC91-$BC92{,1*4}(JoystickLeftPane)
; }
; TABLE#
@label=SpriteJoystickLeftPane
b$BC70 DEFB $17                             ; Height (in pixels).
 $BC71 DEFB $00,$C7,$01,$8F,$03,$1F,$00,$00 ; {Graphic data.
 $BC79 DEFB $03,$1F,$01,$8F,$00,$C7,$00,$00 ;
 $BC81 DEFB $00,$33,$00,$0B,$00,$0B,$00,$0B ;
 $BC89 DEFB $00,$01,$00,$01,$00,$00,$00,$03 ;
 $BC91 DEFB $00,$07,$00,$0F,$00,$09,$00,$09 ;
 $BC99 DEFB $00,$0C,$00,$06,$00,$03         ; }

; Sprite: Joystick Right Pane
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$44,4,2,,2;$BCA0-$BCA1;$BCB0-$BCB1;$BCC0-$BCC1{,1*4}(JoystickRightPane)
; }
; TABLE#
@label=SpriteJoystickRightPane
b$BC9F DEFB $17                             ; Height (in pixels).
 $BCA0 DEFB $FF,$00,$FF,$80,$FF,$C0,$00,$00 ; {Graphic data.
 $BCA8 DEFB $FF,$C0,$FF,$80,$FF,$00,$00,$00 ;
 $BCB0 DEFB $FC,$00,$F0,$00,$F0,$00,$F0,$00 ;
 $BCB8 DEFB $80,$00,$80,$00,$00,$00,$C0,$00 ;
 $BCC0 DEFB $E0,$00,$F0,$00,$F0,$00,$F0,$00 ;
 $BCC8 DEFB $70,$00,$60,$00,$C0,$00         ; }

; Sprite: Cave Door Frame
;
; #UDGTABLE
; { #UDGARRAY4,$07,4,4,,2;$BCD0-$BCD3;$BCF0-$BCF3;$BD10-$BD13(CaveDoorFrame) }
; TABLE#
@label=SpriteCaveDoorFrame
b$BCCE DEFB $04                             ; Width (in bytes).
 $BCCF DEFB $18                             ; Height (in pixels).
 $BCD0 DEFB $FF,$00,$00,$FF,$03,$00,$00,$B0 ; {Graphic data.
 $BCD8 DEFB $03,$00,$00,$B0,$07,$00,$00,$98 ;
 $BCE0 DEFB $0D,$00,$00,$98,$18,$80,$01,$0E ;
 $BCE8 DEFB $38,$80,$01,$0C,$78,$80,$01,$18 ;
 $BCF0 DEFB $58,$80,$01,$30,$CC,$80,$01,$38 ;
 $BCF8 DEFB $8C,$40,$02,$2C,$0C,$40,$02,$26 ;
 $BD00 DEFB $0C,$40,$02,$3B,$1C,$40,$02,$E1 ;
 $BD08 DEFB $34,$40,$02,$83,$62,$20,$04,$86 ;
 $BD10 DEFB $F2,$20,$04,$86,$7F,$2C,$05,$4C ;
 $BD18 DEFB $0F,$62,$25,$4C,$03,$C1,$7D,$58 ;
 $BD20 DEFB $00,$F0,$DF,$78,$00,$3D,$87,$F0 ;
 $BD28 DEFB $00,$0F,$00,$C0,$00,$02,$00,$00 ; }

; Sprite: Pumpkin 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$BD31-$BD32;$BD41-$BD42;$BD51-$BD52{,5*4}(Pumpkin1) }
; TABLE#
@label=SpritePumpkin1
b$BD30 DEFB $13                             ; Height (in pixels).
 $BD31 DEFB $07,$E0,$1F,$F8,$3F,$FC,$7D,$BE ; {Graphic data.
 $BD39 DEFB $7B,$9E,$F5,$0F,$EF,$67,$F6,$67 ;
 $BD41 DEFB $FF,$FF,$FF,$7F,$EA,$47,$F7,$CF ;
 $BD49 DEFB $7B,$CE,$7F,$FE,$3F,$FC,$0D,$B0 ;
 $BD51 DEFB $01,$C0,$00,$E0,$00,$60         ; }

; Sprite: Pumpkin 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$BD58-$BD59;$BD68-$BD69;$BD78-$BD79{,5*4}(Pumpkin2) }
; TABLE#
@label=SpritePumpkin2
b$BD57 DEFB $13                             ; Height (in pixels).
 $BD58 DEFB $07,$E0,$1F,$F8,$3F,$FC,$7D,$FE ; {Graphic data.
 $BD60 DEFB $79,$BE,$F0,$5F,$E6,$EF,$E6,$77 ;
 $BD68 DEFB $FF,$FF,$FE,$FF,$E2,$6F,$F3,$DF ;
 $BD70 DEFB $73,$FF,$7F,$FE,$3F,$FC,$0D,$B0 ;
 $BD78 DEFB $01,$C0,$00,$E0,$00,$60         ; }

; Screen Type Geometry Data 2
;
; Algorithm for drawing a screen type is:
; .
; #TABLE
; { while (lineTo != $FF) }
; { { }
; { #SPACE4 BYTE startX = points [2 * lineTo    ]; }
; { #SPACE4 BYTE startY = points [2 * lineTo + 1]; }
; { #SPACE4 lineTo++; }
; { #SPACE4 while (lineTo != $FF) }
; { #SPACE4 { }
; { #SPACE8 BYTE endX = points [2 * lineTo    ]; }
; { #SPACE8 BYTE endY = points [2 * lineTo + 1]; }
; { #SPACE8 Draw from (startY,startX) to (endY,endX). }
; { #SPACE8 lineTo++; }
; { #SPACE4 #CHR125 }
; { #SPACE4 lineTo++; }
; { #CHR125 }
; TABLE#
@label=ScreenTypeGeometryData2
b$BD7E DEFB $00,$17,$01,$04,$FF
 $BD83 DEFB $01,$FF
 $BD85 DEFB $02,$03,$19,$01,$FF
 $BD8A DEFB $03,$FF
 $BD8C DEFB $04,$FF
 $BD8E DEFB $05,$06,$1B,$03,$FF
 $BD93 DEFB $06,$FF
 $BD95 DEFB $07,$08,$06,$1D,$FF
 $BD9A DEFB $08,$FF
 $BD9C DEFB $09,$04,$33,$0A,$FF
 $BDA1 DEFB $0A,$FF
 $BDA3 DEFB $0B,$0D,$1F,$08,$FF
 $BDA8 DEFB $0C,$FF
 $BDAA DEFB $0D,$FF
 $BDAC DEFB $0E,$0F,$0D,$0C,$FF
 $BDB1 DEFB $0F,$FF
 $BDB3 DEFB $10,$31,$0A,$35,$FF
 $BDB8 DEFB $11,$12,$23,$0F,$FF
 $BDBD DEFB $12,$FF
 $BDBF DEFB $13,$36,$35,$FF
 $BDC3 DEFB $14,$25,$15,$12,$FF
 $BDC8 DEFB $15,$FF
 $BDCA DEFB $16,$17,$04,$33,$FF
 $BDCF DEFB $17,$FF
 $BDD1 DEFB $18,$19,$17,$01,$FF
 $BDD6 DEFB $19,$FF
 $BDD8 DEFB $1A,$1B,$19,$03,$FF
 $BDDD DEFB $1B,$FF
 $BDDF DEFB $1C,$1D,$1B,$06,$FF
 $BDE4 DEFB $1D,$FF
 $BDE6 DEFB $1E,$1F,$1D,$08,$FF
 $BDEB DEFB $1F,$FF
 $BDED DEFB $20,$0D,$1F,$FF
 $BDF1 DEFB $21,$FF
 $BDF3 DEFB $22,$23,$21,$0F,$FF
 $BDF8 DEFB $23,$FF
 $BDFA DEFB $24,$25,$23,$12,$FF
 $BDFF DEFB $25,$FF
 $BE01 DEFB $26,$25,$27,$15,$FF
 $BE06 DEFB $27,$FF
 $BE08 DEFB $28,$27,$29,$3C,$FF
 $BE0D DEFB $29,$FF
 $BE0F DEFB $2A,$2B,$3A,$29,$FF
 $BE14 DEFB $2B,$FF
 $BE16 DEFB $2C,$2D,$2B,$38,$FF
 $BE1B DEFB $2D,$FF
 $BE1D DEFB $2E,$2F,$2D,$36,$FF
 $BE22 DEFB $2F,$FF
 $BE24 DEFB $30,$13,$31,$2F,$FF
 $BE29 DEFB $31,$FF
 $BE2B DEFB $32,$33,$31,$0A,$FF
 $BE30 DEFB $33,$FF
 $BE32 DEFB $34,$FF
 $BE34 DEFB $35,$34,$FF
 $BE37 DEFB $36,$FF
 $BE39 DEFB $37,$2D,$38,$36,$FF
 $BE3E DEFB $38,$FF
 $BE40 DEFB $39,$2B,$38,$3A,$FF
 $BE45 DEFB $3A,$FF
 $BE47 DEFB $3B,$3A,$29,$3C,$FF
 $BE4C DEFB $3C,$FF
 $BE4E DEFB $3D,$15,$3C,$27,$FF
 $BE53 DEFB $FF
 $BE54 DEFB $79,$0A,$86,$04,$91,$04,$A6,$19
 $BE5C DEFB $46,$0A,$9B,$38,$A7,$4B,$9A,$58
 $BE64 DEFB $AA,$68,$37,$01,$2A,$07,$9B,$7E
 $BE6C DEFB $9B,$87,$9B,$8F,$A8,$8F,$95,$A1
 $BE74 DEFB $2A,$1E,$95,$B8,$88,$BE,$24,$30
 $BE7C DEFB $79,$B5,$46,$B5,$4F,$27,$70,$27
 $BE84 DEFB $79,$23,$82,$23,$8F,$30,$84,$47
 $BE8C DEFB $89,$52,$80,$5B,$8B,$66,$85,$74
 $BE94 DEFB $85,$7D,$89,$80,$81,$88,$81,$99
 $BE9C DEFB $77,$9D,$70,$98,$4F,$98,$46,$9C
 $BEA4 DEFB $3D,$9C,$30,$8F,$3B,$78,$36,$6D
 $BEAC DEFB $3F,$64,$34,$59,$3A,$4C,$3A,$42
 $BEB4 DEFB $36,$3F,$3E,$37,$3E,$26,$47,$22
 $BEBC DEFB $24,$38,$18,$30,$24,$41,$15,$57
 $BEC4 DEFB $25,$67,$18,$74,$24,$87,$18,$A6
 $BECC DEFB $2E,$BB,$39,$BB
 $BED0 DEFB $0A,$79,$04,$86,$04,$91,$19,$A6
 $BED8 DEFB $0A,$46,$38,$9B,$4B,$A7,$58,$9A
 $BEE0 DEFB $68,$AA,$01,$37,$07,$2A,$7E,$9B
 $BEE8 DEFB $87,$9B,$8F,$9B,$8F,$A8,$A1,$95
 $BEF0 DEFB $1E,$2A,$B8,$95,$BE,$88,$30,$24
 $BEF8 DEFB $B5,$79,$B5,$46,$27,$4F,$27,$70
 $BF00 DEFB $23,$79,$23,$82,$30,$8F,$47,$84
 $BF08 DEFB $52,$89,$5B,$80,$66,$8B,$74,$85
 $BF10 DEFB $7D,$85,$80,$89,$88,$81,$99,$81
 $BF18 DEFB $9D,$77,$98,$70,$98,$4F,$9C,$46
 $BF20 DEFB $9C,$3D,$8F,$30,$78,$3B,$6D,$36
 $BF28 DEFB $64,$3F,$59,$34,$4C,$3A,$42,$3A
 $BF30 DEFB $3F,$36,$37,$3E,$26,$3E,$22,$47
 $BF38 DEFB $38,$24,$30,$18,$41,$24,$57,$15
 $BF40 DEFB $67,$25,$74,$18,$87,$24,$A6,$18
 $BF48 DEFB $BB,$2E,$BB,$39

; Font
;
; #FONT:[
; !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ]$BF4C,,$47,2(font)
@label=Font
b$BF4C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; SPACE
 $BF54 DEFB $18,$18,$18,$18,$18,$00,$18,$18 ; !
 $BF5C DEFB $28,$28,$00,$00,$00,$00,$00,$00 ; "
 $BF64 DEFB $00,$18,$18,$00,$00,$18,$18,$00 ; #
 $BF6C DEFB $00,$62,$64,$08,$10,$26,$46,$00 ; $
 $BF74 DEFB $3C,$42,$99,$A1,$A1,$99,$42,$3C ; %
 $BF7C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; &
 $BF84 DEFB $10,$10,$00,$00,$00,$00,$00,$00 ; '
 $BF8C DEFB $08,$18,$18,$18,$18,$18,$18,$08 ; (
 $BF94 DEFB $10,$18,$18,$18,$18,$18,$18,$10 ; )
 $BF9C DEFB $00,$14,$58,$3E,$7C,$1A,$28,$00 ; *
 $BFA4 DEFB $00,$18,$18,$7E,$78,$18,$18,$00 ; +
 $BFAC DEFB $00,$00,$00,$00,$00,$00,$20,$20 ; ,
 $BFB4 DEFB $00,$00,$00,$7E,$7E,$00,$00,$00 ; -
 $BFBC DEFB $00,$00,$00,$00,$00,$00,$18,$18 ; .
 $BFC4 DEFB $0C,$0C,$18,$18,$30,$30,$60,$60 ; /
 $BFCC DEFB $7C,$FE,$C6,$C6,$C6,$FE,$7C,$00 ; 0
 $BFD4 DEFB $18,$38,$58,$18,$18,$18,$3C,$00 ; 1
 $BFDC DEFB $7C,$FE,$06,$7C,$C0,$FE,$FE,$00 ; 2
 $BFE4 DEFB $FE,$FC,$08,$1C,$06,$FE,$FC,$00 ; 3
 $BFEC DEFB $0C,$1C,$3C,$6C,$FE,$0C,$0C,$00 ; 4
 $BFF4 DEFB $FE,$FE,$C0,$FC,$06,$FE,$7C,$00 ; 5
 $BFFC DEFB $7C,$FE,$C0,$FC,$C6,$FE,$7C,$00 ; 6
 $C004 DEFB $FE,$FC,$0C,$18,$18,$30,$30,$00 ; 7
 $C00C DEFB $7C,$FE,$C6,$7C,$C6,$FE,$7C,$00 ; 8
 $C014 DEFB $7C,$FE,$C6,$7E,$06,$FE,$7C,$00 ; 9
 $C01C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; :
 $C024 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; ;
 $C02C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; <
 $C034 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; =
 $C03C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; >
 $C044 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; ?
 $C04C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; @
 $C054 DEFB $38,$38,$6C,$7C,$EE,$EE,$C6,$00 ; A
 $C05C DEFB $FC,$FE,$E6,$FC,$E6,$FE,$FC,$00 ; B
 $C064 DEFB $3C,$7E,$F8,$E0,$F8,$7E,$3C,$00 ; C
 $C06C DEFB $F8,$FC,$FE,$C6,$FE,$FC,$F8,$00 ; D
 $C074 DEFB $F8,$F8,$E0,$FC,$E0,$FE,$FE,$00 ; E
 $C07C DEFB $FE,$FE,$E0,$FC,$E0,$E0,$E0,$00 ; F
 $C084 DEFB $3C,$7E,$F8,$E0,$FE,$7E,$3A,$00 ; G
 $C08C DEFB $EE,$EE,$FE,$FE,$FE,$EE,$EE,$00 ; H
 $C094 DEFB $7C,$7C,$38,$38,$38,$7C,$7C,$00 ; I
 $C09C DEFB $0E,$0E,$0E,$0E,$EE,$7C,$38,$00 ; J
 $C0A4 DEFB $EE,$EC,$F8,$F8,$F8,$EC,$EE,$00 ; K
 $C0AC DEFB $E0,$E0,$E0,$E0,$FE,$FE,$FE,$00 ; L
 $C0B4 DEFB $82,$EE,$FE,$FE,$D6,$D6,$D6,$00 ; M
 $C0BC DEFB $8E,$CE,$EE,$FE,$EE,$E6,$E2,$00 ; N
 $C0C4 DEFB $38,$7C,$FE,$EE,$FE,$7C,$38,$00 ; O
 $C0CC DEFB $FC,$FE,$E6,$FE,$FC,$E0,$E0,$00 ; P
 $C0D4 DEFB $38,$7C,$FE,$EE,$FE,$7C,$3E,$00 ; Q
 $C0DC DEFB $FC,$FE,$E6,$FE,$FC,$EC,$EE,$00 ; R
 $C0E4 DEFB $7C,$FE,$F0,$7C,$1E,$FE,$7C,$00 ; S
 $C0EC DEFB $FE,$FE,$FE,$38,$38,$38,$38,$00 ; T
 $C0F4 DEFB $EE,$EE,$EE,$EE,$FE,$FE,$7C,$00 ; U
 $C0FC DEFB $EE,$EE,$6C,$7C,$38,$38,$10,$00 ; V
 $C104 DEFB $D6,$D6,$D6,$FE,$FE,$EE,$82,$00 ; W
 $C10C DEFB $EE,$EE,$6C,$38,$6C,$EE,$EE,$00 ; X
 $C114 DEFB $EE,$6C,$7C,$38,$38,$38,$38,$00 ; Y
 $C11C DEFB $FE,$FC,$F8,$10,$3E,$7E,$FE,$00 ; Z

; Sprite: Can
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C125-$C126;$C135-$C136;$C145-$C146{,4*4}(Can) }
; TABLE#
@label=SpriteCan
b$C124 DEFB $14                             ; Height (in pixels).
 $C125 DEFB $07,$E0,$18,$18,$2F,$F4,$7E,$1E ; {Graphic data.
 $C12D DEFB $3E,$34,$3E,$54,$3E,$EC,$3D,$DC ;
 $C135 DEFB $3D,$BC,$39,$DC,$23,$BC,$27,$7C ;
 $C13D DEFB $26,$BC,$2F,$FC,$38,$1C,$20,$C4 ;
 $C145 DEFB $5D,$22,$20,$C4,$18,$18,$07,$E0 ; }

; Sprite: Money Bag
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C14E-$C14F;$C15E-$C15F(MoneyBag) }
; TABLE#
@label=SpriteMoneyBag
b$C14D DEFB $10                             ; Height (in pixels).
 $C14E DEFB $1F,$F8,$7F,$7E,$F8,$1E,$F0,$4F ; {Graphic data.
 $C156 DEFB $F8,$0F,$F9,$7F,$FC,$0F,$7F,$7F ;
 $C15E DEFB $7F,$FF,$3E,$1E,$1D,$EE,$87,$B4 ;
 $C166 DEFB $7F,$18,$CE,$04,$11,$34,$0E,$C8 ; }

; Sprite: Gobstopper
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C16F-$C170;$C17F-$C180(Gobstopper) }
; TABLE#
@label=SpriteGobstopper
b$C16E DEFB $10                             ; Height (in pixels).
 $C16F DEFB $07,$A0,$1F,$E8,$3B,$74,$6A,$9A ; {Graphic data.
 $C177 DEFB $5F,$DA,$D8,$CD,$B0,$75,$FC,$75 ;
 $C17F DEFB $F2,$35,$C0,$1D,$C8,$1D,$76,$3A ;
 $C187 DEFB $70,$3A,$38,$74,$1F,$E8,$07,$A0 ; }

; Sprite: Amulet
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C190-$C191;$C1A0-$C1A1{,3*4}(Amulet) }
; TABLE#
@label=SpriteAmulet
b$C18F DEFB $0D                             ; Height (in pixels).
 $C190 DEFB $1F,$F8,$28,$14,$48,$12,$9A,$B1 ; {Graphic data.
 $C198 DEFB $F7,$EF,$D5,$58,$A7,$B5,$F7,$F1 ;
 $C1A0 DEFB $08,$0F,$F7,$F1,$77,$52,$37,$D4 ;
 $C1A8 DEFB $17,$F8                         ; }

; Sprite: Candy Bar
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C1AB-$C1AC;$C1BB-$C1BC(CandyBar) }
; TABLE#
@label=SpriteCandyBar
b$C1AA DEFB $10                             ; Height (in pixels).
 $C1AB DEFB $10,$00,$38,$00,$44,$00,$82,$00 ; {Graphic data.
 $C1B3 DEFB $7F,$00,$3F,$80,$10,$40,$08,$20 ;
 $C1BB DEFB $07,$F0,$03,$F8,$01,$04,$00,$82 ;
 $C1C3 DEFB $00,$7F,$00,$3E,$00,$14,$00,$08 ; }

; Sprite: Ham
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C1CC-$C1CD;$C1DC-$C1DD;$C1EC-$C1ED{,4*4}(Ham) }
; TABLE#
@label=SpriteHam
b$C1CB DEFB $14                             ; Height (in pixels).
 $C1CC DEFB $0F,$FC,$10,$02,$11,$C1,$11,$C3 ; {Graphic data.
 $C1D4 DEFB $18,$0E,$0F,$FC,$0F,$F8,$07,$F8 ;
 $C1DC DEFB $07,$F0,$07,$F0,$03,$E0,$03,$E0 ;
 $C1E4 DEFB $03,$C0,$00,$00,$01,$80,$01,$80 ;
 $C1EC DEFB $01,$80,$01,$C0,$07,$E0,$07,$60 ; }

; Sprite: Lollipop
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C1F5-$C1F6;$C205-$C206;$C215-$C216{,6*4}(Lollipop) }
; TABLE#
@label=SpriteLollipop
b$C1F4 DEFB $12                             ; Height (in pixels).
 $C1F5 DEFB $00,$18,$00,$38,$00,$30,$00,$70 ; {Graphic data.
 $C1FD DEFB $00,$60,$00,$E0,$0F,$40,$3F,$C0 ;
 $C205 DEFB $7F,$E0,$7F,$E0,$FF,$F0,$CF,$F0 ;
 $C20D DEFB $CF,$F0,$C7,$F0,$61,$E0,$71,$E0 ;
 $C215 DEFB $3F,$C0,$0F,$00                 ; }

; Sprite: Ice Cream Cone
;
; This sprite is 2 bytes wide.
; .
; NOTE: The height of $12 is a bug, it should be $10. As it is $12, the (top)
; of the ice cream cone borrows 2 bytes of data from #R$C23A.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$C21A-$C21B;$C22A-$C22B;$C23A-$C23B{,6*4}(IceCreamCone)
; }
; TABLE#
@label=SpriteIceCreamCone
b$C219 DEFB $12                             ; Height (in pixels).
 $C21A DEFB $00,$01,$00,$0F,$00,$54,$03,$FE ; {Graphic data.
 $C222 DEFB $15,$54,$3F,$FC,$7D,$54,$07,$F8 ;
 $C22A DEFB $C9,$D0,$D0,$F8,$E8,$D0,$F2,$70 ;
 $C232 DEFB $79,$50,$74,$60,$3D,$40,$0F,$00 ; }

; Sprite: Appear 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$C23B-$C23C;$C24B-$C24C{,4*4}(Appear1) }
; TABLE#
@label=SpriteAppear1
b$C23A DEFB $0C                             ; Height (in pixels).
 $C23B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $C243 DEFB $02,$00,$01,$40,$04,$20,$02,$80 ;
 $C24B DEFB $0A,$A0,$00,$50,$01,$00,$04,$40 ; }

; Sprite: Appear 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$C254-$C255;$C264-$C265{,3*4}(Appear2) }
; TABLE#
@label=SpriteAppear2
b$C253 DEFB $0D                             ; Height (in pixels).
 $C254 DEFB $00,$00,$00,$00,$00,$00,$00,$80 ; {Graphic data.
 $C25C DEFB $02,$00,$09,$50,$04,$80,$02,$D0 ;
 $C264 DEFB $0B,$88,$01,$A0,$15,$08,$00,$A0 ;
 $C26C DEFB $02,$00                         ; }

; Sprite: Appear 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$C26F-$C270;$C27F-$C280{,1*4}(Appear3) }
; TABLE#
@label=SpriteAppear3
b$C26E DEFB $0F                             ; Height (in pixels).
 $C26F DEFB $00,$00,$01,$20,$02,$08,$80,$A0 ; {Graphic data.
 $C277 DEFB $22,$14,$14,$60,$03,$50,$55,$82 ;
 $C27F DEFB $09,$74,$13,$40,$24,$50,$01,$94 ;
 $C287 DEFB $0A,$40,$00,$10,$01,$00         ; }

; Sprite: Appear 4
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$C28E-$C28F;$C29E-$C29F(Appear4) }
; TABLE#
@label=SpriteAppear4
b$C28D DEFB $10                             ; Height (in pixels).
 $C28E DEFB $00,$80,$12,$08,$00,$40,$2A,$02 ; {Graphic data.
 $C296 DEFB $00,$A8,$85,$40,$12,$52,$45,$A8 ;
 $C29E DEFB $11,$14,$05,$28,$52,$52,$05,$00 ;
 $C2A6 DEFB $08,$90,$22,$44,$09,$20,$00,$40 ; }

; Sprite: Locked Cave Door
;
; #UDGTABLE
; { #UDGARRAY4,$07,4,4,,2;$C2B0-$C2B3;$C2D0-$C2D3;$C2F0-$C2F3(LockedCaveDoor) }
; TABLE#
@label=SpriteLockedCaveDoor
b$C2AE DEFB $04                             ; Width (in bytes).
 $C2AF DEFB $18                             ; Height (in pixels).
 $C2B0 DEFB $FF,$1B,$18,$FF,$03,$1B,$18,$B0 ; {Graphic data.
 $C2B8 DEFB $03,$1B,$18,$B0,$07,$1B,$18,$98 ;
 $C2C0 DEFB $0D,$33,$0C,$98,$1A,$33,$0C,$98 ;
 $C2C8 DEFB $3A,$33,$0C,$EC,$7A,$33,$00,$58 ;
 $C2D0 DEFB $5A,$63,$0E,$70,$CE,$63,$17,$78 ;
 $C2D8 DEFB $8C,$63,$19,$2C,$0C,$63,$0E,$26 ;
 $C2E0 DEFB $0C,$C3,$00,$23,$1C,$C3,$03,$21 ;
 $C2E8 DEFB $32,$C3,$03,$43,$62,$43,$02,$46 ;
 $C2F0 DEFB $F8,$00,$00,$86,$7F,$C0,$03,$0C ;
 $C2F8 DEFB $0F,$38,$1C,$0C,$03,$C7,$FC,$18 ;
 $C300 DEFB $00,$F0,$DF,$38,$00,$3D,$87,$F0 ;
 $C308 DEFB $00,$0F,$00,$C0,$00,$02,$00,$00 ; }

; Sprite: Spider 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C311-$C312;$C321-$C322{,2*4}(Spider1) }
; TABLE#
@label=SpriteSpider1
b$C310 DEFB $0E                             ; Height (in pixels).
 $C311 DEFB $0C,$30,$0C,$30,$C0,$03,$C6,$63 ; {Graphic data.
 $C319 DEFB $60,$06,$1F,$F8,$39,$9C,$74,$2E ;
 $C321 DEFB $76,$6E,$79,$9E,$7F,$FE,$3F,$FC ;
 $C329 DEFB $1F,$F8,$0F,$F0                 ; }

; Sprite: Spider 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C32E-$C32F;$C33E-$C33F{,2*4}(Spider2) }
; TABLE#
@label=SpriteSpider2
b$C32D DEFB $0E                             ; Height (in pixels).
 $C32E DEFB $00,$00,$60,$06,$66,$66,$06,$60 ; {Graphic data.
 $C336 DEFB $33,$CC,$1F,$F8,$39,$9C,$74,$2E ;
 $C33E DEFB $76,$6E,$79,$9E,$7F,$FE,$3F,$FC ;
 $C346 DEFB $1F,$F8,$0F,$F0                 ; }

; Sprite: Ghost 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C34B-$C34C;$C35B-$C35C(Ghost1) }
; TABLE#
@label=SpriteGhost1
b$C34A DEFB $10                             ; Height (in pixels).
 $C34B DEFB $03,$FF,$FF,$FC,$3F,$F0,$0F,$FC ; {Graphic data.
 $C353 DEFB $3F,$FF,$FF,$FC,$3F,$F8,$13,$9E ;
 $C35B DEFB $65,$2F,$ED,$68,$33,$9E,$3F,$F1 ;
 $C363 DEFB $67,$F8,$03,$B8,$03,$1C,$02,$00 ; }

; Sprite: Ghost 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C36C-$C36D;$C37C-$C37D(Ghost2) }
; TABLE#
@label=SpriteGhost2
b$C36B DEFB $10                             ; Height (in pixels).
 $C36C DEFB $FF,$80,$7F,$FF,$0F,$FC,$3F,$F0 ; {Graphic data.
 $C374 DEFB $FF,$FF,$7F,$FE,$1F,$FC,$33,$98 ;
 $C37C DEFB $65,$2F,$7D,$6E,$73,$98,$1F,$F8 ;
 $C384 DEFB $3F,$F8,$7F,$6E,$63,$62,$01,$20 ; }

; Sprite: Bouncy 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C38D-$C38E;$C39D-$C39E{,5*4}(Bouncy1) }
; TABLE#
@label=SpriteBouncy1
b$C38C DEFB $0B                             ; Height (in pixels).
 $C38D DEFB $0E,$E0,$1F,$F0,$39,$38,$34,$90 ; {Graphic data.
 $C395 DEFB $36,$D8,$39,$38,$1F,$F0,$0F,$E0 ;
 $C39D DEFB $1C,$70,$38,$38,$F0,$1E         ; }

; Sprite: Bouncy 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C3A4-$C3A5;$C3B4-$C3B5{,7*4}(Bouncy2) }
; TABLE#
@label=SpriteBouncy2
b$C3A3 DEFB $09                             ; Height (in pixels).
 $C3A4 DEFB $0E,$E0,$1F,$F0,$39,$38,$34,$98 ; {Graphic data.
 $C3AC DEFB $36,$D8,$39,$38,$1F,$F0,$3F,$F8 ;
 $C3B4 DEFB $F8,$3E                         ; }

; Sprite: Smorph 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C3B7-$C3B8;$C3C7-$C3C8;$C3D7-$C3D8{,4*4}(Smorph1) }
; TABLE#
@label=SpriteSmorph1
b$C3B6 DEFB $14                             ; Height (in pixels).
 $C3B7 DEFB $01,$C0,$03,$80,$03,$00,$03,$00 ; {Graphic data.
 $C3BF DEFB $83,$81,$87,$C1,$8F,$E1,$CF,$F3 ;
 $C3C7 DEFB $DF,$F3,$DF,$FB,$DF,$FB,$DF,$FB ;
 $C3CF DEFB $D9,$9B,$D9,$9B,$19,$98,$19,$98 ;
 $C3D7 DEFB $19,$98,$1F,$F8,$0F,$F0,$07,$E0 ; }

; Sprite: Smorph 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C3E0-$C3E1;$C3F0-$C3F1;$C400-$C401{,4*4}(Smorph2) }
; TABLE#
@label=SpriteSmorph2
b$C3DF DEFB $14                             ; Height (in pixels).
 $C3E0 DEFB $03,$80,$01,$C0,$00,$C0,$00,$C0 ; {Graphic data.
 $C3E8 DEFB $01,$C0,$03,$E0,$87,$F1,$8F,$F1 ;
 $C3F0 DEFB $8F,$F9,$DF,$FB,$DF,$FB,$DF,$FB ;
 $C3F8 DEFB $D9,$9B,$D9,$9B,$D9,$9B,$D9,$9B ;
 $C400 DEFB $99,$99,$0F,$F0,$0F,$F0,$07,$E0 ; }

; Sprite: Jelly Ghoul 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C409-$C40A;$C419-$C41A(JellyGhoul1) }
; TABLE#
@label=SpriteJellyGhoul1
b$C408 DEFB $10                             ; Height (in pixels).
 $C409 DEFB $03,$C0,$07,$E0,$7F,$FE,$FF,$FF ; {Graphic data.
 $C411 DEFB $FF,$FF,$7F,$FE,$3F,$FE,$1F,$FC ;
 $C419 DEFB $1C,$EC,$18,$44,$18,$44,$1C,$44 ;
 $C421 DEFB $0C,$CC,$0F,$F8,$07,$F0,$03,$C0 ; }

; Sprite: Jelly Ghoul 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C42A-$C42B;$C43A-$C43B(JellyGhoul2) }
; TABLE#
@label=SpriteJellyGhoul2
b$C429 DEFB $10                             ; Height (in pixels).
 $C42A DEFB $78,$0C,$FC,$1E,$FE,$3F,$FF,$FF ; {Graphic data.
 $C432 DEFB $7F,$FF,$3F,$FE,$1F,$FC,$1F,$FC ;
 $C43A DEFB $1C,$EC,$18,$44,$18,$44,$1C,$44 ;
 $C442 DEFB $0C,$CC,$0F,$F8,$07,$F0,$03,$C0 ; }

; Sprite: Bat 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C44B-$C44C;$C45B-$C45C;$C46B-$C46C{,6*4}(Bat1) }
; TABLE#
@label=SpriteBat1
b$C44A DEFB $12                             ; Height (in pixels).
 $C44B DEFB $00,$00,$00,$00,$00,$00,$04,$40 ; {Graphic data.
 $C453 DEFB $0C,$60,$03,$80,$07,$C0,$06,$C0 ;
 $C45B DEFB $0D,$60,$1F,$F0,$1C,$70,$38,$38 ;
 $C463 DEFB $30,$18,$60,$0C,$40,$04,$C0,$06 ;
 $C46B DEFB $80,$02,$80,$02                 ; }

; Sprite: Bat 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C470-$C471;$C480-$C481{,2*4}(Bat2) }
; TABLE#
@label=SpriteBat2
b$C46F DEFB $0E                             ; Height (in pixels).
 $C470 DEFB $80,$02,$80,$02,$80,$02,$40,$04 ; {Graphic data.
 $C478 DEFB $60,$0C,$64,$4C,$3C,$78,$3B,$B8 ;
 $C480 DEFB $17,$D0,$06,$C0,$05,$40,$0F,$E0 ;
 $C488 DEFB $0C,$60,$08,$20                 ; }

; Sprite: Chicken Carcass
;
; #UDGTABLE
; {
; #UDGARRAY6,$46,4,6,,2;$C48E-$C493;$C4BE-$C4C3;$C4EE-$C4F3;$C51E-$C523{,2*4}(ChickenCarcass)
; }
; TABLE#
@label=SpriteChickenCarcass
b$C48C DEFB $06                             ; Width (in bytes).
 $C48D DEFB $1E                             ; Height (in pixels).
 $C48E DEFB $00,$00,$0F,$FF,$F8,$00,$00,$00 ; {Graphic data.
 $C496 DEFB $FF,$FE,$3E,$00,$00,$07,$FF,$FD ;
 $C49E DEFB $DF,$80,$00,$1F,$E7,$01,$E8,$C0 ;
 $C4A6 DEFB $00,$7E,$E4,$F0,$E7,$60,$01,$F6 ;
 $C4AE DEFB $73,$FC,$73,$80,$03,$33,$27,$F8 ;
 $C4B6 DEFB $33,$C0,$04,$18,$0F,$FD,$38,$C0 ;
 $C4BE DEFB $08,$00,$0F,$FD,$18,$E0,$00,$00 ;
 $C4C6 DEFB $1F,$FD,$18,$E0,$00,$00,$1F,$FD ;
 $C4CE DEFB $18,$E0,$00,$00,$3F,$FD,$18,$E0 ;
 $C4D6 DEFB $00,$00,$3F,$FB,$38,$E0,$00,$00 ;
 $C4DE DEFB $7F,$FB,$38,$E8,$00,$00,$7F,$F6 ;
 $C4E6 DEFB $71,$D8,$00,$1E,$DF,$EE,$71,$DC ;
 $C4EE DEFB $00,$0D,$3F,$DC,$F3,$BC,$00,$02 ;
 $C4F6 DEFB $FF,$3C,$E3,$78,$00,$05,$E0,$79 ;
 $C4FE DEFB $E3,$70,$00,$0B,$9E,$F1,$D8,$E0 ;
 $C506 DEFB $00,$17,$3E,$E3,$BF,$C0,$0C,$2E ;
 $C50E DEFB $1F,$1B,$7F,$80,$1E,$DC,$07,$FC ;
 $C516 DEFB $FE,$00,$37,$B8,$01,$BB,$F8,$00 ;
 $C51E DEFB $33,$F0,$00,$3F,$E0,$00,$1D,$E0 ;
 $C526 DEFB $00,$00,$00,$00,$03,$C0,$00,$00 ;
 $C52E DEFB $00,$00,$06,$E0,$00,$00,$00,$00 ;
 $C536 DEFB $06,$60,$00,$00,$00,$00,$03,$C0 ;
 $C53E DEFB $00,$00,$00,$00                 ; }

; Sprite: Full Chicken
;
; #UDGTABLE
; {
; #UDGARRAY6,$46,4,6,,2;$C544-$C549;$C574-$C579;$C5A4-$C5A9;$C5D4-$C5D9{,2*4}(FullChicken)
; }
; TABLE#
@label=SpriteFullChicken
b$C542 DEFB $06                             ; Width (in bytes).
 $C543 DEFB $1E                             ; Height (in pixels).
 $C544 DEFB $00,$00,$FF,$FF,$FE,$00,$00,$07 ; {Graphic data.
 $C54C DEFB $FF,$FF,$FF,$80,$00,$1F,$FF,$0F ;
 $C554 DEFB $FF,$C0,$00,$7F,$FE,$F7,$FF,$E0 ;
 $C55C DEFB $01,$FF,$F9,$BB,$FF,$F0,$03,$FF ;
 $C564 DEFB $F7,$FD,$FF,$F8,$07,$FF,$EF,$F5 ;
 $C56C DEFB $FF,$FC,$0F,$FF,$DF,$DE,$FF,$EC ;
 $C574 DEFB $1F,$DF,$5D,$BE,$FF,$FE,$36,$FD ;
 $C57C DEFB $BF,$F6,$DE,$FE,$3F,$FF,$B7,$FE ;
 $C584 DEFB $FF,$FE,$1B,$BF,$7E,$BE,$FF,$BA ;
 $C58C DEFB $0E,$FB,$7F,$FD,$BB,$FA,$07,$BE ;
 $C594 DEFB $F7,$7D,$FF,$FE,$01,$F6,$FF,$DB ;
 $C59C DEFB $FF,$FE,$00,$DD,$FE,$F7,$FF,$7E ;
 $C5A4 DEFB $00,$3B,$77,$ED,$7F,$DE,$00,$17 ;
 $C5AC DEFB $FE,$DF,$FF,$EC,$00,$0B,$FF,$3F ;
 $C5B4 DEFB $FB,$F8,$00,$1F,$C0,$FB,$FF,$B0 ;
 $C5BC DEFB $00,$1F,$BF,$FF,$BF,$E0,$0C,$2F ;
 $C5C4 DEFB $37,$BF,$FB,$C0,$1E,$DE,$1D,$FB ;
 $C5CC DEFB $FF,$80,$37,$B8,$07,$BF,$BE,$00 ;
 $C5D4 DEFB $33,$F0,$01,$FB,$F8,$00,$1D,$E0 ;
 $C5DC DEFB $00,$3F,$E0,$00,$03,$C0,$00,$00 ;
 $C5E4 DEFB $00,$00,$06,$E0,$00,$00,$00,$00 ;
 $C5EC DEFB $06,$60,$00,$00,$00,$00,$03,$C0 ;
 $C5F4 DEFB $00,$00,$00,$00                 ; }

; Sprite: Dead 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C5F9-$C5FA;$C609-$C60A{,5*4}(Dead1) }
; TABLE#
@label=SpriteDead1
b$C5F8 DEFB $0B                             ; Height (in pixels).
 $C5F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $C601 DEFB $00,$00,$03,$40,$05,$C0,$07,$60 ;
 $C609 DEFB $06,$A0,$03,$C0,$01,$00         ; }

; Sprite: Dead 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C610-$C611;$C620-$C621{,3*4}(Dead2) }
; TABLE#
@label=SpriteDead2
b$C60F DEFB $0D                             ; Height (in pixels).
 $C610 DEFB $00,$00,$00,$00,$00,$00,$00,$80 ; {Graphic data.
 $C618 DEFB $01,$A0,$0B,$48,$02,$F0,$1F,$40 ;
 $C620 DEFB $06,$F8,$07,$B0,$09,$C8,$02,$A0 ;
 $C628 DEFB $02,$90                         ; }

; Sprite: Dead 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C62B-$C62C;$C63B-$C63C{,1*4}(Dead3) }
; TABLE#
@label=SpriteDead3
b$C62A DEFB $0F                             ; Height (in pixels).
 $C62B DEFB $00,$00,$05,$00,$11,$10,$09,$10 ; {Graphic data.
 $C633 DEFB $04,$24,$38,$08,$00,$10,$70,$00 ;
 $C63B DEFB $00,$0E,$10,$00,$64,$2C,$0A,$92 ;
 $C643 DEFB $12,$A8,$02,$80,$00,$80         ; }

; Sprite: Dead 4
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C64A-$C64B;$C65A-$C65B(Dead4) }
; TABLE#
@label=SpriteDead4
b$C649 DEFB $10                             ; Height (in pixels).
 $C64A DEFB $01,$00,$11,$10,$08,$20,$00,$02 ; {Graphic data.
 $C652 DEFB $40,$04,$20,$00,$00,$00,$C0,$00 ;
 $C65A DEFB $00,$03,$00,$00,$40,$02,$80,$01 ;
 $C662 DEFB $00,$00,$20,$04,$44,$82,$04,$80 ; }

; Sprite: Antler Trophy
;
; #UDGTABLE
; { #UDGARRAY4,,4,4,,2;$C66C-$C66F;$C68C-$C68F@$C962-$C969(AntlerTrophy) }
; TABLE#
@label=SpriteAntlerTrophy
b$C66A DEFB $04                             ; Width (in bytes).
 $C66B DEFB $10                             ; Height (in pixels).
 $C66C DEFB $00,$03,$C0,$00,$00,$04,$20,$00 ; {Graphic data.
 $C674 DEFB $00,$08,$10,$00,$00,$13,$C8,$00 ;
 $C67C DEFB $00,$27,$E4,$00,$00,$2D,$B4,$00 ;
 $C684 DEFB $00,$49,$92,$00,$00,$7F,$FE,$00 ;
 $C68C DEFB $03,$F9,$9F,$C0,$07,$F5,$AF,$E0 ;
 $C694 DEFB $0F,$F6,$6F,$F0,$1C,$B9,$9D,$38 ;
 $C69C DEFB $30,$9F,$F9,$0C,$20,$8F,$F1,$04 ;
 $C6A4 DEFB $00,$C0,$03,$00,$00,$3F,$FC,$00 ; }

; Sprite: Trophy
;
; #UDGTABLE
; { #UDGARRAY2,,4,2,,2;$C6AE-$C6AF;$C6BE-$C6BF@$C96C-$C96F(Trophy) }
; TABLE#
@label=SpriteTrophy
b$C6AC DEFB $02                             ; Width (in bytes).
 $C6AD DEFB $10                             ; Height (in pixels).
 $C6AE DEFB $03,$C0,$04,$20,$08,$10,$13,$C8 ; {Graphic data.
 $C6B6 DEFB $27,$E4,$2D,$B4,$4D,$B2,$4F,$F2 ;
 $C6BE DEFB $49,$92,$94,$29,$B6,$6D,$B9,$9D ;
 $C6C6 DEFB $BF,$FD,$98,$19,$C0,$03,$3F,$FC ; }

; Sprite: Bookcase
;
; #UDGTABLE
; {
; #UDGARRAY5,,4,5,,2;$C6D0-$C6D4;$C6F8-$C6FC;$C720-$C724;$C748-$C74C@$C972-$C985(Bookcase)
; }
; TABLE#
@label=SpriteBookcase
b$C6CE DEFB $05                             ; Width (in bytes).
 $C6CF DEFB $20                             ; Height (in pixels).
 $C6D0 DEFB $1F,$FF,$FF,$FF,$F8,$18,$00,$00 ; {Graphic data.
 $C6D8 DEFB $00,$18,$14,$00,$00,$00,$28,$13 ;
 $C6E0 DEFB $FF,$FF,$FF,$C8,$12,$00,$00,$00 ;
 $C6E8 DEFB $48,$12,$00,$00,$00,$48,$12,$00 ;
 $C6F0 DEFB $00,$00,$48,$3F,$FF,$FF,$FF,$FC ;
 $C6F8 DEFB $30,$00,$00,$00,$0C,$28,$00,$00 ;
 $C700 DEFB $00,$14,$24,$00,$00,$00,$24,$23 ;
 $C708 DEFB $FF,$FF,$FF,$C4,$22,$00,$00,$00 ;
 $C710 DEFB $44,$22,$00,$00,$00,$44,$22,$00 ;
 $C718 DEFB $00,$00,$44,$7F,$FF,$FF,$FF,$FE ;
 $C720 DEFB $60,$00,$00,$00,$06,$50,$C6,$F6 ;
 $C728 DEFB $EF,$0A,$48,$C7,$F6,$ED,$12,$47 ;
 $C730 DEFB $CE,$F6,$EB,$E2,$44,$CE,$F6,$ED ;
 $C738 DEFB $22,$44,$DC,$F6,$EB,$22,$44,$DC ;
 $C740 DEFB $F6,$ED,$22,$44,$F8,$F6,$EB,$22 ;
 $C748 DEFB $FF,$FF,$FF,$FF,$FF,$00,$00,$00 ;
 $C750 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF,$7F ;
 $C758 DEFB $FF,$FF,$FF,$FE,$3F,$FF,$FF,$FF ;
 $C760 DEFB $FC,$1F,$FF,$FF,$FF,$F8,$0F,$FF ;
 $C768 DEFB $FF,$FF,$F0,$07,$FF,$FF,$FF,$E0 ; }

; Sprite: Open Trap Door
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$C772-$C775;$C792-$C795;$C7B2-$C7B5;$C7D2-$C7D5@$C988-$C997(OpenTrapDoor)
; }
; TABLE#
@label=SpriteOpenTrapDoor
b$C770 DEFB $04                             ; Width (in bytes).
 $C771 DEFB $20                             ; Height (in pixels).
 $C772 DEFB $00,$3C,$F0,$00,$0E,$66,$F9,$C0 ; {Graphic data.
 $C77A DEFB $1F,$5E,$BB,$F8,$3F,$5C,$D1,$FC ;
 $C782 DEFB $77,$58,$55,$FE,$7B,$6B,$56,$0E ;
 $C78A DEFB $DD,$BB,$77,$F6,$DF,$D8,$01,$8E ;
 $C792 DEFB $4F,$00,$00,$76,$63,$00,$00,$F2 ;
 $C79A DEFB $3E,$00,$00,$F0,$00,$00,$00,$CE ;
 $C7A2 DEFB $7E,$00,$00,$1F,$3F,$00,$00,$7F ;
 $C7AA DEFB $DE,$00,$00,$5F,$DB,$00,$00,$63 ;
 $C7B2 DEFB $BE,$00,$00,$3E,$E0,$00,$00,$00 ;
 $C7BA DEFB $0E,$00,$00,$3E,$7E,$00,$00,$7F ;
 $C7C2 DEFB $4E,$00,$00,$43,$73,$00,$00,$7D ;
 $C7CA DEFB $3F,$00,$00,$0F,$00,$00,$00,$E3 ;
 $C7D2 DEFB $3F,$36,$7D,$78,$7F,$EE,$FE,$BC ;
 $C7DA DEFB $6F,$EE,$BE,$BC,$2F,$DA,$BE,$CC ;
 $C7E2 DEFB $37,$DE,$BF,$78,$19,$DA,$C7,$60 ;
 $C7EA DEFB $0F,$CE,$7E,$00,$01,$C6,$00,$00 ; }

; Sprite: Shut Trap Door
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$C7F4-$C7F7;$C814-$C817;$C834-$C837;$C854-$C857@$C99A-$C9A9(ShutTrapDoor)
; }
; TABLE#
@label=SpriteShutTrapDoor
b$C7F2 DEFB $04                             ; Width (in bytes).
 $C7F3 DEFB $20                             ; Height (in pixels).
 $C7F4 DEFB $00,$3C,$F0,$00,$0E,$66,$F9,$C0 ; {Graphic data.
 $C7FC DEFB $1F,$5E,$BB,$F8,$3F,$5C,$D1,$FC ;
 $C804 DEFB $77,$58,$55,$FE,$7B,$6B,$56,$0E ;
 $C80C DEFB $DD,$BB,$77,$F6,$DF,$D8,$01,$8E ;
 $C814 DEFB $4F,$FF,$FF,$76,$63,$92,$49,$F2 ;
 $C81C DEFB $3E,$92,$49,$F0,$00,$FF,$F9,$CE ;
 $C824 DEFB $7E,$EA,$AD,$1F,$3F,$FF,$F9,$7F ;
 $C82C DEFB $DE,$92,$49,$5F,$DB,$92,$49,$63 ;
 $C834 DEFB $BE,$92,$49,$3E,$E0,$92,$49,$00 ;
 $C83C DEFB $0E,$FF,$F9,$3E,$7E,$EA,$AD,$7F ;
 $C844 DEFB $4E,$FF,$F9,$43,$73,$92,$49,$7D ;
 $C84C DEFB $3F,$92,$49,$0F,$00,$FF,$FF,$E3 ;
 $C854 DEFB $3F,$36,$7D,$78,$7F,$EE,$FE,$BC ;
 $C85C DEFB $6F,$EE,$BE,$BC,$2F,$DA,$BE,$CC ;
 $C864 DEFB $37,$DE,$BF,$78,$19,$DA,$C7,$60 ;
 $C86C DEFB $0F,$CE,$7E,$00,$01,$C6,$00,$00 ; }

; Sprite: Rug
;
; #UDGTABLE
; {
; #UDGARRAY6,$07,4,6,,2;$C876-$C87B;$C8A6-$C8AB;$C8D6-$C8DB;$C906-$C90B;$C936-$C93B{,1*4}(Rug)
; }
; TABLE#
@label=SpriteRug
b$C874 DEFB $06                             ; Width (in bytes).
 $C875 DEFB $27                             ; Height (in pixels).
 $C876 DEFB $00,$03,$80,$00,$02,$00,$00,$07 ; {Graphic data.
 $C87E DEFB $C0,$00,$0D,$00,$00,$07,$C0,$00 ;
 $C886 DEFB $1E,$00,$00,$07,$C0,$00,$1F,$00 ;
 $C88E DEFB $00,$03,$C0,$00,$1F,$00,$00,$03 ;
 $C896 DEFB $80,$00,$3E,$00,$00,$03,$80,$00 ;
 $C89E DEFB $3C,$00,$00,$03,$80,$00,$7C,$00 ;
 $C8A6 DEFB $00,$03,$80,$00,$78,$00,$00,$03 ;
 $C8AE DEFB $80,$00,$70,$00,$00,$02,$80,$00 ;
 $C8B6 DEFB $F0,$00,$00,$07,$80,$00,$B0,$00 ;
 $C8BE DEFB $00,$07,$C7,$E1,$F0,$00,$00,$06 ;
 $C8C6 DEFB $7E,$3B,$20,$00,$00,$07,$FD,$DF ;
 $C8CE DEFB $E0,$00,$03,$CF,$1E,$3C,$E0,$00 ;
 $C8D6 DEFB $0F,$FE,$EF,$FB,$70,$00,$79,$BF ;
 $C8DE DEFB $1C,$FC,$DE,$00,$BB,$D9,$FB,$67 ;
 $C8E6 DEFB $F3,$F0,$FF,$F6,$FC,$DB,$1E,$7F ;
 $C8EE DEFB $BB,$D9,$8F,$E6,$EF,$CE,$E9,$BF ;
 $C8F6 DEFB $76,$3F,$1C,$03,$0F,$FB,$8D,$D9 ;
 $C8FE DEFB $F0,$00,$03,$CC,$FE,$36,$E0,$00 ;
 $C906 DEFB $00,$07,$C7,$F9,$E0,$00,$00,$07 ;
 $C90E DEFB $FF,$FF,$20,$00,$00,$04,$C7,$E1 ;
 $C916 DEFB $F0,$00,$00,$07,$80,$00,$B0,$00 ;
 $C91E DEFB $00,$02,$80,$00,$F0,$00,$00,$03 ;
 $C926 DEFB $80,$00,$50,$00,$00,$02,$80,$00 ;
 $C92E DEFB $78,$00,$00,$03,$80,$00,$7C,$00 ;
 $C936 DEFB $00,$03,$80,$00,$3C,$00,$00,$03 ;
 $C93E DEFB $80,$00,$3E,$00,$00,$03,$C0,$00 ;
 $C946 DEFB $1F,$00,$00,$07,$C0,$00,$1F,$00 ;
 $C94E DEFB $00,$07,$C0,$00,$1E,$00,$00,$07 ;
 $C956 DEFB $C0,$00,$0D,$00,$00,$03,$80,$00 ;
 $C95E DEFB $02,$00                         ; }

; Attributes: Antler Trophy
@label=AttribAntlerTrophy
b$C960 DEFB $04                             ; Width (in bytes).
 $C961 DEFB $02                             ; Height (in bytes).
 $C962 DEFB $47,$47,$47,$47,$47,$47,$47,$47 ; Colour attribute data.

; Attributes: Trophy
@label=AttribTrophy
b$C96A DEFB $02             ; Width (in bytes).
 $C96B DEFB $02             ; Height (in bytes).
 $C96C DEFB $45,$45,$45,$45 ; Colour attribute data.

; Attributes: Bookcase
@label=AttribBookcase
b$C970 DEFB $05                             ; Width (in bytes).
 $C971 DEFB $04                             ; Height (in bytes).
 $C972 DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; {Colour attribute data.
 $C97A DEFB $46,$46,$46,$45,$43,$44,$46,$46 ;
 $C982 DEFB $46,$46,$46,$46                 ; }

; Attributes: Open Trap Door
@label=AttribOpenTrapDoor
b$C986 DEFB $04                             ; Width (in bytes).
 $C987 DEFB $04                             ; Height (in bytes).
 $C988 DEFB $43,$43,$43,$43,$43,$00,$00,$43 ; {Colour attribute data.
 $C990 DEFB $43,$00,$00,$43,$43,$43,$43,$43 ; }

; Attributes: Shut Trap Door
@label=AttribShutTrapDoor
b$C998 DEFB $04                             ; Width (in bytes).
 $C999 DEFB $04                             ; Height (in bytes).
 $C99A DEFB $43,$43,$43,$43,$43,$46,$46,$43 ; {Colour attribute data.
 $C9A2 DEFB $43,$46,$46,$43,$43,$43,$43,$43 ; }

; Attributes: Rug
@label=AttribRug
b$C9AA DEFB $06                             ; Width (in bytes).
 $C9AB DEFB $05                             ; Height (in bytes).
 $C9AC DEFB $07,$07,$07,$07,$07,$07,$07,$07 ; {Colour attribute data.
 $C9B4 DEFB $07,$07,$07,$07,$07,$07,$07,$07 ;
 $C9BC DEFB $07,$07,$07,$07,$07,$07,$07,$07 ;
 $C9C4 DEFB $07,$07,$07,$07,$07,$07         ; }

; Sprite: Acg Shield
;
; #UDGTABLE
; { #UDGARRAY2,,4,2,,2;$C9CC-$C9CD;$C9DC-$C9DD@$CA52-$CA55(AcgShield) }
; TABLE#
@label=SpriteAcgShield
b$C9CA DEFB $02                             ; Width (in bytes).
 $C9CB DEFB $10                             ; Height (in pixels).
 $C9CC DEFB $01,$80,$07,$E0,$0F,$F0,$1F,$D8 ; {Graphic data.
 $C9D4 DEFB $30,$0C,$3F,$DC,$7F,$FE,$7F,$FE ;
 $C9DC DEFB $54,$42,$D5,$DB,$C5,$D3,$D5,$DF ;
 $C9E4 DEFB $C4,$43,$FF,$FF,$E7,$E7,$81,$81 ; }

; Sprite: Shield
;
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$C9EE-$C9EF;$C9FE-$C9FF(Shield) }
; TABLE#
@label=SpriteShield
b$C9EC DEFB $02                             ; Width (in bytes).
 $C9ED DEFB $10                             ; Height (in pixels).
 $C9EE DEFB $01,$80,$07,$E0,$08,$10,$19,$98 ; {Graphic data.
 $C9F6 DEFB $39,$9C,$30,$0C,$75,$AE,$7F,$FE ;
 $C9FE DEFB $7F,$FE,$DC,$2F,$D7,$EB,$C4,$23 ;
 $CA06 DEFB $D7,$EB,$FD,$7F,$E7,$E7,$81,$81 ; }

; Sprite: Knight
;
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CA10-$CA11;$CA20-$CA21;$CA30-$CA31;$CA40-$CA41@$CA5E-$CA65(Knight)
; }
; TABLE#
@label=SpriteKnight
b$CA0E DEFB $02                             ; Width (in bytes).
 $CA0F DEFB $20                             ; Height (in pixels).
 $CA10 DEFB $30,$0C,$1C,$38,$1E,$7A,$0E,$72 ; {Graphic data.
 $CA18 DEFB $06,$62,$0A,$52,$1C,$3A,$0A,$52 ;
 $CA20 DEFB $07,$E2,$47,$E7,$47,$E2,$07,$E0 ;
 $CA28 DEFB $60,$06,$67,$E6,$A6,$65,$CC,$33 ;
 $CA30 DEFB $AD,$B5,$6D,$B6,$7F,$FE,$7F,$FE ;
 $CA38 DEFB $78,$1E,$37,$EC,$03,$C0,$07,$E0 ;
 $CA40 DEFB $0E,$70,$19,$98,$07,$E0,$0F,$F0 ;
 $CA48 DEFB $07,$E0,$03,$C0,$00,$00,$00,$00 ; }

; Attributes: Acg Shield
@label=AttribAcgShield
b$CA50 DEFB $02             ; Width (in bytes).
 $CA51 DEFB $02             ; Height (in bytes).
 $CA52 DEFB $43,$47,$47,$43 ; Colour attribute data.

; Attributes: Shield
@label=AttribShield
b$CA56 DEFB $02             ; Width (in bytes).
 $CA57 DEFB $02             ; Height (in bytes).
 $CA58 DEFB $FF,$FF,$FF,$FF ; Colour attribute data.

; Attributes: Knight
@label=AttribKnight
b$CA5C DEFB $02                             ; Width (in bytes).
 $CA5D DEFB $04                             ; Height (in bytes).
 $CA5E DEFB $45,$45,$45,$45,$45,$45,$45,$45 ; Colour attribute data.

; Attributes: Shut Cave Door
@label=AttribShutCaveDoor
b$CA66 DEFB $04                             ; Width (in bytes).
 $CA67 DEFB $03                             ; Height (in bytes).
 $CA68 DEFB $FF,$47,$47,$FF,$FF,$47,$47,$FF ; {Colour attribute data.
 $CA70 DEFB $FF,$FF,$FF,$FF                 ; }

; Attributes: Shut Normal Door
@label=AttribShutNormalDoor
b$CA74 DEFB $04                             ; Width (in bytes).
 $CA75 DEFB $03                             ; Height (in bytes).
 $CA76 DEFB $43,$47,$47,$43,$43,$47,$47,$43 ; {Colour attribute data.
 $CA7E DEFB $43,$43,$43,$43                 ; }

; Sprite: Shut Normal Door
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$CA84-$CA87;$CAA4-$CAA7;$CAC4-$CAC7@$CA76-$CA81(ShutNormalDoor)
; }
; TABLE#
@label=SpriteShutNormalDoor
b$CA82 DEFB $04                             ; Width (in bytes).
 $CA83 DEFB $18                             ; Height (in pixels).
 $CA84 DEFB $FF,$3B,$DC,$FF,$1F,$3B,$DC,$F8 ; {Graphic data.
 $CA8C DEFB $0C,$3B,$DC,$40,$3E,$3B,$DC,$7C ;
 $CA94 DEFB $7C,$00,$00,$3E,$04,$7B,$CE,$20 ;
 $CA9C DEFB $F8,$7B,$D7,$1F,$F8,$7B,$D1,$1F ;
 $CAA4 DEFB $08,$7B,$CE,$08,$F0,$7B,$C0,$0F ;
 $CAAC DEFB $F0,$00,$00,$0F,$10,$FB,$DF,$08 ;
 $CAB4 DEFB $F0,$FB,$DF,$1F,$F8,$7B,$DE,$1F ;
 $CABC DEFB $CC,$3B,$DC,$33,$3F,$0B,$D0,$7C ;
 $CAC4 DEFB $7D,$80,$01,$BE,$3B,$F0,$0F,$DC ;
 $CACC DEFB $17,$BF,$FD,$E8,$07,$7B,$DE,$E0 ;
 $CAD4 DEFB $03,$7B,$DE,$C0,$00,$77,$EE,$00 ;
 $CADC DEFB $00,$07,$E0,$00,$00,$00,$00,$00 ; }

; Sprite: Shut Cave Door
;
; #UDGTABLE
; { #UDGARRAY4,$07,4,4,,2;$CAE6-$CAE9;$CB06-$CB09;$CB26-$CB29(ShutCaveDoor) }
; TABLE#
@label=SpriteShutCaveDoor
b$CAE4 DEFB $04                             ; Width (in bytes).
 $CAE5 DEFB $18                             ; Height (in pixels).
 $CAE6 DEFB $FF,$3B,$DC,$FF,$03,$3B,$DC,$B0 ; {Graphic data.
 $CAEE DEFB $03,$3B,$DC,$B0,$07,$3B,$DC,$98 ;
 $CAF6 DEFB $0D,$00,$00,$98,$1A,$7B,$CE,$4E ;
 $CAFE DEFB $3A,$7B,$D7,$EC,$7A,$7B,$D1,$58 ;
 $CB06 DEFB $5A,$7B,$CE,$70,$CE,$7B,$C0,$78 ;
 $CB0E DEFB $8C,$00,$00,$2C,$0C,$FB,$DF,$26 ;
 $CB16 DEFB $0C,$FB,$DF,$23,$1C,$7B,$DE,$21 ;
 $CB1E DEFB $32,$3B,$DC,$43,$62,$0B,$D0,$46 ;
 $CB26 DEFB $F1,$00,$00,$86,$7F,$C0,$03,$0C ;
 $CB2E DEFB $0F,$38,$1C,$0C,$03,$C7,$FC,$18 ;
 $CB36 DEFB $00,$F0,$DF,$38,$00,$3D,$87,$F0 ;
 $CB3E DEFB $00,$0F,$00,$C0,$00,$02,$00,$00 ; }

; Sprite: Mummy 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$CB47-$CB48;$CB57-$CB58;$CB67-$CB68(Mummy1) }
; TABLE#
@label=SpriteMummy1
b$CB46 DEFB $18                             ; Height (in pixels).
 $CB47 DEFB $0F,$00,$0F,$78,$03,$78,$04,$30 ; {Graphic data.
 $CB4F DEFB $07,$70,$07,$40,$01,$F0,$07,$E0 ;
 $CB57 DEFB $0E,$20,$0F,$E0,$0F,$E0,$04,$20 ;
 $CB5F DEFB $CF,$E5,$E8,$67,$F7,$CB,$5B,$BE ;
 $CB67 DEFB $17,$D4,$03,$80,$07,$C0,$0C,$60 ;
 $CB6F DEFB $0F,$E0,$0D,$60,$07,$C0,$03,$80 ; }

; Sprite: Mummy 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$CB78-$CB79;$CB88-$CB89;$CB98-$CB99(Mummy2) }
; TABLE#
@label=SpriteMummy2
b$CB77 DEFB $18                             ; Height (in pixels).
 $CB78 DEFB $0F,$E8,$0F,$E8,$03,$30,$04,$70 ; {Graphic data.
 $CB80 DEFB $07,$40,$07,$F0,$01,$E0,$07,$E0 ;
 $CB88 DEFB $07,$10,$07,$F0,$07,$F0,$02,$10 ;
 $CB90 DEFB $AF,$E5,$78,$67,$F7,$CB,$5B,$BE ;
 $CB98 DEFB $17,$D4,$03,$80,$07,$C0,$0C,$60 ;
 $CBA0 DEFB $0F,$E0,$0D,$60,$07,$C0,$03,$80 ; }

; Sprite: Mummy 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$47,4,2,,2;$CBA9-$CBAA;$CBB9-$CBBA;$CBC9-$CBCA(Mummy3) }
; TABLE#
@label=SpriteMummy3
b$CBA8 DEFB $18                             ; Height (in pixels).
 $CBA9 DEFB $00,$78,$0F,$78,$0F,$30,$07,$70 ; {Graphic data.
 $CBB1 DEFB $04,$40,$07,$70,$07,$70,$01,$E0 ;
 $CBB9 DEFB $07,$10,$07,$F0,$07,$F0,$02,$10 ;
 $CBC1 DEFB $A7,$F5,$E4,$37,$F3,$EB,$5B,$FE ;
 $CBC9 DEFB $17,$F4,$01,$C0,$03,$E0,$06,$30 ;
 $CBD1 DEFB $07,$F0,$06,$B0,$03,$E0,$01,$C0 ; }

; Sprite: Frankenstein 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$CBDA-$CBDB;$CBEA-$CBEB;$CBFA-$CBFB(Frankenstein1) }
; TABLE#
@label=SpriteFrankenstein1
b$CBD9 DEFB $18                             ; Height (in pixels).
 $CBDA DEFB $3E,$00,$1E,$60,$00,$F0,$0E,$70 ; {Graphic data.
 $CBE2 DEFB $0E,$B0,$0E,$C4,$4F,$E4,$4F,$EA ;
 $CBEA DEFB $A0,$0A,$AF,$EE,$EE,$EE,$FE,$FE ;
 $CBF2 DEFB $FF,$FE,$7E,$FC,$0F,$E0,$20,$08 ;
 $CBFA DEFB $37,$D8,$24,$48,$0F,$E0,$14,$50 ;
 $CC02 DEFB $16,$D0,$10,$10,$1A,$B0,$0F,$E0 ; }

; Sprite: Frankenstein 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$CC0B-$CC0C;$CC1B-$CC1C;$CC2B-$CC2C(Frankenstein2) }
; TABLE#
@label=SpriteFrankenstein2
b$CC0A DEFB $18                             ; Height (in pixels).
 $CC0B DEFB $1E,$F0,$1E,$F0,$00,$00,$0E,$E0 ; {Graphic data.
 $CC13 DEFB $4E,$E4,$4E,$E4,$AF,$EA,$AF,$EA ;
 $CC1B DEFB $E0,$0E,$EF,$EE,$EF,$EE,$FE,$FE ;
 $CC23 DEFB $FF,$FE,$7E,$FC,$0F,$E0,$20,$08 ;
 $CC2B DEFB $37,$D8,$24,$48,$0F,$E0,$14,$50 ;
 $CC33 DEFB $16,$D0,$10,$10,$1A,$B0,$0F,$E0 ; }

; Sprite: Frankenstein 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$CC3C-$CC3D;$CC4C-$CC4D;$CC5C-$CC5D(Frankenstein3) }
; TABLE#
@label=SpriteFrankenstein3
b$CC3B DEFB $18                             ; Height (in pixels).
 $CC3C DEFB $00,$F8,$0C,$F0,$1E,$00,$1C,$E0 ; {Graphic data.
 $CC44 DEFB $1A,$E0,$46,$E0,$4F,$E0,$AE,$E4 ;
 $CC4C DEFB $0A,$A0,$EF,$EA,$EF,$EE,$FE,$FE ;
 $CC54 DEFB $FF,$FE,$7E,$FC,$0F,$F0,$20,$08 ;
 $CC5C DEFB $37,$D8,$24,$48,$0F,$E0,$14,$50 ;
 $CC64 DEFB $16,$D0,$10,$10,$1A,$B0,$0F,$E0 ; }

; Sprite: Devil 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$43,4,2,,2;$CC6D-$CC6E;$CC7D-$CC7E;$CC8D-$CC8E(Devil1) }
; TABLE#
@label=SpriteDevil1
b$CC6C DEFB $18                             ; Height (in pixels).
 $CC6D DEFB $0C,$07,$0C,$63,$00,$65,$0C,$04 ; {Graphic data.
 $CC75 DEFB $0C,$EC,$0E,$F8,$0F,$D0,$0F,$C0 ;
 $CC7D DEFB $05,$40,$0B,$A0,$0D,$60,$AB,$A8 ;
 $CC85 DEFB $FF,$FF,$3F,$FC,$07,$C0,$0A,$A0 ;
 $CC8D DEFB $11,$10,$14,$50,$16,$D0,$31,$18 ;
 $CC95 DEFB $7B,$BC,$6F,$EC,$47,$C4,$40,$04 ; }

; Sprite: Devil 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$43,4,2,,2;$CC9E-$CC9F;$CCAE-$CCAF;$CCBE-$CCBF(Devil2) }
; TABLE#
@label=SpriteDevil2
b$CC9D DEFB $18                             ; Height (in pixels).
 $CC9E DEFB $06,$C7,$06,$C3,$00,$05,$06,$C4 ; {Graphic data.
 $CCA6 DEFB $06,$CC,$06,$D8,$07,$D0,$07,$C0 ;
 $CCAE DEFB $05,$40,$0B,$A0,$0D,$60,$AB,$AA ;
 $CCB6 DEFB $FF,$FE,$3F,$F8,$07,$C0,$0A,$A0 ;
 $CCBE DEFB $11,$10,$14,$50,$16,$D0,$31,$18 ;
 $CCC6 DEFB $7B,$BC,$6F,$EC,$47,$C4,$40,$04 ; }

; Sprite: Devil 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$43,4,2,,2;$CCCF-$CCD0;$CCDF-$CCE0;$CCEF-$CCF0(Devil3) }
; TABLE#
@label=SpriteDevil3
b$CCCE DEFB $18                             ; Height (in pixels).
 $CCCF DEFB $00,$37,$06,$33,$06,$05,$00,$34 ; {Graphic data.
 $CCD7 DEFB $07,$3C,$07,$78,$03,$F0,$07,$F0 ;
 $CCDF DEFB $02,$A0,$05,$D0,$06,$B0,$A5,$D5 ;
 $CCE7 DEFB $FF,$FF,$3F,$FC,$03,$E0,$05,$50 ;
 $CCEF DEFB $08,$88,$0A,$28,$0B,$68,$18,$8C ;
 $CCF7 DEFB $39,$CE,$37,$F6,$23,$E2,$20,$02 ; }

; Sprite: Dracula 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$CD00-$CD01;$CD10-$CD11;$CD20-$CD21(Dracula1) }
; TABLE#
@label=SpriteDracula1
b$CCFF DEFB $18                             ; Height (in pixels).
 $CD00 DEFB $00,$F0,$0C,$00,$1C,$C0,$38,$C0 ; {Graphic data.
 $CD08 DEFB $B4,$C2,$CE,$DE,$F7,$DE,$F7,$DE ;
 $CD10 DEFB $F8,$3E,$7F,$FC,$7F,$FC,$6B,$AC ;
 $CD18 DEFB $23,$88,$3F,$F8,$0F,$E0,$3A,$B8 ;
 $CD20 DEFB $72,$9C,$41,$04,$54,$54,$16,$D0 ;
 $CD28 DEFB $19,$30,$1B,$B0,$0F,$E0,$07,$C0 ; }

; Sprite: Dracula 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$CD31-$CD32;$CD41-$CD42;$CD51-$CD52(Dracula2) }
; TABLE#
@label=SpriteDracula2
b$CD30 DEFB $18                             ; Height (in pixels).
 $CD31 DEFB $1E,$F0,$0E,$E0,$00,$00,$06,$C0 ; {Graphic data.
 $CD39 DEFB $86,$C2,$F6,$DE,$F7,$DE,$F7,$DE ;
 $CD41 DEFB $F8,$3E,$7F,$FC,$7F,$FC,$6B,$AC ;
 $CD49 DEFB $23,$88,$3F,$F8,$0F,$E0,$3A,$B8 ;
 $CD51 DEFB $72,$9C,$41,$04,$54,$54,$16,$D0 ;
 $CD59 DEFB $19,$30,$1B,$B0,$0F,$E0,$07,$C0 ; }

; Sprite: Dracula 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$44,4,2,,2;$CD62-$CD63;$CD72-$CD73;$CD82-$CD83(Dracula3) }
; TABLE#
@label=SpriteDracula3
b$CD61 DEFB $18                             ; Height (in pixels).
 $CD62 DEFB $1E,$00,$00,$60,$06,$70,$06,$38 ; {Graphic data.
 $CD6A DEFB $86,$5A,$F6,$E6,$F7,$DE,$F7,$DE ;
 $CD72 DEFB $F8,$3E,$7F,$FC,$7F,$EC,$6B,$AC ;
 $CD7A DEFB $23,$88,$3F,$F8,$0F,$E0,$3A,$B8 ;
 $CD82 DEFB $72,$9C,$41,$04,$54,$54,$16,$D0 ;
 $CD8A DEFB $19,$30,$1B,$B0,$0F,$E0,$07,$C0 ; }

; Sprite: Gravestone
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$45,4,2,,2;$CD93-$CD94;$CDA3-$CDA4;$CDB3-$CDB4{,3*4}(Gravestone)
; }
; TABLE#
@label=SpriteGravestone
b$CD92 DEFB $15                             ; Height (in pixels).
 $CD93 DEFB $22,$00,$4B,$C0,$56,$80,$37,$60 ; {Graphic data.
 $CD9B DEFB $FB,$00,$7B,$80,$FD,$80,$7D,$CE ;
 $CDA3 DEFB $9E,$AE,$9E,$77,$2F,$F9,$4F,$F6 ;
 $CDAB DEFB $07,$EC,$07,$C0,$0F,$D8,$1F,$DC ;
 $CDB3 DEFB $3D,$EC,$3D,$E2,$3A,$DC,$16,$B8 ;
 $CDBB DEFB $00,$70                         ; }

; Sprite: Crucifix
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$CDBE-$CDBF;$CDCE-$CDCF;$CDDE-$CDDF{,6*4}(Crucifix) }
; TABLE#
@label=SpriteCrucifix
b$CDBD DEFB $12                             ; Height (in pixels).
 $CDBE DEFB $01,$80,$03,$C0,$03,$C0,$01,$80 ; {Graphic data.
 $CDC6 DEFB $01,$80,$01,$80,$01,$80,$01,$80 ;
 $CDCE DEFB $03,$C0,$66,$66,$FD,$BF,$FD,$BF ;
 $CDD6 DEFB $66,$66,$03,$C0,$01,$80,$03,$C0 ;
 $CDDE DEFB $03,$C0,$01,$80                 ; }

; Sprite: Skull
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$CDE3-$CDE4;$CDF3-$CDF4{,1*4}(Skull) }
; TABLE#
@label=SpriteSkull
b$CDE2 DEFB $0F                             ; Height (in pixels).
 $CDE3 DEFB $02,$D0,$03,$50,$04,$A8,$0C,$08 ; {Graphic data.
 $CDEB DEFB $1C,$C8,$38,$44,$30,$84,$76,$32 ;
 $CDF3 DEFB $7B,$5A,$73,$1A,$79,$12,$38,$02 ;
 $CDFB DEFB $3F,$02,$1F,$FC,$07,$F0         ; }

; Sprite: Witch Flying Left 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CE02-$CE03;$CE12-$CE13;$CE22-$CE23{,2*4}(WitchFlyingLeft1)
; }
; TABLE#
@label=SpriteWitchFlyingLeft1
b$CE01 DEFB $16                             ; Height (in pixels).
 $CE02 DEFB $00,$0A,$07,$DA,$00,$BA,$3C,$D8 ; {Graphic data.
 $CE0A DEFB $07,$FC,$07,$FE,$07,$FE,$05,$FF ;
 $CE12 DEFB $1D,$FF,$3E,$F7,$E6,$F6,$C3,$78 ;
 $CE1A DEFB $09,$60,$0F,$C0,$0F,$C0,$2F,$20 ;
 $CE22 DEFB $3B,$40,$16,$E0,$0D,$F0,$03,$F8 ;
 $CE2A DEFB $07,$FC,$08,$1F                 ; }

; Sprite: Witch Flying Left 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CE2F-$CE30;$CE3F-$CE40;$CE4F-$CE50{,2*4}(WitchFlyingLeft2)
; }
; TABLE#
@label=SpriteWitchFlyingLeft2
b$CE2E DEFB $16                             ; Height (in pixels).
 $CE2F DEFB $00,$80,$07,$D5,$00,$BA,$3C,$D4 ; {Graphic data.
 $CE37 DEFB $07,$FC,$07,$FE,$07,$FE,$05,$FF ;
 $CE3F DEFB $0D,$FF,$1E,$F7,$76,$F6,$E3,$7C ;
 $CE47 DEFB $49,$60,$0F,$C0,$0F,$00,$2F,$20 ;
 $CE4F DEFB $3B,$40,$16,$E0,$0D,$F0,$03,$F8 ;
 $CE57 DEFB $07,$FC,$08,$1F                 ; }

; Sprite: Witch Flying Right 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CE5C-$CE5D;$CE6C-$CE6D;$CE7C-$CE7D{,2*4}(WitchFlyingRight1)
; }
; TABLE#
@label=SpriteWitchFlyingRight1
b$CE5B DEFB $16                             ; Height (in pixels).
 $CE5C DEFB $10,$00,$AB,$E0,$5D,$00,$2B,$3C ; {Graphic data.
 $CE64 DEFB $3F,$E0,$7F,$E0,$7F,$E0,$FF,$A0 ;
 $CE6C DEFB $FF,$B0,$EF,$78,$6F,$6E,$3E,$C7 ;
 $CE74 DEFB $06,$92,$03,$F0,$00,$F0,$04,$F4 ;
 $CE7C DEFB $02,$DC,$07,$68,$0F,$B0,$1F,$C0 ;
 $CE84 DEFB $3F,$E0,$F8,$10                 ; }

; Sprite: Witch Flying Right 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CE89-$CE8A;$CE99-$CE9A;$CEA9-$CEAA{,2*4}(WitchFlyingRight2)
; }
; TABLE#
@label=SpriteWitchFlyingRight2
b$CE88 DEFB $16                             ; Height (in pixels).
 $CE89 DEFB $50,$00,$AB,$E0,$5D,$00,$2B,$3C ; {Graphic data.
 $CE91 DEFB $3F,$E0,$7F,$E0,$7F,$E0,$FF,$A0 ;
 $CE99 DEFB $FF,$B8,$EF,$7C,$6F,$67,$3E,$C3 ;
 $CEA1 DEFB $06,$90,$03,$F0,$00,$F0,$04,$F4 ;
 $CEA9 DEFB $02,$DC,$07,$68,$0F,$B0,$1F,$C0 ;
 $CEB1 DEFB $3F,$E0,$F8,$10                 ; }

; Sprite: Ghoul Flying Left 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CEB6-$CEB7;$CEC6-$CEC7;$CED6-$CED7{,5*4}(GhoulFlyingLeft1)
; }
; TABLE#
@label=SpriteGhoulFlyingLeft1
b$CEB5 DEFB $13                             ; Height (in pixels).
 $CEB6 DEFB $0C,$CE,$1F,$FC,$3F,$F8,$2F,$B0 ; {Graphic data.
 $CEBE DEFB $17,$B0,$3B,$10,$3D,$B0,$7E,$F0 ;
 $CEC6 DEFB $FF,$70,$E3,$70,$1D,$70,$0A,$E0 ;
 $CECE DEFB $15,$C6,$24,$3C,$47,$FC,$4F,$F8 ;
 $CED6 DEFB $7F,$E0,$3F,$80,$1E,$00         ; }

; Sprite: Ghoul Flying Left 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CEDD-$CEDE;$CEED-$CEEE;$CEFD-$CEFE{,5*4}(GhoulFlyingLeft2)
; }
; TABLE#
@label=SpriteGhoulFlyingLeft2
b$CEDC DEFB $13                             ; Height (in pixels).
 $CEDD DEFB $03,$00,$1F,$FF,$0F,$FC,$37,$B0 ; {Graphic data.
 $CEE5 DEFB $3B,$B0,$7D,$10,$7E,$D0,$FF,$70 ;
 $CEED DEFB $E7,$B0,$0B,$B0,$0D,$70,$0C,$E0 ;
 $CEF5 DEFB $17,$C0,$26,$1F,$47,$FC,$4F,$F8 ;
 $CEFD DEFB $7F,$E0,$3F,$80,$1E,$00         ; }

; Sprite: Ghoul Flying Right 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CF04-$CF05;$CF14-$CF15;$CF24-$CF25{,5*4}(GhoulFlyingRight1)
; }
; TABLE#
@label=SpriteGhoulFlyingRight1
b$CF03 DEFB $13                             ; Height (in pixels).
 $CF04 DEFB $00,$C0,$FF,$F8,$3F,$F0,$0D,$EC ; {Graphic data.
 $CF0C DEFB $0D,$DC,$08,$BE,$0D,$7E,$0E,$FF ;
 $CF14 DEFB $0D,$E7,$0D,$D0,$0E,$B0,$07,$30 ;
 $CF1C DEFB $03,$E8,$F8,$64,$3F,$E2,$1F,$F2 ;
 $CF24 DEFB $07,$F3,$01,$FC,$00,$78         ; }

; Sprite: Ghoul Flying Right 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CF2B-$CF2C;$CF3B-$CF3C;$CF4B-$CF4C{,5*4}(GhoulFlyingRight2)
; }
; TABLE#
@label=SpriteGhoulFlyingRight2
b$CF2A DEFB $13                             ; Height (in pixels).
 $CF2B DEFB $73,$30,$3F,$F8,$1F,$FC,$0D,$F4 ; {Graphic data.
 $CF33 DEFB $0D,$E8,$08,$DC,$0D,$BC,$0F,$7E ;
 $CF3B DEFB $0E,$FF,$0E,$C7,$0E,$B8,$07,$50 ;
 $CF43 DEFB $63,$A8,$3C,$24,$3F,$E2,$1F,$F2 ;
 $CF4B DEFB $07,$FE,$01,$FC,$00,$78         ; }

; Sprite: Bat Flying Left 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CF52-$CF53;$CF62-$CF63;$CF72-$CF73{,5*4}(BatFlyingLeft1)
; }
; TABLE#
@label=SpriteBatFlyingLeft1
b$CF51 DEFB $13                             ; Height (in pixels).
 $CF52 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $CF5A DEFB $00,$00,$00,$00,$67,$F0,$FF,$FF ;
 $CF62 DEFB $BF,$FE,$DF,$80,$F7,$F0,$DC,$10 ;
 $CF6A DEFB $25,$F8,$0B,$E8,$0C,$18,$07,$F8 ;
 $CF72 DEFB $03,$F8,$00,$FC,$00,$1F         ; }

; Sprite: Bat Flying Left 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$CF79-$CF7A;$CF89-$CF8A{,3*4}(BatFlyingLeft2) }
; TABLE#
@label=SpriteBatFlyingLeft2
b$CF78 DEFB $0D                             ; Height (in pixels).
 $CF79 DEFB $00,$1F,$00,$FC,$03,$F8,$07,$04 ; {Graphic data.
 $CF81 DEFB $08,$38,$07,$90,$67,$E0,$FF,$9F ;
 $CF89 DEFB $BF,$FE,$DF,$F0,$F0,$00,$B0,$00 ;
 $CF91 DEFB $20,$00                         ; }

; Sprite: Bat Flying Right 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$CF94-$CF95;$CFA4-$CFA5{,3*4}(BatFlyingRight1) }
; TABLE#
@label=SpriteBatFlyingRight1
b$CF93 DEFB $0D                             ; Height (in pixels).
 $CF94 DEFB $F8,$00,$3F,$00,$1F,$C0,$2F,$E0 ; {Graphic data.
 $CF9C DEFB $1C,$10,$09,$E0,$07,$E6,$F9,$FF ;
 $CFA4 DEFB $7F,$FD,$0F,$FB,$00,$0F,$00,$0D ;
 $CFAC DEFB $00,$04                         ; }

; Sprite: Bat Flying Right 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$07,4,2,,2;$CFAF-$CFB0;$CFBF-$CFC0;$CFCF-$CFD0{,5*4}(BatFlyingRight2)
; }
; TABLE#
@label=SpriteBatFlyingRight2
b$CFAE DEFB $13                             ; Height (in pixels).
 $CFAF DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $CFB7 DEFB $00,$00,$00,$00,$0F,$E6,$FF,$FF ;
 $CFBF DEFB $7F,$FD,$01,$FB,$0F,$EF,$08,$6D ;
 $CFC7 DEFB $1F,$A4,$27,$D0,$18,$30,$1F,$E0 ;
 $CFCF DEFB $1F,$C0,$3F,$00,$F8,$00         ; }

; Sprite: Barrel
;
; #UDGTABLE
; {
; #UDGARRAY4,,4,4,,2;$CFD7-$CFDA;$CFF7-$CFFA;$D017-$D01A;$D037-$D03A@$D059-$D068(Barrel)
; }
; TABLE#
@label=SpriteBarrel
b$CFD5 DEFB $04                             ; Width (in bytes).
 $CFD6 DEFB $20                             ; Height (in pixels).
 $CFD7 DEFB $00,$0F,$F0,$00,$00,$70,$0E,$00 ; {Graphic data.
 $CFDF DEFB $01,$87,$B1,$80,$02,$7B,$DE,$40 ;
 $CFE7 DEFB $04,$FD,$EF,$A0,$0B,$7E,$F7,$D0 ;
 $CFEF DEFB $17,$BF,$7B,$E8,$17,$DF,$BD,$E8 ;
 $CFF7 DEFB $2F,$FF,$FF,$F4,$6E,$63,$8F,$B6 ;
 $CFFF DEFB $5E,$49,$27,$BA,$56,$49,$24,$2A ;
 $D007 DEFB $5E,$63,$8C,$BA,$DC,$49,$24,$FB ;
 $D00F DEFB $EE,$49,$24,$F7,$AF,$63,$8C,$B5 ;
 $D017 DEFB $B7,$FF,$FF,$ED,$BB,$DF,$F7,$DD ;
 $D01F DEFB $9D,$EF,$FB,$B9,$CE,$77,$FE,$73 ;
 $D027 DEFB $C7,$8F,$F1,$E3,$63,$F0,$0F,$C6 ;
 $D02F DEFB $70,$FF,$FF,$0E,$38,$1F,$F8,$1C ;
 $D037 DEFB $1E,$00,$40,$78,$0F,$C0,$23,$F0 ;
 $D03F DEFB $03,$FF,$FF,$C0,$00,$FF,$FF,$00 ;
 $D047 DEFB $00,$1F,$F8,$00,$00,$00,$00,$00 ;
 $D04F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Attributes: Barrel
@label=AttribBarrel
b$D057 DEFB $04                             ; Width (in bytes).
 $D058 DEFB $04                             ; Height (in bytes).
 $D059 DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; {Colour attribute data.
 $D061 DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; }

; Sprite: Acg Exit Door
;
; #UDGTABLE
; {
; #UDGARRAY8,,4,8,,2;$D06B-$D072;$D0AB-$D0B2;$D0EB-$D0F2;$D12B-$D132;$D16B-$D172@$D1AD-$D1D4(ACGExitDoor)
; }
; TABLE#
@label=SpriteACGExitDoor
b$D069 DEFB $08                             ; Width (in bytes).
 $D06A DEFB $28                             ; Height (in pixels).
 $D06B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $D073 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D07B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D083 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D08B DEFB $00,$3C,$00,$00,$00,$00,$3C,$00 ;
 $D093 DEFB $00,$42,$00,$00,$00,$00,$42,$00 ;
 $D09B DEFB $00,$BD,$00,$00,$00,$00,$BD,$00 ;
 $D0A3 DEFB $00,$EF,$00,$00,$00,$00,$F7,$00 ;
 $D0AB DEFB $FF,$EB,$FF,$FF,$7F,$FF,$F7,$FF ;
 $D0B3 DEFB $00,$6A,$1F,$FF,$7F,$F8,$56,$00 ;
 $D0BB DEFB $00,$5A,$3F,$FF,$7F,$FC,$52,$00 ;
 $D0C3 DEFB $00,$D6,$3F,$E3,$63,$FC,$6B,$00 ;
 $D0CB DEFB $00,$D6,$7F,$D1,$51,$FE,$6B,$00 ;
 $D0D3 DEFB $00,$B6,$7F,$D1,$51,$FE,$69,$00 ;
 $D0DB DEFB $00,$B6,$FF,$CD,$4D,$FF,$6D,$00 ;
 $D0E3 DEFB $01,$B6,$FF,$E3,$63,$FF,$6D,$80 ;
 $D0EB DEFB $01,$A4,$FF,$FF,$FF,$FF,$25,$80 ;
 $D0F3 DEFB $01,$2C,$FF,$36,$30,$FF,$34,$80 ;
 $D0FB DEFB $01,$6C,$FF,$34,$E6,$FF,$36,$80 ;
 $D103 DEFB $03,$6C,$FF,$04,$E4,$FF,$36,$C0 ;
 $D10B DEFB $03,$6C,$FF,$04,$E4,$FF,$36,$C0 ;
 $D113 DEFB $02,$6C,$FF,$34,$E7,$FF,$36,$40 ;
 $D11B DEFB $02,$6C,$FF,$34,$E7,$FF,$36,$40 ;
 $D123 DEFB $06,$CC,$7F,$8E,$30,$FE,$33,$60 ;
 $D12B DEFB $04,$CC,$7F,$FF,$FF,$FE,$33,$20 ;
 $D133 DEFB $07,$F4,$3F,$FF,$7F,$FC,$2F,$E0 ;
 $D13B DEFB $1F,$FC,$1F,$FF,$7F,$F8,$3F,$F8 ;
 $D143 DEFB $38,$0E,$0F,$FF,$7F,$F0,$70,$1C ;
 $D14B DEFB $67,$F3,$03,$FF,$7F,$C0,$CF,$E6 ;
 $D153 DEFB $5F,$FD,$00,$7F,$FE,$00,$BF,$FA ;
 $D15B DEFB $3F,$FE,$00,$07,$60,$00,$7F,$FC ;
 $D163 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D16B DEFB $7F,$FF,$FF,$FF,$FF,$FF,$FF,$FE ;
 $D173 DEFB $7F,$FF,$FF,$FF,$FF,$FF,$FF,$FE ;
 $D17B DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $D183 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D18B DEFB $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ;
 $D193 DEFB $55,$55,$55,$55,$55,$55,$55,$56 ;
 $D19B DEFB $2A,$AA,$AA,$AA,$AA,$AA,$AA,$AC ;
 $D1A3 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Attributes: Acg Exit Door
@label=AttribACGExitDoor
b$D1AB DEFB $08                             ; Width (in bytes).
 $D1AC DEFB $05                             ; Height (in bytes).
 $D1AD DEFB $FF,$47,$43,$43,$43,$43,$47,$FF ; {Colour attribute data.
 $D1B5 DEFB $FF,$47,$43,$43,$43,$43,$47,$FF ;
 $D1BD DEFB $47,$47,$43,$43,$43,$43,$47,$47 ;
 $D1C5 DEFB $47,$47,$43,$43,$43,$43,$47,$47 ;
 $D1CD DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; }

; Sprite: ACG Key Left
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$D1D6-$D1D7;$D1E6-$D1E7{,5*4}(ACGKeyLeft) }
; TABLE#
@label=SpriteACGKeyLeft
b$D1D5 DEFB $0B                             ; Height (in pixels).
 $D1D6 DEFB $0C,$CE,$0C,$DF,$0F,$D8,$0F,$D8 ; {Graphic data.
 $D1DE DEFB $0C,$D8,$0C,$DF,$07,$FE,$3F,$FF ;
 $D1E6 DEFB $5F,$FF,$40,$00,$3F,$FF         ; }

; Sprite: ACG Key Middle
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$46,4,2,,2;$D1ED-$D1EE;$D1FD-$D1FE{,1*4}(ACGKeyMiddle) }
; TABLE#
@label=SpriteACGKeyMiddle
b$D1EC DEFB $0F                             ; Height (in pixels).
 $D1ED DEFB $3C,$00,$7E,$00,$66,$00,$6E,$01 ; {Graphic data.
 $D1F5 DEFB $60,$01,$7E,$03,$3C,$0F,$FF,$F0 ;
 $D1FD DEFB $FF,$FF,$00,$0F,$FF,$F0,$00,$0F ;
 $D205 DEFB $00,$03,$00,$01,$00,$01         ; }

; Sprite: ACG Key Right
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; {
; #UDGARRAY2,$46,4,2,,2;$D20C-$D20D;$D21C-$D21D;$D22C-$D22D{,5*4}(ACGKeyRight)
; }
; TABLE#
@label=SpriteACGKeyRight
b$D20B DEFB $13                             ; Height (in pixels).
 $D20C DEFB $1C,$00,$7F,$00,$7F,$00,$C3,$80 ; {Graphic data.
 $D214 DEFB $C3,$C0,$81,$DC,$81,$66,$1B,$42 ;
 $D21C DEFB $9F,$73,$C7,$B1,$C7,$B1,$9F,$73 ;
 $D224 DEFB $1B,$42,$81,$66,$81,$BC,$C3,$80 ;
 $D22C DEFB $F8,$80,$7F,$00,$1C,$00         ; }

; Sprite: Mushroom
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$D233-$D234;$D243-$D244(Mushroom) }
; TABLE#
@label=SpriteMushroom
b$D232 DEFB $10                             ; Height (in pixels).
 $D233 DEFB $00,$70,$00,$FC,$00,$7E,$00,$7E ; {Graphic data.
 $D23B DEFB $00,$FC,$00,$FC,$7E,$3C,$CF,$C8 ;
 $D243 DEFB $6F,$F0,$FF,$3C,$7F,$3E,$77,$F3 ;
 $D24B DEFB $33,$F3,$1F,$9E,$0F,$FC,$03,$F0 ; }

; Sprite: Picture 2
;
; #UDGTABLE
; { #UDGARRAY4,,4,4,,2;$D255-$D258;$D275-$D278@$D297-$D29E(Picture2) }
; TABLE#
@label=SpritePicture2
b$D253 DEFB $04                             ; Width (in bytes).
 $D254 DEFB $10                             ; Height (in pixels).
 $D255 DEFB $01,$FF,$FF,$80,$01,$FF,$FF,$80 ; {Graphic data.
 $D25D DEFB $01,$80,$01,$80,$01,$87,$E1,$80 ;
 $D265 DEFB $03,$8D,$31,$C0,$03,$18,$98,$C0 ;
 $D26D DEFB $03,$13,$C8,$C0,$03,$16,$68,$C0 ;
 $D275 DEFB $07,$1F,$F8,$E0,$06,$19,$98,$60 ;
 $D27D DEFB $06,$19,$98,$60,$06,$0F,$F0,$60 ;
 $D285 DEFB $0E,$00,$00,$70,$0C,$00,$00,$30 ;
 $D28D DEFB $0F,$FF,$FF,$F0,$0F,$FF,$FF,$F0 ; }

; Attributes: Picture 2
@label=AttribPicture2
b$D295 DEFB $04                             ; Width (in bytes).
 $D296 DEFB $02                             ; Height (in bytes).
 $D297 DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; Colour attribute data.

; Sprite: Spanner
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$D2A0-$D2A1;$D2B0-$D2B1(Spanner) }
; TABLE#
@label=SpriteSpanner
b$D29F DEFB $10                             ; Height (in pixels).
 $D2A0 DEFB $20,$00,$70,$00,$78,$00,$3C,$00 ; {Graphic data.
 $D2A8 DEFB $1E,$00,$0F,$00,$07,$80,$03,$C0 ;
 $D2B0 DEFB $01,$E0,$00,$F8,$00,$7E,$00,$7F ;
 $D2B8 DEFB $00,$7F,$00,$63,$00,$63,$00,$22 ; }

; Sprite: Ghoul 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$D2C1-$D2C2;$D2D1-$D2D2{,5*4}(Ghoul1) }
; TABLE#
@label=SpriteGhoul1
b$D2C0 DEFB $0B                             ; Height (in pixels).
 $D2C1 DEFB $09,$10,$DD,$B9,$FF,$FF,$7F,$FF ; {Graphic data.
 $D2C9 DEFB $3F,$FE,$1C,$9C,$0A,$2C,$0B,$6C ;
 $D2D1 DEFB $0C,$98,$07,$F0,$01,$E0         ; }

; Sprite: Ghoul 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$07,4,2,,2;$D2D8-$D2D9;$D2E8-$D2E9{,5*4}(Ghoul2) }
; TABLE#
@label=SpriteGhoul2
b$D2D7 DEFB $0B                             ; Height (in pixels).
 $D2D8 DEFB $00,$00,$00,$00,$01,$01,$D7,$D7 ; {Graphic data.
 $D2E0 DEFB $FF,$FF,$F9,$3E,$74,$5C,$36,$D8 ;
 $D2E8 DEFB $19,$30,$0F,$E0,$03,$C0         ; }

; Sprite: Skeleton
;
; #UDGTABLE
; {
; #UDGARRAY5,$07,4,5,,2;$D2F0-$D2F4;$D318-$D31C;$D340-$D344;$D368-$D36C;$D390-$D394(Skeleton)
; }
; TABLE#
@label=SpriteSkeleton
b$D2EE DEFB $05                             ; Width (in bytes).
 $D2EF DEFB $28                             ; Height (in pixels).
 $D2F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Graphic data.
 $D2F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D300 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D308 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D310 DEFB $00,$00,$00,$00,$00,$60,$00,$00 ;
 $D318 DEFB $00,$E0,$78,$00,$00,$00,$FC,$EC ;
 $D320 DEFB $40,$00,$00,$6E,$C6,$70,$00,$00 ;
 $D328 DEFB $C1,$C3,$60,$00,$00,$C6,$A1,$C0 ;
 $D330 DEFB $00,$00,$BF,$30,$80,$00,$00,$7C ;
 $D338 DEFB $1C,$00,$00,$00,$6B,$9F,$00,$00 ;
 $D340 DEFB $FF,$50,$4E,$FF,$00,$00,$24,$E1 ;
 $D348 DEFB $00,$00,$00,$28,$10,$00,$00,$00 ;
 $D350 DEFB $12,$60,$00,$00,$00,$14,$30,$00 ;
 $D358 DEFB $00,$00,$14,$18,$00,$00,$00,$14 ;
 $D360 DEFB $46,$00,$00,$00,$0C,$99,$00,$00 ;
 $D368 DEFB $00,$02,$AE,$E0,$00,$00,$06,$7B ;
 $D370 DEFB $60,$00,$50,$0C,$E7,$30,$00,$27 ;
 $D378 DEFB $18,$87,$18,$50,$17,$78,$FF,$0B ;
 $D380 DEFB $98,$07,$00,$7E,$03,$B0,$05,$00 ;
 $D388 DEFB $3C,$03,$80,$05,$00,$00,$00,$E0 ;
 $D390 DEFB $0B,$00,$00,$00,$40,$14,$00,$00 ;
 $D398 DEFB $00,$F0,$14,$00,$00,$00,$28,$68 ;
 $D3A0 DEFB $00,$00,$00,$2E,$F0,$00,$00,$00 ;
 $D3A8 DEFB $1F,$B8,$00,$00,$00,$1B,$F8,$00 ;
 $D3B0 DEFB $00,$00,$1F,$70,$00,$00,$00,$0E ; }

; Attributes: Skeleton
@label=AttribSkeleton
b$D3B8 DEFB $05                             ; Width (in bytes).
 $D3B9 DEFB $05                             ; Height (in bytes).
 $D3BA DEFB $FF,$FF,$FF,$FF,$FF,$FF,$47,$47 ; {Colour attribute data.
 $D3C2 DEFB $47,$FF,$FF,$47,$47,$FF,$FF,$47 ;
 $D3CA DEFB $47,$47,$47,$47,$47,$FF,$FF,$FF ;
 $D3D2 DEFB $47                             ; }

; Sprite: Hunchback 1
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$D3D4-$D3D5;$D3E4-$D3E5;$D3F4-$D3F5(Hunchback1) }
; TABLE#
@label=SpriteHunchback1
b$D3D3 DEFB $18                             ; Height (in pixels).
 $D3D4 DEFB $00,$3C,$3C,$38,$1C,$00,$00,$38 ; {Graphic data.
 $D3DC DEFB $0E,$38,$0E,$38,$0F,$38,$67,$F8 ;
 $D3E4 DEFB $03,$F8,$60,$00,$77,$F8,$37,$38 ;
 $D3EC DEFB $37,$78,$43,$9C,$1D,$8C,$06,$C2 ;
 $D3F4 DEFB $7B,$62,$7F,$72,$53,$62,$73,$44 ;
 $D3FC DEFB $3E,$CC,$1E,$F8,$05,$F0,$03,$E0 ; }

; Sprite: Hunchback 2
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$D405-$D406;$D415-$D416;$D425-$D426(Hunchback2) }
; TABLE#
@label=SpriteHunchback2
b$D404 DEFB $18                             ; Height (in pixels).
 $D405 DEFB $0F,$3C,$07,$38,$00,$00,$07,$38 ; {Graphic data.
 $D40D DEFB $07,$38,$07,$38,$07,$38,$37,$F8 ;
 $D415 DEFB $07,$F8,$30,$00,$27,$F8,$26,$78 ;
 $D41D DEFB $26,$F8,$03,$9C,$1D,$8C,$06,$CC ;
 $D425 DEFB $7B,$66,$7F,$66,$53,$66,$73,$4C ;
 $D42D DEFB $3E,$CC,$1E,$F8,$05,$F0,$03,$E0 ; }

; Sprite: Hunchback 3
;
; This sprite is 2 bytes wide.
; .
; #UDGTABLE
; { #UDGARRAY2,$42,4,2,,2;$D436-$D437;$D446-$D447;$D456-$D457(Hunchback3) }
; TABLE#
@label=SpriteHunchback3
b$D435 DEFB $18                             ; Height (in pixels).
 $D436 DEFB $0F,$00,$07,$3C,$00,$38,$07,$00 ; {Graphic data.
 $D43E DEFB $07,$38,$07,$3C,$07,$3C,$67,$F8 ;
 $D446 DEFB $07,$F8,$60,$00,$77,$F8,$37,$38 ;
 $D44E DEFB $37,$38,$43,$9C,$1D,$8C,$06,$C2 ;
 $D456 DEFB $7B,$62,$7F,$72,$53,$62,$73,$44 ;
 $D45E DEFB $3E,$CC,$1E,$F8,$05,$F0,$03,$E0 ; }

; Sprite: Barrels
;
; #UDGTABLE
; {
; #UDGARRAY5,,4,5,,2;$D468-$D46C;$D490-$D494;$D4B8-$D4BC;$D4E0-$D4E4@$D4F1-$D504{,5*4}(Barrels)
; }
; TABLE#
@label=SpriteBarrels
b$D466 DEFB $05                             ; Width (in bytes).
 $D467 DEFB $1B                             ; Height (in pixels).
 $D468 DEFB $03,$C0,$3C,$03,$C0,$0F,$F0,$FF ; {Graphic data.
 $D470 DEFB $0F,$F0,$1F,$F9,$FF,$9F,$F8,$1F ;
 $D478 DEFB $F9,$FF,$9F,$F8,$2F,$F6,$FF,$6F ;
 $D480 DEFB $F4,$43,$C0,$3C,$03,$C4,$30,$0F ;
 $D488 DEFB $00,$F0,$0C,$2C,$3F,$C3,$FC,$34 ;
 $D490 DEFB $23,$7F,$E7,$FE,$C4,$30,$7F,$E7 ;
 $D498 DEFB $FE,$0C,$2C,$BF,$DB,$FC,$34,$13 ;
 $D4A0 DEFB $8F,$00,$F1,$C8,$10,$C0,$3C,$03 ;
 $D4A8 DEFB $08,$0C,$B0,$FF,$0D,$30,$03,$8D ;
 $D4B0 DEFB $FF,$B1,$C0,$00,$C1,$FF,$83,$00 ;
 $D4B8 DEFB $00,$D2,$FF,$4B,$00,$00,$4E,$3C ;
 $D4C0 DEFB $72,$00,$00,$43,$00,$C2,$00,$00 ;
 $D4C8 DEFB $32,$C3,$4C,$00,$00,$0E,$3C,$70 ;
 $D4D0 DEFB $00,$00,$03,$00,$C0,$00,$00,$02 ;
 $D4D8 DEFB $C3,$40,$00,$00,$01,$3C,$80,$00 ;
 $D4E0 DEFB $00,$01,$00,$80,$00,$00,$00,$C3 ;
 $D4E8 DEFB $00,$00,$00,$00,$3C,$00,$00     ; }

; Attributes: Barrels
@label=AttribBarrels
b$D4EF DEFB $05                             ; Width (in bytes).
 $D4F0 DEFB $04                             ; Height (in bytes).
 $D4F1 DEFB $43,$43,$43,$43,$43,$43,$43,$43 ; {Colour attribute data.
 $D4F9 DEFB $43,$43,$43,$43,$43,$43,$43,$43 ;
 $D501 DEFB $43,$43,$43,$43                 ; }

i$D505

; Runtime Sprite Location Table
;
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A4BE. }
; { $01         | Screen                | Screen number. }
; { $02         | Flags                 | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Colour Attribute      | Colour attribute. }
; { $06         | Flags2                | ??? }
; { $07         | Flags3                | ??? }
; TABLE#
@label=RuntimePlayerSpriteData
b$EA90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Player.
@label=RuntimeUnknownSpriteData1
 $EA98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeUnknownSpriteData2
 $EAA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeACGKeyLeftSpriteData
 $EAA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; ACG Key Left, Screen $00
                                            ; ($58,$58), Bright Yellow\Black.
@label=RuntimeACGKeyMiddleSpriteData
 $EAB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; ACG Key Middle, Screen $00
                                            ; ($58,$58), Bright Yellow\Black.
@label=RuntimeACGKeyRightSpriteData
 $EAB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; ACG Key Right, Screen $00
                                            ; ($58,$58), Bright Yellow\Black.
@label=RuntimeGreenKeySpriteData
 $EAC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Key, Screen $05 ($60,$70), Bright
                                            ; Green\Black.
@label=RuntimeRedKeySpriteData
 $EAC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Key, Screen $17 ($40,$80), Bright
                                            ; Red\Black.
@label=RuntimeCyanKeySpriteData
 $EAD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Key, Screen $53 ($58,$58), Bright
                                            ; Cyan\Black.
@label=RuntimeYellowKeySpriteData
 $EAD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Key, Screen $66 ($87,$30), Bright
                                            ; Yellow\Black.
 $EAE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Leaf, Screen $09 ($40,$40),
                                            ; Bright Red\Black.
 $EAE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $EAF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $EAF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $EB00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
 $EB08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cross, Screen $05 ($70,$40),
                                            ; Bright Yellow\Black.
 $EB10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Spanner, Screen $30 ($70,$40),
                                            ; Bright Cyan\Black.
 $EB18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Medicine Bottle, Screen $3B
                                            ; ($60,$60), Bright Green\Black.
 $EB20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Gobstopper, Screen $48 ($70,$70),
                                            ; Bright Cyan\Black.
 $EB28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Broken, Screen $64 ($80,$80),
                                            ; Bright Yellow\Black.
 $EB30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rope, Screen $6B ($40,$40),
                                            ; Bright Cyan\Black.
 $EB38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Arm, Screen $13 ($50,$50), Bright
                                            ; Green\Black.
 $EB40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Amulet, Screen $84 ($40,$60),
                                            ; Bright Magenta\Black.
 $EB48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Money Bag, Screen $1F ($70,$70),
                                            ; Bright Red\Black.
 $EB50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Skeleton Head, Screen $49
                                            ; ($40,$50), Bright White\Black.
 $EB58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $27 ($67,$57), Bright
                                            ; Magenta\Black.
 $EB60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $7F ($40,$40), Bright
                                            ; Yellow\Black.
 $EB68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $1E ($57,$50), Bright
                                            ; Yellow\Black.
 $EB70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $0C ($60,$60), Bright
                                            ; Magenta\Black.
 $EB78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $67 ($40,$57), Bright
                                            ; Red\Black.
 $EB80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $41 ($67,$57), Bright
                                            ; Red\Black.
 $EB88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $75 ($40,$30),
                                            ; Bright Green\Black.
 $EB90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $83 ($40,$30),
                                            ; Bright Yellow\Black.
 $EB98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $0C ($70,$60),
                                            ; Bright Red\Black.
 $EBA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $68 ($40,$57),
                                            ; Bright Magenta\Black.
 $EBA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $45 ($46,$57),
                                            ; Bright Cyan\Black.
 $EBB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $46 ($7B,$43),
                                            ; Bright Cyan\Black.
 $EBB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $86 ($60,$47), Bright
                                            ; Magenta\Black.
 $EBC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $6E ($77,$60), Bright
                                            ; Red\Black.
 $EBC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $7D ($67,$57), Bright
                                            ; Magenta\Black.
 $EBD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $6A ($67,$30), Bright
                                            ; Red\Black.
 $EBD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $3E ($7B,$43), Bright
                                            ; Red\Black.
 $EBE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $35 ($67,$57), Bright
                                            ; Magenta\Black.
 $EBE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $2B ($80,$40),
                                            ; Bright Yellow\Black.
 $EBF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $8A ($67,$57),
                                            ; Bright Cyan\Black.
 $EBF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $09 ($90,$80),
                                            ; Bright Green\Black.
 $EC00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $70 ($90,$80),
                                            ; Bright Magenta\Black.
 $EC08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $74 ($87,$57),
                                            ; Bright Red\Black.
 $EC10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $33 ($67,$57),
                                            ; Bright Cyan\Black.
 $EC18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $78
                                            ; ($37,$37), Bright White\Black.
 $EC20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $8A
                                            ; ($7F,$7F), Bright White\Black.
 $EC28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $0B
                                            ; ($67,$57), Bright Yellow\Black.
 $EC30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $65
                                            ; ($87,$57), Bright Yellow\Black.
 $EC38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $53
                                            ; ($7B,$43), Bright White\Black.
 $EC40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $4C
                                            ; ($7B,$6B), Bright Yellow\Black.
 $EC48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $7B ($60,$50),
                                            ; Bright Cyan\Black.
 $EC50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $87 ($67,$57),
                                            ; Bright Cyan\Black.
 $EC58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $0D ($67,$30),
                                            ; Bright Magenta\Black.
 $EC60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $66 ($87,$43),
                                            ; Bright Magenta\Black.
 $EC68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $53 ($7B,$6B),
                                            ; Bright Red\Black.
 $EC70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $4F ($67,$57),
                                            ; Bright White\Black.
 $EC78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $7E ($80,$37),
                                            ; Bright Green\Black.
 $EC80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $8C ($67,$57),
                                            ; Bright Green\Black.
 $EC88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $70 ($90,$30),
                                            ; Bright Green\Black.
 $EC90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $66 ($87,$6B),
                                            ; Bright Green\Black.
 $EC98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $3C ($7B,$43),
                                            ; Bright Red\Black.
 $ECA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $39 ($7B,$43),
                                            ; Bright Red\Black.
 $ECA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $7E ($80,$87),
                                            ; Bright White\Black.
 $ECB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $24 ($70,$60),
                                            ; Bright White\Black.
 $ECB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $70 ($90,$57),
                                            ; Bright White\Black.
 $ECC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $12 ($40,$57),
                                            ; Bright White\Black.
 $ECC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $5E ($67,$57),
                                            ; Bright White\Black.
 $ECD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $1D ($67,$30),
                                            ; Bright White\Black.
 $ECD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $17 ($40,$40), Bright
                                            ; Red\Black.
 $ECE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $73 ($67,$30), Bright
                                            ; Red\Black.
 $ECE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $07 ($67,$57), Bright
                                            ; Magenta\Black.
 $ECF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Can, Screen $02 ($67,$57), Bright
                                            ; Magenta\Black.
 $ECF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $0F ($67,$57),
                                            ; Bright Magenta\Black.
 $ED00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $3A ($48,$30),
                                            ; Bright Magenta\Black.
 $ED08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $41 ($67,$80),
                                            ; Bright Red\Black.
 $ED10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Candy Bar, Screen $85 ($7B,$43),
                                            ; Bright Red\Black.
 $ED18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $6C ($47,$57), Bright
                                            ; Magenta\Black.
 $ED20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $3A ($48,$57), Bright
                                            ; Magenta\Black.
 $ED28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $69 ($40,$30),
                                            ; Magenta\Black.
 $ED30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ham, Screen $80 ($40,$30),
                                            ; Magenta\Black.
 $ED38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $04 ($67,$57),
                                            ; Bright Red\Black.
 $ED40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $4B ($88,$30),
                                            ; Bright Red\Black.
 $ED48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $11 ($67,$57),
                                            ; Bright Yellow\Black.
 $ED50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Lollipop, Screen $80 ($40,$57),
                                            ; Bright Green\Black.
 $ED58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $69
                                            ; ($67,$30), Bright Yellow\Black.
 $ED60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $35
                                            ; ($90,$57), Bright Yellow\Black.
 $ED68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $69
                                            ; ($90,$30), Bright Yellow\Black.
 $ED70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Ice Cream Cone, Screen $80
                                            ; ($80,$80), Bright Green\Black.
 $ED78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $57 ($40,$57),
                                            ; Bright Yellow\Black.
 $ED80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $35 ($40,$57),
                                            ; Bright Yellow\Black.
 $ED88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $25 ($7B,$6B),
                                            ; Bright Magenta\Black.
 $ED90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bowl, Screen $1B ($67,$57),
                                            ; Bright Green\Black.
 $ED98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $58 ($40,$57),
                                            ; Bright Green\Black.
 $EDA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $4E ($40,$67),
                                            ; Bright Red\Black.
 $EDA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $37 ($67,$57),
                                            ; Bright Yellow\Black.
 $EDB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Apple, Screen $85 ($7B,$6B),
                                            ; Bright Green\Black.
 $EDB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $5B ($67,$57),
                                            ; Bright White\Black.
 $EDC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $4E ($67,$40),
                                            ; Bright White\Black.
 $EDC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $49 ($67,$57),
                                            ; Bright White\Black.
 $EDD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Bottle, Screen $28 ($67,$57),
                                            ; Bright White\Black.
 $EDD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $50 ($40,$57),
                                            ; Bright Red\Black.
 $EDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $43 ($54,$6B),
                                            ; Bright Red\Black.
 $EDE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $40 ($7B,$43),
                                            ; Bright Red\Black.
 $EDF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $8F ($8F,$57),
                                            ; Bright Red\Black.
 $EDF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $8F ($7B,$43),
                                            ; Bright Red\Black.
 $EE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $8F ($7B,$6B),
                                            ; Bright Red\Black.
 $EE08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $45 ($67,$80),
                                            ; Bright Red\Black.
 $EE10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $38 ($54,$6B),
                                            ; Bright Red\Black.
 $EE18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $74 ($40,$30),
                                            ; Bright Red\Black.
 $EE20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $74 ($88,$30),
                                            ; Bright Red\Black.
 $EE28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $74 ($88,$78),
                                            ; Bright Red\Black.
 $EE30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $74 ($40,$80),
                                            ; Bright Red\Black.
 $EE38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $54 ($40,$57),
                                            ; Bright Red\Black.
 $EE40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $3B ($7B,$43),
                                            ; Bright Red\Black.
 $EE48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $3B ($7B,$6B),
                                            ; Bright Red\Black.
 $EE50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mushroom, Screen $53 ($40,$80),
                                            ; Bright Red\Black.
 $EE58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeNasty1SpriteData
 $EE60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeNasty2SpriteData
 $EE68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeNasty3SpriteData
 $EE70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeNasty4SpriteData
 $EE78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeNasty5SpriteData
 $EE80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeNasty6SpriteData
 $EE88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($00,$00).
@label=RuntimeMummySpriteData
 $EE90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Mummy, Screen $17 ($50,$50),
                                            ; Bright White\Black.
 $EE98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($68,$68).
@label=RuntimeDraculaSpriteData
 $EEA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Dracula, Screen $6D ($50,$50),
                                            ; Bright Green\Black.
 $EEA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($72,$72).
@label=RuntimeDevilSpriteData
 $EEB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Devil, Screen $43 ($50,$50),
                                            ; Bright Magenta\Black.
 $EEB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($72,$72).
@label=RuntimeFrankensteinSpriteData
 $EEC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Frankenstein, Screen $55
                                            ; ($50,$50), Bright Red\Black.
 $EEC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($60,$50).
@label=RuntimeHunchbackSpriteData
 $EED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Hunchback, Screen $56 ($38,$58),
                                            ; Bright Red\Black.
 $EED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Unknown, Screen $00 ($60,$50).

; Runtime Background Item Location Table
;
; Note that connected doors (i.e the door between two screens) or secret
; openings, are consecutive in the location table.
; .
; #TABLE(default)
; { =h Offset   | =h Field              | =h Description }
; { $00         | Graphic Index         | Graphic index in #R$A600. }
; { $01         | Screen                | Screen number. }
; { $02         | Door Flags            | ??? }
; { $03         | X                     | X coordinate (left). }
; { $04         | Y                     | Y coordinate (bottom). }
; { $05         | Flags                 | bit0-2: }
; {             |                       | bit3: Set if door shut. }
; {             |                       | bit4:  }
; {             |                       | bit5-7: Jump table index in #R$9970
; and #R$9985. }
; { $06         | Door Timing           | ??? }
; { $07         | Door Flags            | ??? }
; TABLE#
@label=RuntimeBackgroundItemLocationTable
b$EEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $07
                                            ; ($1F,$50).
 $EEE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $00
                                            ; ($B7,$50).
 $EEF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $19
                                            ; ($6F,$A0).
 $EEF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $00
                                            ; ($6F,$08).
 $EF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $01 ($B7,$50).
 $EF08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $00 ($1F,$50).
 $EF10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $02
                                            ; ($6F,$A0).
 $EF18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $01
                                            ; ($6F,$08).
 $EF20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $03
                                            ; ($6F,$A0).
 $EF28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $02
                                            ; ($6F,$08).
 $EF30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $04
                                            ; ($1F,$50).
 $EF38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $03
                                            ; ($B7,$50).
 $EF40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $19
                                            ; ($6F,$08).
 $EF48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $04
                                            ; ($6F,$80).
 $EF50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $05
                                            ; ($1F,$50).
 $EF58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $04
                                            ; ($B7,$50).
 $EF60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $06
                                            ; ($6F,$08).
 $EF68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $05
                                            ; ($6F,$A0).
 $EF70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; BigDooor Frame, Screen $1A
                                            ; ($B6,$48).
 $EF78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $06
                                            ; ($3F,$50).
 $EF80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $08 ($1F,$50).
 $EF88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $06 ($97,$50).
 $EF90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $07
                                            ; ($6F,$08).
 $EF98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $06
                                            ; ($6F,$A0).
 $EFA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $09
                                            ; ($1F,$50).
 $EFA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $08
                                            ; ($B7,$50).
 $EFB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0A
                                            ; ($6F,$A0).
 $EFB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $09
                                            ; ($6F,$08).
 $EFC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0B
                                            ; ($6F,$A0).
 $EFC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0A
                                            ; ($6F,$08).
 $EFD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0C
                                            ; ($6F,$A0).
 $EFD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0B
                                            ; ($6F,$08).
 $EFE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0D
                                            ; ($6F,$A0).
 $EFE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0C
                                            ; ($6F,$08).
 $EFF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0E
                                            ; ($B7,$50).
 $EFF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0D
                                            ; ($1F,$50).
 $F000 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0F
                                            ; ($B7,$50).
 $F008 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0E
                                            ; ($1F,$50).
 $F010 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $10
                                            ; ($B7,$50).
 $F018 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $0F
                                            ; ($1F,$50).
 $F020 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $11 ($B7,$50).
 $F028 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $10 ($1F,$50).
 $F030 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $12
                                            ; ($B7,$50).
 $F038 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $11
                                            ; ($1F,$50).
 $F040 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $13
                                            ; ($B7,$50).
 $F048 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $12
                                            ; ($1F,$50).
 $F050 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $14
                                            ; ($6F,$08).
 $F058 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $13
                                            ; ($6F,$A0).
 $F060 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $15
                                            ; ($6F,$08).
 $F068 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $14
                                            ; ($6F,$A0).
 $F070 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $16
                                            ; ($6F,$08).
 $F078 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $15
                                            ; ($6F,$A0).
 $F080 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $17 ($6F,$08).
 $F088 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $16 ($6F,$A0).
 $F090 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $18 ($1F,$50).
 $F098 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $17 ($B7,$50).
 $F0A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $18
                                            ; ($B7,$50).
 $F0A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $02
                                            ; ($3F,$50).
 $F0B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1A
                                            ; ($28,$50).
 $F0B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1B
                                            ; ($B7,$50).
 $F0C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1B
                                            ; ($6F,$A0).
 $F0C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; BigDooor Frame, Screen $1C
                                            ; ($77,$08).
 $F0D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1C
                                            ; ($6F,$98).
 $F0D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $1D
                                            ; ($6F,$18).
 $F0E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1E
                                            ; ($1F,$50).
 $F0E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1F
                                            ; ($B7,$50).
 $F0F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1F
                                            ; ($6F,$08).
 $F0F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $20
                                            ; ($6F,$A0).
 $F100 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $20
                                            ; ($6F,$08).
 $F108 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $21
                                            ; ($6F,$A0).
 $F110 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $21
                                            ; ($B7,$50).
 $F118 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $22
                                            ; ($1F,$50).
 $F120 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $22
                                            ; ($B7,$50).
 $F128 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $23
                                            ; ($1F,$50).
 $F130 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $23
                                            ; ($6F,$A0).
 $F138 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $24
                                            ; ($6F,$08).
 $F140 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $24
                                            ; ($6F,$A0).
 $F148 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $25
                                            ; ($6F,$08).
 $F150 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $25 ($1F,$50).
 $F158 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $1E ($B7,$50).
 $F160 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $24
                                            ; ($3F,$50).
 $F168 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; BigDooor Frame, Screen $26
                                            ; ($B6,$48).
 $F170 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $02
                                            ; ($97,$50).
 $F178 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $26
                                            ; ($28,$50).
 $F180 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $27
                                            ; ($B7,$50).
 $F188 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $28
                                            ; ($1F,$50).
 $F190 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $28 ($B7,$50).
 $F198 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $29 ($1F,$50).
 $F1A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $29
                                            ; ($6F,$08).
 $F1A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2A
                                            ; ($6F,$A0).
 $F1B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2A
                                            ; ($6F,$08).
 $F1B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2B
                                            ; ($6F,$A0).
 $F1C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2B
                                            ; ($1F,$50).
 $F1C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2C
                                            ; ($B7,$50).
 $F1D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2C
                                            ; ($1F,$50).
 $F1D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2D
                                            ; ($B7,$50).
 $F1E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $2D ($6F,$A0).
 $F1E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $2E ($6F,$08).
 $F1F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2E
                                            ; ($6F,$A0).
 $F1F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $27
                                            ; ($6F,$08).
 $F200 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $27
                                            ; ($1F,$50).
 $F208 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; BigDooor Frame, Screen $2F
                                            ; ($B6,$48).
 $F210 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $20 ($97,$50).
 $F218 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $2F ($28,$50).
 $F220 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $30
                                            ; ($A7,$50).
 $F228 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $31
                                            ; ($27,$50).
 $F230 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $31
                                            ; ($AF,$50).
 $F238 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $32
                                            ; ($27,$50).
 $F240 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $32
                                            ; ($AF,$50).
 $F248 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $33
                                            ; ($2F,$50).
 $F250 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $33
                                            ; ($A7,$50).
 $F258 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $34
                                            ; ($27,$50).
 $F260 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $34
                                            ; ($AF,$50).
 $F268 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $35
                                            ; ($2F,$50).
 $F270 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $33
                                            ; ($6F,$90).
 $F278 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $36
                                            ; ($6F,$10).
 $F280 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $36
                                            ; ($6F,$98).
 $F288 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $37
                                            ; ($6F,$10).
 $F290 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $37
                                            ; ($6F,$98).
 $F298 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $38
                                            ; ($6F,$18).
 $F2A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $38
                                            ; ($A7,$50).
 $F2A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $39
                                            ; ($2F,$50).
 $F2B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Cave Door, Screen
                                            ; $38 ($6F,$90).
 $F2B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Cave Door, Screen
                                            ; $3A ($6F,$18).
 $F2C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $39
                                            ; ($6F,$90).
 $F2C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3B
                                            ; ($6F,$18).
 $F2D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3A
                                            ; ($A7,$50).
 $F2D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3B
                                            ; ($2F,$50).
 $F2E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Cave Door, Screen
                                            ; $3B ($A7,$50).
 $F2E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Cave Door, Screen
                                            ; $3C ($2F,$50).
 $F2F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3B
                                            ; ($6F,$90).
 $F2F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3D
                                            ; ($6F,$18).
 $F300 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3C
                                            ; ($6F,$90).
 $F308 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3E
                                            ; ($6F,$18).
 $F310 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3D
                                            ; ($A7,$50).
 $F318 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3E
                                            ; ($2F,$50).
 $F320 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Cave Door, Screen $3D
                                            ; ($6F,$90).
 $F328 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Cave Door, Screen $3F
                                            ; ($6F,$10).
 $F330 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3F
                                            ; ($6F,$98).
 $F338 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $40
                                            ; ($6F,$18).
 $F340 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $40
                                            ; ($6F,$90).
 $F348 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $41
                                            ; ($6F,$18).
 $F350 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $40
                                            ; ($2F,$50).
 $F358 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $42
                                            ; ($AF,$50).
 $F360 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $42
                                            ; ($27,$50).
 $F368 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $43
                                            ; ($A7,$50).
 $F370 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $43
                                            ; ($6F,$90).
 $F378 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $44
                                            ; ($6F,$10).
 $F380 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Cave Door, Screen $44
                                            ; ($6F,$98).
 $F388 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Cave Door, Screen $45
                                            ; ($6F,$18).
 $F390 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $43
                                            ; ($2F,$50).
 $F398 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $46
                                            ; ($A7,$50).
 $F3A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $46
                                            ; ($6F,$18).
 $F3A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $47
                                            ; ($6F,$98).
 $F3B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Cave Door, Screen $47
                                            ; ($6F,$10).
 $F3B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Cave Door, Screen $48
                                            ; ($6F,$90).
 $F3C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $48
                                            ; ($A7,$50).
 $F3C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $49
                                            ; ($27,$50).
 $F3D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Cave Door, Screen $48
                                            ; ($6F,$18).
 $F3D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Cave Door, Screen $4A
                                            ; ($6F,$98).
 $F3E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4A
                                            ; ($6F,$10).
 $F3E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4B
                                            ; ($6F,$90).
 $F3F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4B
                                            ; ($2F,$50).
 $F3F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4C
                                            ; ($A7,$50).
 $F400 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $48
                                            ; ($2F,$50).
 $F408 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4D
                                            ; ($AF,$50).
 $F410 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Cave Door, Screen $4D
                                            ; ($27,$50).
 $F418 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Cave Door, Screen $4E
                                            ; ($A7,$50).
 $F420 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4E
                                            ; ($6F,$90).
 $F428 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4F
                                            ; ($6F,$10).
 $F430 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4F
                                            ; ($6F,$98).
 $F438 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $50
                                            ; ($6F,$18).
 $F440 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $50
                                            ; ($A7,$50).
 $F448 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $51
                                            ; ($27,$50).
 $F450 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Cave Door, Screen
                                            ; $50 ($6F,$90).
 $F458 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Cave Door, Screen
                                            ; $52 ($6F,$10).
 $F460 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $52
                                            ; ($6F,$98).
 $F468 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $53
                                            ; ($6F,$18).
 $F470 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $1D
                                            ; ($6F,$90).
 $F478 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $43
                                            ; ($6F,$18).
 $F480 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $46
                                            ; ($2F,$50).
 $F488 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $51
                                            ; ($AF,$50).
 $F490 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $4C
                                            ; ($6F,$18).
 $F498 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $55
                                            ; ($6F,$90).
 $F4A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $54
                                            ; ($6F,$90).
 $F4A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $55
                                            ; ($6F,$18).
 $F4B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $54
                                            ; ($6F,$18).
 $F4B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $30
                                            ; ($6F,$90).
 $F4C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $2D
                                            ; ($6F,$08).
 $F4C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $75
                                            ; ($6F,$A0).
 $F4D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $75
                                            ; ($B7,$50).
 $F4D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $76
                                            ; ($1F,$50).
 $F4E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $76
                                            ; ($6F,$A0).
 $F4E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $77
                                            ; ($6F,$08).
 $F4F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $77
                                            ; ($6F,$A0).
 $F4F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $78
                                            ; ($6F,$08).
 $F500 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $78
                                            ; ($B7,$50).
 $F508 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $79
                                            ; ($1F,$50).
 $F510 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $79
                                            ; ($B7,$50).
 $F518 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $7A
                                            ; ($1F,$50).
 $F520 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $7A
                                            ; ($6F,$08).
 $F528 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $7B
                                            ; ($6F,$A0).
 $F530 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $7B ($6F,$08).
 $F538 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $7C ($6F,$A0).
 $F540 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $7C ($1F,$50).
 $F548 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $7D ($B7,$50).
 $F550 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $7D
                                            ; ($1F,$50).
 $F558 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $76
                                            ; ($B7,$50).
 $F560 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $7A ($6F,$A0).
 $F568 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $7E ($6F,$08).
 $F570 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $7E
                                            ; ($1F,$50).
 $F578 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $29
                                            ; ($B7,$50).
 $F580 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $21
                                            ; ($1F,$50).
 $F588 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $88
                                            ; ($B7,$50).
 $F590 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $7F ($6F,$A0).
 $F598 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $80 ($6F,$08).
 $F5A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $80
                                            ; ($B7,$50).
 $F5A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $82
                                            ; ($1F,$50).
 $F5B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $82
                                            ; ($6F,$08).
 $F5B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $81
                                            ; ($6F,$A0).
 $F5C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $81
                                            ; ($1F,$50).
 $F5C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $7F
                                            ; ($B7,$50).
 $F5D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $82 ($6F,$A0).
 $F5D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $87 ($6F,$08).
 $F5E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $87
                                            ; ($6F,$A0).
 $F5E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $88
                                            ; ($6F,$08).
 $F5F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $87
                                            ; ($B7,$50).
 $F5F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $8B
                                            ; ($1F,$50).
 $F600 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $8B
                                            ; ($B7,$50).
 $F608 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $8C
                                            ; ($1F,$50).
 $F610 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $8C ($B7,$50).
 $F618 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $8D ($1F,$50).
 $F620 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $83 ($6F,$A0).
 $F628 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $84 ($6F,$08).
 $F630 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $84
                                            ; ($B7,$50).
 $F638 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $86
                                            ; ($1F,$50).
 $F640 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $86
                                            ; ($6F,$08).
 $F648 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $85
                                            ; ($6F,$A0).
 $F650 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $85
                                            ; ($1F,$50).
 $F658 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $83
                                            ; ($B7,$50).
 $F660 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $84 ($6F,$A0).
 $F668 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $89 ($6F,$08).
 $F670 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $89
                                            ; ($1F,$50).
 $F678 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $8D
                                            ; ($B7,$50).
 $F680 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $89
                                            ; ($6F,$A0).
 $F688 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $8A
                                            ; ($6F,$08).
 $F690 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $8A ($1F,$50).
 $F698 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $23 ($B7,$50).
 $F6A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $13
                                            ; ($6F,$08).
 $F6A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $73
                                            ; ($6F,$A0).
 $F6B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $11
                                            ; ($6F,$80).
 $F6B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6B
                                            ; ($6F,$08).
 $F6C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6B
                                            ; ($6F,$A0).
 $F6C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6C
                                            ; ($6F,$08).
 $F6D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $6C ($6F,$A0).
 $F6D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $03 ($6F,$08).
 $F6E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $0F ($6F,$80).
 $F6E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $6D ($6F,$08).
 $F6F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6D
                                            ; ($6F,$A0).
 $F6F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6E
                                            ; ($6F,$08).
 $F700 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6E
                                            ; ($6F,$A0).
 $F708 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $05
                                            ; ($6F,$08).
 $F710 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $0D ($B7,$50).
 $F718 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $6F ($1F,$50).
 $F720 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $6F
                                            ; ($B7,$50).
 $F728 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $70
                                            ; ($1F,$70).
 $F730 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $70
                                            ; ($1F,$30).
 $F738 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; BigDooor Frame, Screen $71
                                            ; ($B6,$48).
 $F740 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $71
                                            ; ($28,$50).
 $F748 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; BigDooor Frame, Screen $72
                                            ; ($B6,$48).
 $F750 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $72
                                            ; ($28,$50).
 $F758 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $35
                                            ; ($A7,$50).
 $F760 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $30
                                            ; ($6F,$18).
 $F768 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $74
                                            ; ($6F,$90).
 $F770 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $56
                                            ; ($6F,$A0).
 $F778 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $57
                                            ; ($6F,$08).
 $F780 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $57 ($6F,$A0).
 $F788 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $58 ($6F,$08).
 $F790 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $58
                                            ; ($6F,$A0).
 $F798 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $59
                                            ; ($6F,$08).
 $F7A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5A
                                            ; ($6F,$A0).
 $F7A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5B
                                            ; ($6F,$08).
 $F7B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $5B ($6F,$A0).
 $F7B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $5C ($6F,$08).
 $F7C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $5C ($6F,$A0).
 $F7C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $5D ($6F,$08).
 $F7D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $5E ($6F,$A0).
 $F7D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $5F ($6F,$08).
 $F7E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $5F ($6F,$A0).
 $F7E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $60 ($6F,$08).
 $F7F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $60
                                            ; ($6F,$A0).
 $F7F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $61
                                            ; ($6F,$08).
 $F800 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $62
                                            ; ($6F,$A0).
 $F808 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $63
                                            ; ($6F,$08).
 $F810 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $63
                                            ; ($6F,$A0).
 $F818 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $64
                                            ; ($6F,$08).
 $F820 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $64 ($6F,$A0).
 $F828 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $65 ($6F,$08).
 $F830 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $56
                                            ; ($B7,$50).
 $F838 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5A
                                            ; ($1F,$50).
 $F840 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $5A ($B7,$50).
 $F848 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $5E ($1F,$50).
 $F850 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5E
                                            ; ($B7,$50).
 $F858 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $62
                                            ; ($1F,$50).
 $F860 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $57
                                            ; ($B7,$50).
 $F868 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5B
                                            ; ($1F,$50).
 $F870 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $5B ($B7,$30).
 $F878 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $5F ($1F,$30).
 $F880 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $5F ($B7,$50).
 $F888 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $63 ($1F,$50).
 $F890 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $58
                                            ; ($B7,$50).
 $F898 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5C
                                            ; ($1F,$50).
 $F8A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $5C ($B7,$70).
 $F8A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $60 ($1F,$70).
 $F8B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $60 ($B7,$50).
 $F8B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $64 ($1F,$50).
 $F8C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $59 ($B7,$50).
 $F8C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $5D ($1F,$50).
 $F8D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $5D
                                            ; ($B7,$50).
 $F8D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $61
                                            ; ($1F,$50).
 $F8E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $61
                                            ; ($B7,$50).
 $F8E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $65
                                            ; ($1F,$50).
 $F8F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $67 ($B7,$50).
 $F8F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cyan Locked Normal Door, Screen
                                            ; $56 ($1F,$50).
 $F900 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $68 ($B7,$50).
 $F908 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Red Locked Normal Door, Screen
                                            ; $59 ($1F,$50).
 $F910 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $69 ($6F,$A0).
 $F918 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $56 ($6F,$08).
 $F920 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $6A ($6F,$A0).
 $F928 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Green Locked Normal Door, Screen
                                            ; $62 ($6F,$08).
 $F930 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($1F,$30).
 $F938 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $5B ($B7,$70).
 $F940 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($1F,$70).
 $F948 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $5C ($B7,$30).
 $F950 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($B7,$30).
 $F958 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $5F ($1F,$70).
 $F960 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $66 ($B7,$70).
 $F968 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Yellow Locked Normal Door, Screen
                                            ; $60 ($1F,$30).
 $F970 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $65
                                            ; ($6F,$A0).
 $F978 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Normal Door Frame, Screen $1B
                                            ; ($6F,$08).
 $F980 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $40
                                            ; ($A7,$50).
 $F988 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $8F
                                            ; ($2F,$50).
 $F990 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $54
                                            ; ($A7,$50).
 $F998 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $90
                                            ; ($2F,$50).
 $F9A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $90
                                            ; ($A7,$50).
 $F9A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $91
                                            ; ($2F,$50).
 $F9B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $91
                                            ; ($6F,$90).
 $F9B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $92
                                            ; ($6F,$18).
 $F9C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $92
                                            ; ($6F,$90).
 $F9C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $93
                                            ; ($6F,$18).
 $F9D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $93
                                            ; ($6F,$90).
 $F9D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $94
                                            ; ($6F,$18).
 $F9E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $3A
                                            ; ($2F,$50).
 $F9E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Cave Dooor Frame, Screen $94
                                            ; ($A7,$50).
 $F9F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $73
                                            ; ($70,$50).
 $F9F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $74 ($74,$48).
 $FA00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $03
                                            ; ($70,$30).
 $FA08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $65 ($74,$38).
 $FA10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $61
                                            ; ($70,$50).
 $FA18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $4B ($74,$48).
 $FA20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $2D
                                            ; ($90,$50).
 $FA28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $8D ($94,$48).
 $FA30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $76
                                            ; ($70,$50).
 $FA38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $84 ($74,$48).
 $FA40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $8B
                                            ; ($70,$50).
 $FA48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $6C ($74,$48).
 $FA50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $8D
                                            ; ($50,$50).
 $FA58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $6E ($54,$48).
 $FA60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $21
                                            ; ($70,$70).
 $FA68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $03 ($74,$68).
 $FA70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $15
                                            ; ($80,$50).
 $FA78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $66 ($74,$48).
 $FA80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $78
                                            ; ($70,$70).
 $FA88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $8A ($74,$68).
 $FA90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Open Trap Door, Screen $29
                                            ; ($80,$50).
 $FA98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Rug, Screen $09 ($74,$48).
 $FAA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $0B ($97,$50).
 $FAA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $0C ($97,$50).
 $FAB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Barrels, Screen $91 ($8F,$50).
 $FAB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Barrels, Screen $3D ($5F,$5F).
 $FAC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $1F ($67,$98).
 $FAC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $21 ($67,$08).
 $FAD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $25 ($67,$98).
 $FAD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $23 ($67,$08).
 $FAE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $00 ($3F,$98).
 $FAE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $06 ($47,$38).
 $FAF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $00 ($8F,$98).
 $FAF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $06 ($47,$78).
 $FB00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $01 ($27,$58).
 $FB08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $03 ($27,$58).
 $FB10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $05 ($B7,$58).
 $FB18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $07 ($B7,$58).
 $FB20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $17 ($27,$58).
 $FB28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $15 ($97,$78).
 $FB30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $15 ($97,$38).
 $FB38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $13 ($27,$58).
 $FB40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $88 ($3F,$08).
 $FB48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $8A ($47,$08).
 $FB50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $88 ($8F,$08).
 $FB58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $8A ($87,$08).
 $FB60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $27 ($27,$38).
 $FB68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $2B ($27,$38).
 $FB70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $27 ($27,$78).
 $FB78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $2B ($27,$78).
 $FB80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $56 ($27,$38).
 $FB88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $24 ($47,$38).
 $FB90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $56 ($27,$78).
 $FB98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $24 ($47,$78).
 $FBA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $7C ($27,$38).
 $FBA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $7A ($27,$38).
 $FBB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $7C ($27,$78).
 $FBB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $7A ($27,$78).
 $FBC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $09 ($3F,$08).
 $FBC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $7F ($B7,$38).
 $FBD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $09 ($8F,$08).
 $FBD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Knight, Screen $7F ($B7,$78).
 $FBE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $0D ($50,$38).
 $FBE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $13 ($90,$70).
 $FBF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $63 ($50,$38).
 $FBF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $5D ($50,$70).
 $FC00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $18 ($50,$48).
 $FC08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $88 ($50,$70).
 $FC10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $7A ($50,$38).
 $FC18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $81 ($50,$70).
 $FC20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $18 ($80,$58).
 $FC28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $6D ($90,$30).
 $FC30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $5B ($50,$38).
 $FC38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $5C ($50,$70).
 $FC40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $6A ($98,$78).
 $FC48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $1B ($50,$70).
 $FC50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $2E ($57,$38).
 $FC58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $7D ($50,$48).
 $FC60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $2E ($7F,$60).
 $FC68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $7D ($80,$58).
 $FC70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $2A ($57,$38).
 $FC78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $2D ($80,$30).
 $FC80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $2A ($7F,$60).
 $FC88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Table, Screen $2D ($80,$70).
 $FC90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $8D ($67,$28).
 $FC98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $8C ($67,$28).
 $FCA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $8B
                                            ; ($6F,$88).
 $FCA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $8C ($67,$88).
 $FCB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $16 ($37,$58).
 $FCB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $14 ($97,$58).
 $FCC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $0E
                                            ; ($57,$28).
 $FCC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $12 ($6F,$88).
 $FCD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $0F ($67,$28).
 $FCD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $11 ($67,$28).
 $FCE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $10
                                            ; ($6F,$88).
 $FCE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $73 ($97,$58).
 $FCF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $08 ($67,$88).
 $FCF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $18 ($67,$88).
 $FD00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $6F
                                            ; ($67,$28).
 $FD08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $0E ($77,$28).
 $FD10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $00 ($17,$28).
 $FD18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $19 ($37,$58).
 $FD20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $00 ($1C,$78).
 $FD28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $0B ($37,$58).
 $FD30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $00 ($B7,$38).
 $FD38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $19 ($97,$58).
 $FD40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $00
                                            ; ($B7,$78).
 $FD48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $0B ($97,$58).
 $FD50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $04 ($47,$28).
 $FD58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $15
                                            ; ($37,$58).
 $FD60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $04 ($87,$28).
 $FD68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $14 ($37,$58).
 $FD70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $73 ($3C,$58).
 $FD78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $6E ($B7,$58).
 $FD80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $6D ($B7,$58).
 $FD88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $0E ($6F,$88).
 $FD90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $07 ($6F,$A8).
 $FD98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $06 ($97,$38).
 $FDA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $06 ($97,$78).
 $FDA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $01 ($67,$A8).
 $FDB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $18 ($6F,$28).
 $FDB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $17 ($67,$A8).
 $FDC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $87
                                            ; ($17,$38).
 $FDC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $89 ($B7,$38).
 $FDD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $87 ($17,$78).
 $FDD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $89
                                            ; ($B7,$78).
 $FDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $00 ($47,$08).
 $FDE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $82 ($B7,$38).
 $FDF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $00 ($87,$08).
 $FDF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $82
                                            ; ($B7,$78).
 $FE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $66 ($47,$A0).
 $FE08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $61 ($6F,$A8).
 $FE10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $66
                                            ; ($87,$A8).
 $FE18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $5D ($6F,$A8).
 $FE20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $66 ($47,$08).
 $FE28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $65 ($B7,$58).
 $FE30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $66 ($87,$08).
 $FE38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $64 ($B7,$58).
 $FE40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $63 ($B7,$58).
 $FE48 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $62
                                            ; ($B7,$50).
 $FE50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $70 ($B7,$38).
 $FE58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $0D
                                            ; ($6F,$08).
 $FE60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $70 ($B7,$78).
 $FE68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $0C ($37,$58).
 $FE70 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $09 ($47,$A8).
 $FE78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $7F
                                            ; ($60,$08).
 $FE80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $09 ($87,$A0).
 $FE88 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $7F ($17,$58).
 $FE90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $5A
                                            ; ($47,$08).
 $FE98 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $27 ($47,$A8).
 $FEA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $5A ($87,$08).
 $FEA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Shield, Screen $27 ($87,$A8).
 $FEB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Acg Shield, Screen $29 ($47,$A8).
 $FEB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Trophy, Screen $7E ($60,$A8).
 $FEC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Picture, Screen $29 ($87,$A0).
 $FEC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Antler Trophy, Screen $7E
                                            ; ($B7,$58).
 $FED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $0D ($27,$30).
 $FED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $13 ($B7,$30).
 $FEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $09 ($27,$30).
 $FEE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $17 ($B7,$30).
 $FEF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $35 ($6F,$88).
 $FEF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $8F ($6F,$18).
 $FF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $67 ($6F,$98).
 $FF08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $68 ($6F,$08).
 $FF10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; Clock, Screen $8D ($4F,$78).
 $FF18 DEFB $F3,$0D,$CE,$0B,$E3,$50,$CE,$0B ; Clock, Screen $22 ($6F,$28).
 $FF20 DEFB $E4,$50,$1D,$17,$DC,$0A,$CE,$0B ; Clock, Screen $76 ($27,$30).
 $FF28 DEFB $E7,$50,$1A,$17,$DC,$0A,$D7,$18 ; Clock, Screen $75 ($B7,$30).
 $FF30 DEFB $38,$00,$38,$00,$0D,$19,$DB,$02 ; Bookcase, Screen $0A ($47,$40).
 $FF38 DEFB $4D,$00,$DB,$02,$4D,$00,$C4,$58 ; Bookcase, Screen $16 ($97,$40).
 $FF40 DEFB $3C,$02,$C3,$58,$44,$38,$C0,$57 ; Bookcase, Screen $3D ($37,$48).
 $FF48 DEFB $71,$0E,$F3,$0D,$21,$17,$C6,$1E ; Bookcase, Screen $49 ($AF,$50).
 $FF50 DEFB $FE,$5F,$76,$1B,$03,$13,$00,$3E ; Bookcase, Screen $69 ($B7,$40).
 $FF58 DEFB $00,$3C,$42,$42,$7E,$42,$42,$00 ; Bookcase, Screen $6A ($27,$40).
 $FF60 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00 ; Bookcase, Screen $6C ($B7,$40).
 $FF68 DEFB $00,$3C,$42,$40,$40,$42,$3C,$00 ; Bookcase, Screen $6E ($27,$40).
 $FF70 DEFB $00,$78,$44,$42,$42,$44,$78,$00 ; Bookcase, Screen $3E ($77,$88).
 $FF78 DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00 ; Bookcase, Screen $41 ($A7,$48).
 $FF80 DEFB $00,$7E,$40,$7C,$40,$40,$40,$00 ; Barrel, Screen $45 ($37,$50).
 $FF88 DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00 ; Barrel, Screen $53 ($A4,$50).
 $FF90 DEFB $00,$42,$42,$7E,$42,$42,$42,$00 ; Barrel, Screen $4C ($6F,$88).
 $FF98 DEFB $00,$3E,$08,$08,$08,$08,$3E,$00 ; Barrel, Screen $4E ($6F,$18).
 $FFA0 DEFB $00,$02,$02,$02,$42,$42,$3C,$00 ; Barrel, Screen $38 ($37,$50).
 $FFA8 DEFB $00,$44,$48,$70,$48,$44,$42,$00 ; Barrel, Screen $4B ($A7,$50).
 $FFB0 DEFB $00,$40,$40,$40,$40,$40,$7E,$00 ; Barrel, Screen $6B ($B7,$50).
 $FFB8 DEFB $00,$42,$66,$5A,$42,$42,$42,$00 ; Barrel, Screen $6D ($27,$50).
 $FFC0 DEFB $00,$42,$62,$52,$4A,$46,$42,$00 ; Barrel, Screen $8A ($6F,$98).
 $FFC8 DEFB $00,$3C,$42,$42,$42,$42,$3C,$00 ; Barrel, Screen $08 ($6F,$28).
 $FFD0 DEFB $00,$7C,$42,$42,$7C,$40,$40,$00 ; Acg Exit Door, Screen $00
                                            ; ($7F,$98).
 $FFD8 DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00 ; Acg Exit Door, Screen $8E
                                            ; ($7F,$00).
 $FFE0 DEFB $00,$7C,$42,$42,$7C,$44,$42,$00 ; Skeleton, Screen $53 ($77,$80).
 $FFE8 DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00 ; Skeleton, Screen $8F ($77,$80).
 $FFF0 DEFB $00,$FE,$10,$10,$10,$10,$10,$00 ; Skeleton, Screen $33 ($6F,$18).
 $FFF8 DEFB $00,$42,$42,$42,$42,$42,$3C,$00 ; Skeleton, Screen $55 ($A7,$50).
